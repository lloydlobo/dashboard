<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1622" onload="init(evt)" viewBox="0 0 1200 1622" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1622" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1605.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1605.00"> </text><svg id="frames" x="10" width="1180" total_samples="376"><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="0.0000%" y="1221" width="0.2660%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1231.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="0.0000%" y="1205" width="0.2660%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50"></text></g><g><title>&lt;url::parser::Input as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="0.0000%" y="1189" width="0.2660%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.27%)</title><rect x="0.0000%" y="1173" width="0.2660%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.27%)</title><rect x="0.0000%" y="1157" width="0.2660%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.27%)</title><rect x="0.0000%" y="1141" width="0.2660%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1151.50"></text></g><g><title>&lt;url::parser::Input as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.27%)</title><rect x="0.0000%" y="1125" width="0.2660%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1135.50"></text></g><g><title>url::parser::Parser::parse_host_and_port (2 samples, 0.53%)</title><rect x="0.0000%" y="1253" width="0.5319%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1263.50"></text></g><g><title>url::parser::Parser::parse_host (2 samples, 0.53%)</title><rect x="0.0000%" y="1237" width="0.5319%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1247.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.27%)</title><rect x="0.2660%" y="1221" width="0.2660%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.5160%" y="1231.50"></text></g><g><title>&lt;percent_encoding::PercentEncode as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="0.5319%" y="1173" width="0.2660%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.7819%" y="1183.50"></text></g><g><title>&lt;url::Url as serde::de::Deserialize&gt;::deserialize (4 samples, 1.06%)</title><rect x="0.0000%" y="1413" width="1.0638%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1423.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_str (4 samples, 1.06%)</title><rect x="0.0000%" y="1397" width="1.0638%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1407.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (4 samples, 1.06%)</title><rect x="0.0000%" y="1381" width="1.0638%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1391.50"></text></g><g><title>serde::de::Visitor::visit_string (4 samples, 1.06%)</title><rect x="0.0000%" y="1365" width="1.0638%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50"></text></g><g><title>&lt;&lt;url::Url as serde::de::Deserialize&gt;::deserialize::UrlVisitor as serde::de::Visitor&gt;::visit_str (4 samples, 1.06%)</title><rect x="0.0000%" y="1349" width="1.0638%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50"></text></g><g><title>url::Url::parse (4 samples, 1.06%)</title><rect x="0.0000%" y="1333" width="1.0638%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50"></text></g><g><title>url::ParseOptions::parse (4 samples, 1.06%)</title><rect x="0.0000%" y="1317" width="1.0638%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50"></text></g><g><title>url::parser::Parser::parse_url (4 samples, 1.06%)</title><rect x="0.0000%" y="1301" width="1.0638%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>url::parser::Parser::parse_with_scheme (4 samples, 1.06%)</title><rect x="0.0000%" y="1285" width="1.0638%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1295.50"></text></g><g><title>url::parser::Parser::after_double_slash (4 samples, 1.06%)</title><rect x="0.0000%" y="1269" width="1.0638%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1279.50"></text></g><g><title>url::parser::Parser::parse_path_start (2 samples, 0.53%)</title><rect x="0.5319%" y="1253" width="0.5319%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="2"/><text x="0.7819%" y="1263.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.53%)</title><rect x="0.5319%" y="1237" width="0.5319%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="2"/><text x="0.7819%" y="1247.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend (2 samples, 0.53%)</title><rect x="0.5319%" y="1221" width="0.5319%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="2"/><text x="0.7819%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.53%)</title><rect x="0.5319%" y="1205" width="0.5319%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="2"/><text x="0.7819%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.53%)</title><rect x="0.5319%" y="1189" width="0.5319%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="2"/><text x="0.7819%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.27%)</title><rect x="0.7979%" y="1173" width="0.2660%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1183.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend::{{closure}} (1 samples, 0.27%)</title><rect x="0.7979%" y="1157" width="0.2660%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1167.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.27%)</title><rect x="0.7979%" y="1141" width="0.2660%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.27%)</title><rect x="0.7979%" y="1125" width="0.2660%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.27%)</title><rect x="0.7979%" y="1109" width="0.2660%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.27%)</title><rect x="0.7979%" y="1093" width="0.2660%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1103.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.27%)</title><rect x="0.7979%" y="1077" width="0.2660%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1087.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.27%)</title><rect x="0.7979%" y="1061" width="0.2660%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="1.0479%" y="1071.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.27%)</title><rect x="1.0638%" y="1125" width="0.2660%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="1.3138%" y="1135.50"></text></g><g><title>&lt;octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::Repository&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 1.60%)</title><rect x="0.0000%" y="1541" width="1.5957%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1551.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (6 samples, 1.60%)</title><rect x="0.0000%" y="1525" width="1.5957%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1535.50"></text></g><g><title>serde::de::MapAccess::next_value (6 samples, 1.60%)</title><rect x="0.0000%" y="1509" width="1.5957%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1519.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (6 samples, 1.60%)</title><rect x="0.0000%" y="1493" width="1.5957%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1503.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 1.60%)</title><rect x="0.0000%" y="1477" width="1.5957%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1487.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (6 samples, 1.60%)</title><rect x="0.0000%" y="1461" width="1.5957%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1471.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_option (6 samples, 1.60%)</title><rect x="0.0000%" y="1445" width="1.5957%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1455.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (6 samples, 1.60%)</title><rect x="0.0000%" y="1429" width="1.5957%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1439.50"></text></g><g><title>octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::User&gt;::deserialize (2 samples, 0.53%)</title><rect x="1.0638%" y="1413" width="0.5319%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1423.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.53%)</title><rect x="1.0638%" y="1397" width="0.5319%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1407.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.53%)</title><rect x="1.0638%" y="1381" width="0.5319%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1391.50"></text></g><g><title>&lt;octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.53%)</title><rect x="1.0638%" y="1365" width="0.5319%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1375.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (2 samples, 0.53%)</title><rect x="1.0638%" y="1349" width="0.5319%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1359.50"></text></g><g><title>serde::de::MapAccess::next_value (2 samples, 0.53%)</title><rect x="1.0638%" y="1333" width="0.5319%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.53%)</title><rect x="1.0638%" y="1317" width="0.5319%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1327.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.53%)</title><rect x="1.0638%" y="1301" width="0.5319%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1311.50"></text></g><g><title>&lt;url::Url as serde::de::Deserialize&gt;::deserialize (2 samples, 0.53%)</title><rect x="1.0638%" y="1285" width="0.5319%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1295.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_str (2 samples, 0.53%)</title><rect x="1.0638%" y="1269" width="0.5319%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1279.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (2 samples, 0.53%)</title><rect x="1.0638%" y="1253" width="0.5319%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1263.50"></text></g><g><title>serde::de::Visitor::visit_string (2 samples, 0.53%)</title><rect x="1.0638%" y="1237" width="0.5319%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1247.50"></text></g><g><title>&lt;&lt;url::Url as serde::de::Deserialize&gt;::deserialize::UrlVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.53%)</title><rect x="1.0638%" y="1221" width="0.5319%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1231.50"></text></g><g><title>url::Url::parse (2 samples, 0.53%)</title><rect x="1.0638%" y="1205" width="0.5319%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1215.50"></text></g><g><title>url::ParseOptions::parse (2 samples, 0.53%)</title><rect x="1.0638%" y="1189" width="0.5319%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1199.50"></text></g><g><title>url::parser::Parser::parse_url (2 samples, 0.53%)</title><rect x="1.0638%" y="1173" width="0.5319%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1183.50"></text></g><g><title>url::parser::Parser::parse_with_scheme (2 samples, 0.53%)</title><rect x="1.0638%" y="1157" width="0.5319%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1167.50"></text></g><g><title>url::parser::Parser::after_double_slash (2 samples, 0.53%)</title><rect x="1.0638%" y="1141" width="0.5319%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="2"/><text x="1.3138%" y="1151.50"></text></g><g><title>url::parser::Parser::parse_host_and_port (1 samples, 0.27%)</title><rect x="1.3298%" y="1125" width="0.2660%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1135.50"></text></g><g><title>url::parser::Parser::parse_host (1 samples, 0.27%)</title><rect x="1.3298%" y="1109" width="0.2660%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1119.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.27%)</title><rect x="1.3298%" y="1093" width="0.2660%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1103.50"></text></g><g><title>url::host::Host::domain_to_ascii (1 samples, 0.27%)</title><rect x="1.3298%" y="1077" width="0.2660%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1087.50"></text></g><g><title>idna::domain_to_ascii (1 samples, 0.27%)</title><rect x="1.3298%" y="1061" width="0.2660%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1071.50"></text></g><g><title>idna::uts46::Config::to_ascii (1 samples, 0.27%)</title><rect x="1.3298%" y="1045" width="0.2660%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1055.50"></text></g><g><title>idna::uts46::Idna::to_ascii (1 samples, 0.27%)</title><rect x="1.3298%" y="1029" width="0.2660%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1039.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.27%)</title><rect x="1.3298%" y="1013" width="0.2660%" height="15" fill="rgb(246,177,23)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.27%)</title><rect x="1.3298%" y="997" width="0.2660%" height="15" fill="rgb(230,62,27)" fg:x="5" fg:w="1"/><text x="1.5798%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.27%)</title><rect x="1.3298%" y="981" width="0.2660%" height="15" fill="rgb(216,154,8)" fg:x="5" fg:w="1"/><text x="1.5798%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.27%)</title><rect x="1.3298%" y="965" width="0.2660%" height="15" fill="rgb(244,35,45)" fg:x="5" fg:w="1"/><text x="1.5798%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.27%)</title><rect x="1.3298%" y="949" width="0.2660%" height="15" fill="rgb(251,115,12)" fg:x="5" fg:w="1"/><text x="1.5798%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.27%)</title><rect x="1.3298%" y="933" width="0.2660%" height="15" fill="rgb(240,54,50)" fg:x="5" fg:w="1"/><text x="1.5798%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.27%)</title><rect x="1.3298%" y="917" width="0.2660%" height="15" fill="rgb(233,84,52)" fg:x="5" fg:w="1"/><text x="1.5798%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.27%)</title><rect x="1.3298%" y="901" width="0.2660%" height="15" fill="rgb(207,117,47)" fg:x="5" fg:w="1"/><text x="1.5798%" y="911.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.27%)</title><rect x="1.3298%" y="885" width="0.2660%" height="15" fill="rgb(249,43,39)" fg:x="5" fg:w="1"/><text x="1.5798%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.27%)</title><rect x="1.3298%" y="869" width="0.2660%" height="15" fill="rgb(209,38,44)" fg:x="5" fg:w="1"/><text x="1.5798%" y="879.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.27%)</title><rect x="1.3298%" y="853" width="0.2660%" height="15" fill="rgb(236,212,23)" fg:x="5" fg:w="1"/><text x="1.5798%" y="863.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.27%)</title><rect x="1.3298%" y="837" width="0.2660%" height="15" fill="rgb(242,79,21)" fg:x="5" fg:w="1"/><text x="1.5798%" y="847.50"></text></g><g><title>__realloc (1 samples, 0.27%)</title><rect x="1.3298%" y="821" width="0.2660%" height="15" fill="rgb(211,96,35)" fg:x="5" fg:w="1"/><text x="1.5798%" y="831.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.27%)</title><rect x="1.5957%" y="1541" width="0.2660%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1551.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1 samples, 0.27%)</title><rect x="1.5957%" y="1525" width="0.2660%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1535.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.27%)</title><rect x="1.5957%" y="1509" width="0.2660%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1519.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.27%)</title><rect x="1.5957%" y="1493" width="0.2660%" height="15" fill="rgb(235,213,38)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1503.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="1.5957%" y="1477" width="0.2660%" height="15" fill="rgb(237,122,38)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1487.50"></text></g><g><title>octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::Repository&gt;::deserialize (1 samples, 0.27%)</title><rect x="1.5957%" y="1461" width="0.2660%" height="15" fill="rgb(244,218,35)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1471.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.27%)</title><rect x="1.5957%" y="1445" width="0.2660%" height="15" fill="rgb(240,68,47)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1455.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.27%)</title><rect x="1.5957%" y="1429" width="0.2660%" height="15" fill="rgb(210,16,53)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1439.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.27%)</title><rect x="1.5957%" y="1413" width="0.2660%" height="15" fill="rgb(235,124,12)" fg:x="6" fg:w="1"/><text x="1.8457%" y="1423.50"></text></g><g><title>&lt;trust_dns_proto::TokioTime as trust_dns_proto::Time&gt;::timeout::{{closure}} (1 samples, 0.27%)</title><rect x="1.8617%" y="1541" width="0.2660%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="2.1117%" y="1551.50"></text></g><g><title>ASN1_get_object (1 samples, 0.27%)</title><rect x="2.1277%" y="1541" width="0.2660%" height="15" fill="rgb(250,166,2)" fg:x="8" fg:w="1"/><text x="2.3777%" y="1551.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="2.3936%" y="1541" width="0.2660%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="1"/><text x="2.6436%" y="1551.50"></text></g><g><title>___pthread_rwlock_rdlock (1 samples, 0.27%)</title><rect x="2.6596%" y="1541" width="0.2660%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="1"/><text x="2.9096%" y="1551.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.27%)</title><rect x="7.7128%" y="1333" width="0.2660%" height="15" fill="rgb(228,99,48)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1343.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.27%)</title><rect x="7.7128%" y="1317" width="0.2660%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1327.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (1 samples, 0.27%)</title><rect x="7.7128%" y="1301" width="0.2660%" height="15" fill="rgb(247,143,39)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1311.50"></text></g><g><title>dashboard::app::try_main_refactor_v3::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.27%)</title><rect x="7.7128%" y="1285" width="0.2660%" height="15" fill="rgb(236,97,10)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1295.50"></text></g><g><title>dashboard::app::write_json_file (1 samples, 0.27%)</title><rect x="7.7128%" y="1269" width="0.2660%" height="15" fill="rgb(233,208,19)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1279.50"></text></g><g><title>serde_json::ser::to_writer_pretty (1 samples, 0.27%)</title><rect x="7.7128%" y="1253" width="0.2660%" height="15" fill="rgb(216,164,2)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1263.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.27%)</title><rect x="7.7128%" y="1237" width="0.2660%" height="15" fill="rgb(220,129,5)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1247.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.27%)</title><rect x="7.7128%" y="1221" width="0.2660%" height="15" fill="rgb(242,17,10)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.27%)</title><rect x="7.7128%" y="1205" width="0.2660%" height="15" fill="rgb(242,107,0)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.27%)</title><rect x="7.7128%" y="1189" width="0.2660%" height="15" fill="rgb(251,28,31)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.27%)</title><rect x="7.7128%" y="1173" width="0.2660%" height="15" fill="rgb(233,223,10)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1183.50"></text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (1 samples, 0.27%)</title><rect x="7.7128%" y="1157" width="0.2660%" height="15" fill="rgb(215,21,27)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1167.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1 samples, 0.27%)</title><rect x="7.7128%" y="1141" width="0.2660%" height="15" fill="rgb(232,23,21)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1151.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="7.7128%" y="1125" width="0.2660%" height="15" fill="rgb(244,5,23)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1135.50"></text></g><g><title>dashboard::gh::_::&lt;impl serde::ser::Serialize for dashboard::gh::GitRepo&gt;::serialize (1 samples, 0.27%)</title><rect x="7.7128%" y="1109" width="0.2660%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1119.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.27%)</title><rect x="7.7128%" y="1093" width="0.2660%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1103.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="7.7128%" y="1077" width="0.2660%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1087.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="7.7128%" y="1061" width="0.2660%" height="15" fill="rgb(240,187,13)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1071.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::option::Option&lt;T&gt;&gt;::serialize (1 samples, 0.27%)</title><rect x="7.7128%" y="1045" width="0.2660%" height="15" fill="rgb(223,113,26)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1055.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_some (1 samples, 0.27%)</title><rect x="7.7128%" y="1029" width="0.2660%" height="15" fill="rgb(206,192,2)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1039.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.27%)</title><rect x="7.7128%" y="1013" width="0.2660%" height="15" fill="rgb(241,108,4)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1023.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.27%)</title><rect x="7.7128%" y="997" width="0.2660%" height="15" fill="rgb(247,173,49)" fg:x="29" fg:w="1"/><text x="7.9628%" y="1007.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::end (1 samples, 0.27%)</title><rect x="7.7128%" y="981" width="0.2660%" height="15" fill="rgb(224,114,35)" fg:x="29" fg:w="1"/><text x="7.9628%" y="991.50"></text></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::end_array (1 samples, 0.27%)</title><rect x="7.7128%" y="965" width="0.2660%" height="15" fill="rgb(245,159,27)" fg:x="29" fg:w="1"/><text x="7.9628%" y="975.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.27%)</title><rect x="7.7128%" y="949" width="0.2660%" height="15" fill="rgb(245,172,44)" fg:x="29" fg:w="1"/><text x="7.9628%" y="959.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.27%)</title><rect x="7.7128%" y="933" width="0.2660%" height="15" fill="rgb(236,23,11)" fg:x="29" fg:w="1"/><text x="7.9628%" y="943.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.27%)</title><rect x="7.7128%" y="917" width="0.2660%" height="15" fill="rgb(205,117,38)" fg:x="29" fg:w="1"/><text x="7.9628%" y="927.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.27%)</title><rect x="7.7128%" y="901" width="0.2660%" height="15" fill="rgb(237,72,25)" fg:x="29" fg:w="1"/><text x="7.9628%" y="911.50"></text></g><g><title>__GI___write (1 samples, 0.27%)</title><rect x="7.7128%" y="885" width="0.2660%" height="15" fill="rgb(244,70,9)" fg:x="29" fg:w="1"/><text x="7.9628%" y="895.50"></text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.27%)</title><rect x="7.7128%" y="869" width="0.2660%" height="15" fill="rgb(217,125,39)" fg:x="29" fg:w="1"/><text x="7.9628%" y="879.50"></text></g><g><title>rayon_core::job::JobFifo::new (10 samples, 2.66%)</title><rect x="7.9787%" y="1285" width="2.6596%" height="15" fill="rgb(235,36,10)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1295.50">ra..</text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::new (10 samples, 2.66%)</title><rect x="7.9787%" y="1269" width="2.6596%" height="15" fill="rgb(251,123,47)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1279.50">cr..</text></g><g><title>&lt;crossbeam_deque::deque::Injector&lt;T&gt; as core::default::Default&gt;::default (10 samples, 2.66%)</title><rect x="7.9787%" y="1253" width="2.6596%" height="15" fill="rgb(221,13,13)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1263.50">&lt;c..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 2.66%)</title><rect x="7.9787%" y="1237" width="2.6596%" height="15" fill="rgb(238,131,9)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1247.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 2.66%)</title><rect x="7.9787%" y="1221" width="2.6596%" height="15" fill="rgb(211,50,8)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1231.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 2.66%)</title><rect x="7.9787%" y="1205" width="2.6596%" height="15" fill="rgb(245,182,24)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1215.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 2.66%)</title><rect x="7.9787%" y="1189" width="2.6596%" height="15" fill="rgb(242,14,37)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1199.50">al..</text></g><g><title>alloc::alloc::alloc (10 samples, 2.66%)</title><rect x="7.9787%" y="1173" width="2.6596%" height="15" fill="rgb(246,228,12)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1183.50">al..</text></g><g><title>__GI___libc_malloc (10 samples, 2.66%)</title><rect x="7.9787%" y="1157" width="2.6596%" height="15" fill="rgb(213,55,15)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1167.50">__..</text></g><g><title>_int_malloc (10 samples, 2.66%)</title><rect x="7.9787%" y="1141" width="2.6596%" height="15" fill="rgb(209,9,3)" fg:x="30" fg:w="10"/><text x="8.2287%" y="1151.50">_i..</text></g><g><title>rayon_core::registry::Registry::pop_injected_job (1 samples, 0.27%)</title><rect x="10.6383%" y="1221" width="0.2660%" height="15" fill="rgb(230,59,30)" fg:x="40" fg:w="1"/><text x="10.8883%" y="1231.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (1 samples, 0.27%)</title><rect x="10.6383%" y="1205" width="0.2660%" height="15" fill="rgb(209,121,21)" fg:x="40" fg:w="1"/><text x="10.8883%" y="1215.50"></text></g><g><title>core::sync::atomic::fence (1 samples, 0.27%)</title><rect x="10.6383%" y="1189" width="0.2660%" height="15" fill="rgb(220,109,13)" fg:x="40" fg:w="1"/><text x="10.8883%" y="1199.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (1 samples, 0.27%)</title><rect x="11.1702%" y="1029" width="0.2660%" height="15" fill="rgb(232,18,1)" fg:x="42" fg:w="1"/><text x="11.4202%" y="1039.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.27%)</title><rect x="11.1702%" y="1013" width="0.2660%" height="15" fill="rgb(215,41,42)" fg:x="42" fg:w="1"/><text x="11.4202%" y="1023.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.27%)</title><rect x="11.1702%" y="997" width="0.2660%" height="15" fill="rgb(224,123,36)" fg:x="42" fg:w="1"/><text x="11.4202%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.27%)</title><rect x="11.1702%" y="981" width="0.2660%" height="15" fill="rgb(240,125,3)" fg:x="42" fg:w="1"/><text x="11.4202%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.27%)</title><rect x="11.4362%" y="965" width="0.2660%" height="15" fill="rgb(205,98,50)" fg:x="43" fg:w="1"/><text x="11.6862%" y="975.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (2 samples, 0.53%)</title><rect x="11.7021%" y="965" width="0.5319%" height="15" fill="rgb(205,185,37)" fg:x="44" fg:w="2"/><text x="11.9521%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.53%)</title><rect x="11.7021%" y="949" width="0.5319%" height="15" fill="rgb(238,207,15)" fg:x="44" fg:w="2"/><text x="11.9521%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.53%)</title><rect x="11.7021%" y="933" width="0.5319%" height="15" fill="rgb(213,199,42)" fg:x="44" fg:w="2"/><text x="11.9521%" y="943.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (6 samples, 1.60%)</title><rect x="10.9043%" y="1141" width="1.5957%" height="15" fill="rgb(235,201,11)" fg:x="41" fg:w="6"/><text x="11.1543%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (6 samples, 1.60%)</title><rect x="10.9043%" y="1125" width="1.5957%" height="15" fill="rgb(207,46,11)" fg:x="41" fg:w="6"/><text x="11.1543%" y="1135.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (6 samples, 1.60%)</title><rect x="10.9043%" y="1109" width="1.5957%" height="15" fill="rgb(241,35,35)" fg:x="41" fg:w="6"/><text x="11.1543%" y="1119.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (5 samples, 1.33%)</title><rect x="11.1702%" y="1093" width="1.3298%" height="15" fill="rgb(243,32,47)" fg:x="42" fg:w="5"/><text x="11.4202%" y="1103.50"></text></g><g><title>crossbeam_epoch::default::pin (5 samples, 1.33%)</title><rect x="11.1702%" y="1077" width="1.3298%" height="15" fill="rgb(247,202,23)" fg:x="42" fg:w="5"/><text x="11.4202%" y="1087.50"></text></g><g><title>crossbeam_epoch::default::with_handle (5 samples, 1.33%)</title><rect x="11.1702%" y="1061" width="1.3298%" height="15" fill="rgb(219,102,11)" fg:x="42" fg:w="5"/><text x="11.4202%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 1.33%)</title><rect x="11.1702%" y="1045" width="1.3298%" height="15" fill="rgb(243,110,44)" fg:x="42" fg:w="5"/><text x="11.4202%" y="1055.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (4 samples, 1.06%)</title><rect x="11.4362%" y="1029" width="1.0638%" height="15" fill="rgb(222,74,54)" fg:x="43" fg:w="4"/><text x="11.6862%" y="1039.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (4 samples, 1.06%)</title><rect x="11.4362%" y="1013" width="1.0638%" height="15" fill="rgb(216,99,12)" fg:x="43" fg:w="4"/><text x="11.6862%" y="1023.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (4 samples, 1.06%)</title><rect x="11.4362%" y="997" width="1.0638%" height="15" fill="rgb(226,22,26)" fg:x="43" fg:w="4"/><text x="11.6862%" y="1007.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (4 samples, 1.06%)</title><rect x="11.4362%" y="981" width="1.0638%" height="15" fill="rgb(217,163,10)" fg:x="43" fg:w="4"/><text x="11.6862%" y="991.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.27%)</title><rect x="12.2340%" y="965" width="0.2660%" height="15" fill="rgb(213,25,53)" fg:x="46" fg:w="1"/><text x="12.4840%" y="975.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 0.27%)</title><rect x="12.2340%" y="949" width="0.2660%" height="15" fill="rgb(252,105,26)" fg:x="46" fg:w="1"/><text x="12.4840%" y="959.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="12.2340%" y="933" width="0.2660%" height="15" fill="rgb(220,39,43)" fg:x="46" fg:w="1"/><text x="12.4840%" y="943.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (1 samples, 0.27%)</title><rect x="12.2340%" y="917" width="0.2660%" height="15" fill="rgb(229,68,48)" fg:x="46" fg:w="1"/><text x="12.4840%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.27%)</title><rect x="12.2340%" y="901" width="0.2660%" height="15" fill="rgb(252,8,32)" fg:x="46" fg:w="1"/><text x="12.4840%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.27%)</title><rect x="12.2340%" y="885" width="0.2660%" height="15" fill="rgb(223,20,43)" fg:x="46" fg:w="1"/><text x="12.4840%" y="895.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (3 samples, 0.80%)</title><rect x="12.7660%" y="1061" width="0.7979%" height="15" fill="rgb(229,81,49)" fg:x="48" fg:w="3"/><text x="13.0160%" y="1071.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.80%)</title><rect x="12.7660%" y="1045" width="0.7979%" height="15" fill="rgb(236,28,36)" fg:x="48" fg:w="3"/><text x="13.0160%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.80%)</title><rect x="12.7660%" y="1029" width="0.7979%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="3"/><text x="13.0160%" y="1039.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (1 samples, 0.27%)</title><rect x="13.2979%" y="1013" width="0.2660%" height="15" fill="rgb(249,174,33)" fg:x="50" fg:w="1"/><text x="13.5479%" y="1023.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.27%)</title><rect x="13.2979%" y="997" width="0.2660%" height="15" fill="rgb(233,201,37)" fg:x="50" fg:w="1"/><text x="13.5479%" y="1007.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.27%)</title><rect x="13.2979%" y="981" width="0.2660%" height="15" fill="rgb(221,78,26)" fg:x="50" fg:w="1"/><text x="13.5479%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.27%)</title><rect x="13.2979%" y="965" width="0.2660%" height="15" fill="rgb(250,127,30)" fg:x="50" fg:w="1"/><text x="13.5479%" y="975.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (1 samples, 0.27%)</title><rect x="13.5638%" y="949" width="0.2660%" height="15" fill="rgb(230,49,44)" fg:x="51" fg:w="1"/><text x="13.8138%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.27%)</title><rect x="13.5638%" y="933" width="0.2660%" height="15" fill="rgb(229,67,23)" fg:x="51" fg:w="1"/><text x="13.8138%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.27%)</title><rect x="13.5638%" y="917" width="0.2660%" height="15" fill="rgb(249,83,47)" fg:x="51" fg:w="1"/><text x="13.8138%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (14 samples, 3.72%)</title><rect x="10.6383%" y="1253" width="3.7234%" height="15" fill="rgb(215,43,3)" fg:x="40" fg:w="14"/><text x="10.8883%" y="1263.50">core..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (14 samples, 3.72%)</title><rect x="10.6383%" y="1237" width="3.7234%" height="15" fill="rgb(238,154,13)" fg:x="40" fg:w="14"/><text x="10.8883%" y="1247.50">rayo..</text></g><g><title>rayon_core::registry::WorkerThread::steal (13 samples, 3.46%)</title><rect x="10.9043%" y="1221" width="3.4574%" height="15" fill="rgb(219,56,2)" fg:x="41" fg:w="13"/><text x="11.1543%" y="1231.50">ray..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (13 samples, 3.46%)</title><rect x="10.9043%" y="1205" width="3.4574%" height="15" fill="rgb(233,0,4)" fg:x="41" fg:w="13"/><text x="11.1543%" y="1215.50">cor..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 3.46%)</title><rect x="10.9043%" y="1189" width="3.4574%" height="15" fill="rgb(235,30,7)" fg:x="41" fg:w="13"/><text x="11.1543%" y="1199.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 3.46%)</title><rect x="10.9043%" y="1173" width="3.4574%" height="15" fill="rgb(250,79,13)" fg:x="41" fg:w="13"/><text x="11.1543%" y="1183.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 3.46%)</title><rect x="10.9043%" y="1157" width="3.4574%" height="15" fill="rgb(211,146,34)" fg:x="41" fg:w="13"/><text x="11.1543%" y="1167.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 1.86%)</title><rect x="12.5000%" y="1141" width="1.8617%" height="15" fill="rgb(228,22,38)" fg:x="47" fg:w="7"/><text x="12.7500%" y="1151.50">c..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (7 samples, 1.86%)</title><rect x="12.5000%" y="1125" width="1.8617%" height="15" fill="rgb(235,168,5)" fg:x="47" fg:w="7"/><text x="12.7500%" y="1135.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (7 samples, 1.86%)</title><rect x="12.5000%" y="1109" width="1.8617%" height="15" fill="rgb(221,155,16)" fg:x="47" fg:w="7"/><text x="12.7500%" y="1119.50">c..</text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (7 samples, 1.86%)</title><rect x="12.5000%" y="1093" width="1.8617%" height="15" fill="rgb(215,215,53)" fg:x="47" fg:w="7"/><text x="12.7500%" y="1103.50">r..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (7 samples, 1.86%)</title><rect x="12.5000%" y="1077" width="1.8617%" height="15" fill="rgb(223,4,10)" fg:x="47" fg:w="7"/><text x="12.7500%" y="1087.50">c..</text></g><g><title>crossbeam_epoch::default::pin (3 samples, 0.80%)</title><rect x="13.5638%" y="1061" width="0.7979%" height="15" fill="rgb(234,103,6)" fg:x="51" fg:w="3"/><text x="13.8138%" y="1071.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.80%)</title><rect x="13.5638%" y="1045" width="0.7979%" height="15" fill="rgb(227,97,0)" fg:x="51" fg:w="3"/><text x="13.8138%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.80%)</title><rect x="13.5638%" y="1029" width="0.7979%" height="15" fill="rgb(234,150,53)" fg:x="51" fg:w="3"/><text x="13.8138%" y="1039.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (3 samples, 0.80%)</title><rect x="13.5638%" y="1013" width="0.7979%" height="15" fill="rgb(228,201,54)" fg:x="51" fg:w="3"/><text x="13.8138%" y="1023.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (3 samples, 0.80%)</title><rect x="13.5638%" y="997" width="0.7979%" height="15" fill="rgb(222,22,37)" fg:x="51" fg:w="3"/><text x="13.8138%" y="1007.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (3 samples, 0.80%)</title><rect x="13.5638%" y="981" width="0.7979%" height="15" fill="rgb(237,53,32)" fg:x="51" fg:w="3"/><text x="13.8138%" y="991.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (3 samples, 0.80%)</title><rect x="13.5638%" y="965" width="0.7979%" height="15" fill="rgb(233,25,53)" fg:x="51" fg:w="3"/><text x="13.8138%" y="975.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2 samples, 0.53%)</title><rect x="13.8298%" y="949" width="0.5319%" height="15" fill="rgb(210,40,34)" fg:x="52" fg:w="2"/><text x="14.0798%" y="959.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (2 samples, 0.53%)</title><rect x="13.8298%" y="933" width="0.5319%" height="15" fill="rgb(241,220,44)" fg:x="52" fg:w="2"/><text x="14.0798%" y="943.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.53%)</title><rect x="13.8298%" y="917" width="0.5319%" height="15" fill="rgb(235,28,35)" fg:x="52" fg:w="2"/><text x="14.0798%" y="927.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (2 samples, 0.53%)</title><rect x="13.8298%" y="901" width="0.5319%" height="15" fill="rgb(210,56,17)" fg:x="52" fg:w="2"/><text x="14.0798%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.53%)</title><rect x="13.8298%" y="885" width="0.5319%" height="15" fill="rgb(224,130,29)" fg:x="52" fg:w="2"/><text x="14.0798%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.53%)</title><rect x="13.8298%" y="869" width="0.5319%" height="15" fill="rgb(235,212,8)" fg:x="52" fg:w="2"/><text x="14.0798%" y="879.50"></text></g><g><title>dashboard::app::update_markdown_file::{{closure}} (11 samples, 2.93%)</title><rect x="14.3617%" y="949" width="2.9255%" height="15" fill="rgb(223,33,50)" fg:x="54" fg:w="11"/><text x="14.6117%" y="959.50">da..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 2.93%)</title><rect x="14.3617%" y="933" width="2.9255%" height="15" fill="rgb(219,149,13)" fg:x="54" fg:w="11"/><text x="14.6117%" y="943.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 2.93%)</title><rect x="14.3617%" y="917" width="2.9255%" height="15" fill="rgb(250,156,29)" fg:x="54" fg:w="11"/><text x="14.6117%" y="927.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 2.93%)</title><rect x="14.3617%" y="901" width="2.9255%" height="15" fill="rgb(216,193,19)" fg:x="54" fg:w="11"/><text x="14.6117%" y="911.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11 samples, 2.93%)</title><rect x="14.3617%" y="885" width="2.9255%" height="15" fill="rgb(216,135,14)" fg:x="54" fg:w="11"/><text x="14.6117%" y="895.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 2.93%)</title><rect x="14.3617%" y="869" width="2.9255%" height="15" fill="rgb(241,47,5)" fg:x="54" fg:w="11"/><text x="14.6117%" y="879.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (11 samples, 2.93%)</title><rect x="14.3617%" y="853" width="2.9255%" height="15" fill="rgb(233,42,35)" fg:x="54" fg:w="11"/><text x="14.6117%" y="863.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 2.93%)</title><rect x="14.3617%" y="837" width="2.9255%" height="15" fill="rgb(231,13,6)" fg:x="54" fg:w="11"/><text x="14.6117%" y="847.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 2.93%)</title><rect x="14.3617%" y="821" width="2.9255%" height="15" fill="rgb(207,181,40)" fg:x="54" fg:w="11"/><text x="14.6117%" y="831.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 2.93%)</title><rect x="14.3617%" y="805" width="2.9255%" height="15" fill="rgb(254,173,49)" fg:x="54" fg:w="11"/><text x="14.6117%" y="815.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (11 samples, 2.93%)</title><rect x="14.3617%" y="789" width="2.9255%" height="15" fill="rgb(221,1,38)" fg:x="54" fg:w="11"/><text x="14.6117%" y="799.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (11 samples, 2.93%)</title><rect x="14.3617%" y="773" width="2.9255%" height="15" fill="rgb(206,124,46)" fg:x="54" fg:w="11"/><text x="14.6117%" y="783.50">co..</text></g><g><title>dashboard::app::fmt_markdown_list_item (11 samples, 2.93%)</title><rect x="14.3617%" y="757" width="2.9255%" height="15" fill="rgb(249,21,11)" fg:x="54" fg:w="11"/><text x="14.6117%" y="767.50">da..</text></g><g><title>dashboard::app::fmt_markdown_list_item (11 samples, 2.93%)</title><rect x="14.3617%" y="741" width="2.9255%" height="15" fill="rgb(222,201,40)" fg:x="54" fg:w="11"/><text x="14.6117%" y="751.50">da..</text></g><g><title>alloc::fmt::format::format_inner (11 samples, 2.93%)</title><rect x="14.3617%" y="725" width="2.9255%" height="15" fill="rgb(235,61,29)" fg:x="54" fg:w="11"/><text x="14.6117%" y="735.50">al..</text></g><g><title>core::fmt::Write::write_fmt (11 samples, 2.93%)</title><rect x="14.3617%" y="709" width="2.9255%" height="15" fill="rgb(219,207,3)" fg:x="54" fg:w="11"/><text x="14.6117%" y="719.50">co..</text></g><g><title>core::fmt::write (11 samples, 2.93%)</title><rect x="14.3617%" y="693" width="2.9255%" height="15" fill="rgb(222,56,46)" fg:x="54" fg:w="11"/><text x="14.6117%" y="703.50">co..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 2.93%)</title><rect x="14.3617%" y="677" width="2.9255%" height="15" fill="rgb(239,76,54)" fg:x="54" fg:w="11"/><text x="14.6117%" y="687.50">&lt;&amp;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 2.93%)</title><rect x="14.3617%" y="661" width="2.9255%" height="15" fill="rgb(231,124,27)" fg:x="54" fg:w="11"/><text x="14.6117%" y="671.50">&lt;a..</text></g><g><title>alloc::string::String::push_str (11 samples, 2.93%)</title><rect x="14.3617%" y="645" width="2.9255%" height="15" fill="rgb(249,195,6)" fg:x="54" fg:w="11"/><text x="14.6117%" y="655.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 2.93%)</title><rect x="14.3617%" y="629" width="2.9255%" height="15" fill="rgb(237,174,47)" fg:x="54" fg:w="11"/><text x="14.6117%" y="639.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 2.93%)</title><rect x="14.3617%" y="613" width="2.9255%" height="15" fill="rgb(206,201,31)" fg:x="54" fg:w="11"/><text x="14.6117%" y="623.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 2.93%)</title><rect x="14.3617%" y="597" width="2.9255%" height="15" fill="rgb(231,57,52)" fg:x="54" fg:w="11"/><text x="14.6117%" y="607.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 2.93%)</title><rect x="14.3617%" y="581" width="2.9255%" height="15" fill="rgb(248,177,22)" fg:x="54" fg:w="11"/><text x="14.6117%" y="591.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 2.93%)</title><rect x="14.3617%" y="565" width="2.9255%" height="15" fill="rgb(215,211,37)" fg:x="54" fg:w="11"/><text x="14.6117%" y="575.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 2.93%)</title><rect x="14.3617%" y="549" width="2.9255%" height="15" fill="rgb(241,128,51)" fg:x="54" fg:w="11"/><text x="14.6117%" y="559.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 2.93%)</title><rect x="14.3617%" y="533" width="2.9255%" height="15" fill="rgb(227,165,31)" fg:x="54" fg:w="11"/><text x="14.6117%" y="543.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 2.93%)</title><rect x="14.3617%" y="517" width="2.9255%" height="15" fill="rgb(228,167,24)" fg:x="54" fg:w="11"/><text x="14.6117%" y="527.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 2.93%)</title><rect x="14.3617%" y="501" width="2.9255%" height="15" fill="rgb(228,143,12)" fg:x="54" fg:w="11"/><text x="14.6117%" y="511.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 2.93%)</title><rect x="14.3617%" y="485" width="2.9255%" height="15" fill="rgb(249,149,8)" fg:x="54" fg:w="11"/><text x="14.6117%" y="495.50">al..</text></g><g><title>alloc::alloc::realloc (11 samples, 2.93%)</title><rect x="14.3617%" y="469" width="2.9255%" height="15" fill="rgb(243,35,44)" fg:x="54" fg:w="11"/><text x="14.6117%" y="479.50">al..</text></g><g><title>__realloc (11 samples, 2.93%)</title><rect x="14.3617%" y="453" width="2.9255%" height="15" fill="rgb(246,89,9)" fg:x="54" fg:w="11"/><text x="14.6117%" y="463.50">__..</text></g><g><title>_int_realloc (10 samples, 2.66%)</title><rect x="14.6277%" y="437" width="2.6596%" height="15" fill="rgb(233,213,13)" fg:x="55" fg:w="10"/><text x="14.8777%" y="447.50">_i..</text></g><g><title>rayon_core::registry::WorkerThread::execute (12 samples, 3.19%)</title><rect x="14.3617%" y="1253" width="3.1915%" height="15" fill="rgb(233,141,41)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1263.50">ray..</text></g><g><title>rayon_core::job::JobRef::execute (12 samples, 3.19%)</title><rect x="14.3617%" y="1237" width="3.1915%" height="15" fill="rgb(239,167,4)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1247.50">ray..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (12 samples, 3.19%)</title><rect x="14.3617%" y="1221" width="3.1915%" height="15" fill="rgb(209,217,16)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1231.50">&lt;ra..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (12 samples, 3.19%)</title><rect x="14.3617%" y="1205" width="3.1915%" height="15" fill="rgb(219,88,35)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1215.50">ray..</text></g><g><title>rayon_core::unwind::halt_unwinding (12 samples, 3.19%)</title><rect x="14.3617%" y="1189" width="3.1915%" height="15" fill="rgb(220,193,23)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1199.50">ray..</text></g><g><title>std::panic::catch_unwind (12 samples, 3.19%)</title><rect x="14.3617%" y="1173" width="3.1915%" height="15" fill="rgb(230,90,52)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1183.50">std..</text></g><g><title>std::panicking::try (12 samples, 3.19%)</title><rect x="14.3617%" y="1157" width="3.1915%" height="15" fill="rgb(252,106,19)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1167.50">std..</text></g><g><title>std::panicking::try::do_call (12 samples, 3.19%)</title><rect x="14.3617%" y="1141" width="3.1915%" height="15" fill="rgb(206,74,20)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1151.50">std..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 3.19%)</title><rect x="14.3617%" y="1125" width="3.1915%" height="15" fill="rgb(230,138,44)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1135.50">&lt;co..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (12 samples, 3.19%)</title><rect x="14.3617%" y="1109" width="3.1915%" height="15" fill="rgb(235,182,43)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1119.50">ray..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (12 samples, 3.19%)</title><rect x="14.3617%" y="1093" width="3.1915%" height="15" fill="rgb(242,16,51)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1103.50">ray..</text></g><g><title>rayon_core::join::join_context::{{closure}} (12 samples, 3.19%)</title><rect x="14.3617%" y="1077" width="3.1915%" height="15" fill="rgb(248,9,4)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1087.50">ray..</text></g><g><title>rayon_core::unwind::halt_unwinding (12 samples, 3.19%)</title><rect x="14.3617%" y="1061" width="3.1915%" height="15" fill="rgb(210,31,22)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1071.50">ray..</text></g><g><title>std::panic::catch_unwind (12 samples, 3.19%)</title><rect x="14.3617%" y="1045" width="3.1915%" height="15" fill="rgb(239,54,39)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1055.50">std..</text></g><g><title>std::panicking::try (12 samples, 3.19%)</title><rect x="14.3617%" y="1029" width="3.1915%" height="15" fill="rgb(230,99,41)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1039.50">std..</text></g><g><title>std::panicking::try::do_call (12 samples, 3.19%)</title><rect x="14.3617%" y="1013" width="3.1915%" height="15" fill="rgb(253,106,12)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1023.50">std..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 3.19%)</title><rect x="14.3617%" y="997" width="3.1915%" height="15" fill="rgb(213,46,41)" fg:x="54" fg:w="12"/><text x="14.6117%" y="1007.50">&lt;co..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (12 samples, 3.19%)</title><rect x="14.3617%" y="981" width="3.1915%" height="15" fill="rgb(215,133,35)" fg:x="54" fg:w="12"/><text x="14.6117%" y="991.50">ray..</text></g><g><title>rayon_core::join::join::call::{{closure}} (12 samples, 3.19%)</title><rect x="14.3617%" y="965" width="3.1915%" height="15" fill="rgb(213,28,5)" fg:x="54" fg:w="12"/><text x="14.6117%" y="975.50">ray..</text></g><g><title>parser::findrepl::get_block_positions::{{closure}} (1 samples, 0.27%)</title><rect x="17.2872%" y="949" width="0.2660%" height="15" fill="rgb(215,77,49)" fg:x="65" fg:w="1"/><text x="17.5372%" y="959.50"></text></g><g><title>regex::re_unicode::Regex::new (1 samples, 0.27%)</title><rect x="17.2872%" y="933" width="0.2660%" height="15" fill="rgb(248,100,22)" fg:x="65" fg:w="1"/><text x="17.5372%" y="943.50"></text></g><g><title>regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.27%)</title><rect x="17.2872%" y="917" width="0.2660%" height="15" fill="rgb(208,67,9)" fg:x="65" fg:w="1"/><text x="17.5372%" y="927.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.27%)</title><rect x="17.2872%" y="901" width="0.2660%" height="15" fill="rgb(219,133,21)" fg:x="65" fg:w="1"/><text x="17.5372%" y="911.50"></text></g><g><title>__rust_probestack (1 samples, 0.27%)</title><rect x="17.2872%" y="885" width="0.2660%" height="15" fill="rgb(246,46,29)" fg:x="65" fg:w="1"/><text x="17.5372%" y="895.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (2 samples, 0.53%)</title><rect x="17.5532%" y="1253" width="0.5319%" height="15" fill="rgb(246,185,52)" fg:x="66" fg:w="2"/><text x="17.8032%" y="1263.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2 samples, 0.53%)</title><rect x="17.5532%" y="1237" width="0.5319%" height="15" fill="rgb(252,136,11)" fg:x="66" fg:w="2"/><text x="17.8032%" y="1247.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (2 samples, 0.53%)</title><rect x="17.5532%" y="1221" width="0.5319%" height="15" fill="rgb(219,138,53)" fg:x="66" fg:w="2"/><text x="17.8032%" y="1231.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.53%)</title><rect x="17.5532%" y="1205" width="0.5319%" height="15" fill="rgb(211,51,23)" fg:x="66" fg:w="2"/><text x="17.8032%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.53%)</title><rect x="17.5532%" y="1189" width="0.5319%" height="15" fill="rgb(247,221,28)" fg:x="66" fg:w="2"/><text x="17.8032%" y="1199.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.27%)</title><rect x="18.0851%" y="1157" width="0.2660%" height="15" fill="rgb(251,222,45)" fg:x="68" fg:w="1"/><text x="18.3351%" y="1167.50"></text></g><g><title>std::sys::unix::futex::futex_wait (37 samples, 9.84%)</title><rect x="18.0851%" y="1173" width="9.8404%" height="15" fill="rgb(217,162,53)" fg:x="68" fg:w="37"/><text x="18.3351%" y="1183.50">std::sys::unix..</text></g><g><title>syscall (36 samples, 9.57%)</title><rect x="18.3511%" y="1157" width="9.5745%" height="15" fill="rgb(229,93,14)" fg:x="69" fg:w="36"/><text x="18.6011%" y="1167.50">syscall</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.53%)</title><rect x="27.9255%" y="1157" width="0.5319%" height="15" fill="rgb(209,67,49)" fg:x="105" fg:w="2"/><text x="28.1755%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.53%)</title><rect x="27.9255%" y="1141" width="0.5319%" height="15" fill="rgb(213,87,29)" fg:x="105" fg:w="2"/><text x="28.1755%" y="1151.50"></text></g><g><title>std::panic::catch_unwind (83 samples, 22.07%)</title><rect x="7.7128%" y="1429" width="22.0745%" height="15" fill="rgb(205,151,52)" fg:x="29" fg:w="83"/><text x="7.9628%" y="1439.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (83 samples, 22.07%)</title><rect x="7.7128%" y="1413" width="22.0745%" height="15" fill="rgb(253,215,39)" fg:x="29" fg:w="83"/><text x="7.9628%" y="1423.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (83 samples, 22.07%)</title><rect x="7.7128%" y="1397" width="22.0745%" height="15" fill="rgb(221,220,41)" fg:x="29" fg:w="83"/><text x="7.9628%" y="1407.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (83 samples, 22.07%)</title><rect x="7.7128%" y="1381" width="22.0745%" height="15" fill="rgb(218,133,21)" fg:x="29" fg:w="83"/><text x="7.9628%" y="1391.50">&lt;core::panic::unwind_safe::AssertUn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (83 samples, 22.07%)</title><rect x="7.7128%" y="1365" width="22.0745%" height="15" fill="rgb(221,193,43)" fg:x="29" fg:w="83"/><text x="7.9628%" y="1375.50">std::thread::Builder::spawn_uncheck..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (83 samples, 22.07%)</title><rect x="7.7128%" y="1349" width="22.0745%" height="15" fill="rgb(240,128,52)" fg:x="29" fg:w="83"/><text x="7.9628%" y="1359.50">std::sys_common::backtrace::__rust_..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (82 samples, 21.81%)</title><rect x="7.9787%" y="1333" width="21.8085%" height="15" fill="rgb(253,114,12)" fg:x="30" fg:w="82"/><text x="8.2287%" y="1343.50">&lt;rayon_core::registry::DefaultSpaw..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (82 samples, 21.81%)</title><rect x="7.9787%" y="1317" width="21.8085%" height="15" fill="rgb(215,223,47)" fg:x="30" fg:w="82"/><text x="8.2287%" y="1327.50">rayon_core::registry::ThreadBuilde..</text></g><g><title>rayon_core::registry::main_loop (82 samples, 21.81%)</title><rect x="7.9787%" y="1301" width="21.8085%" height="15" fill="rgb(248,225,23)" fg:x="30" fg:w="82"/><text x="8.2287%" y="1311.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (72 samples, 19.15%)</title><rect x="10.6383%" y="1285" width="19.1489%" height="15" fill="rgb(250,108,0)" fg:x="40" fg:w="72"/><text x="10.8883%" y="1295.50">rayon_core::registry::WorkerTh..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (72 samples, 19.15%)</title><rect x="10.6383%" y="1269" width="19.1489%" height="15" fill="rgb(228,208,7)" fg:x="40" fg:w="72"/><text x="10.8883%" y="1279.50">rayon_core::registry::WorkerTh..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (44 samples, 11.70%)</title><rect x="18.0851%" y="1253" width="11.7021%" height="15" fill="rgb(244,45,10)" fg:x="68" fg:w="44"/><text x="18.3351%" y="1263.50">rayon_core::sleep..</text></g><g><title>rayon_core::sleep::Sleep::sleep (44 samples, 11.70%)</title><rect x="18.0851%" y="1237" width="11.7021%" height="15" fill="rgb(207,125,25)" fg:x="68" fg:w="44"/><text x="18.3351%" y="1247.50">rayon_core::sleep..</text></g><g><title>std::sync::condvar::Condvar::wait (44 samples, 11.70%)</title><rect x="18.0851%" y="1221" width="11.7021%" height="15" fill="rgb(210,195,18)" fg:x="68" fg:w="44"/><text x="18.3351%" y="1231.50">std::sync::condva..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (44 samples, 11.70%)</title><rect x="18.0851%" y="1205" width="11.7021%" height="15" fill="rgb(249,80,12)" fg:x="68" fg:w="44"/><text x="18.3351%" y="1215.50">std::sys::unix::l..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (44 samples, 11.70%)</title><rect x="18.0851%" y="1189" width="11.7021%" height="15" fill="rgb(221,65,9)" fg:x="68" fg:w="44"/><text x="18.3351%" y="1199.50">std::sys::unix::l..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (7 samples, 1.86%)</title><rect x="27.9255%" y="1173" width="1.8617%" height="15" fill="rgb(235,49,36)" fg:x="105" fg:w="7"/><text x="28.1755%" y="1183.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (5 samples, 1.33%)</title><rect x="28.4574%" y="1157" width="1.3298%" height="15" fill="rgb(225,32,20)" fg:x="107" fg:w="5"/><text x="28.7074%" y="1167.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 1.33%)</title><rect x="28.4574%" y="1141" width="1.3298%" height="15" fill="rgb(215,141,46)" fg:x="107" fg:w="5"/><text x="28.7074%" y="1151.50"></text></g><g><title>syscall (5 samples, 1.33%)</title><rect x="28.4574%" y="1125" width="1.3298%" height="15" fill="rgb(250,160,47)" fg:x="107" fg:w="5"/><text x="28.7074%" y="1135.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (89 samples, 23.67%)</title><rect x="7.7128%" y="1493" width="23.6702%" height="15" fill="rgb(216,222,40)" fg:x="29" fg:w="89"/><text x="7.9628%" y="1503.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (89 samples, 23.67%)</title><rect x="7.7128%" y="1477" width="23.6702%" height="15" fill="rgb(234,217,39)" fg:x="29" fg:w="89"/><text x="7.9628%" y="1487.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (89 samples, 23.67%)</title><rect x="7.7128%" y="1461" width="23.6702%" height="15" fill="rgb(207,178,40)" fg:x="29" fg:w="89"/><text x="7.9628%" y="1471.50">core::ops::function::FnOnce::call_once..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (89 samples, 23.67%)</title><rect x="7.7128%" y="1445" width="23.6702%" height="15" fill="rgb(221,136,13)" fg:x="29" fg:w="89"/><text x="7.9628%" y="1455.50">std::thread::Builder::spawn_unchecked_..</text></g><g><title>std::sys::unix::thread::guard::current (6 samples, 1.60%)</title><rect x="29.7872%" y="1429" width="1.5957%" height="15" fill="rgb(249,199,10)" fg:x="112" fg:w="6"/><text x="30.0372%" y="1439.50"></text></g><g><title>__pthread_getattr_np (6 samples, 1.60%)</title><rect x="29.7872%" y="1413" width="1.5957%" height="15" fill="rgb(249,222,13)" fg:x="112" fg:w="6"/><text x="30.0372%" y="1423.50"></text></g><g><title>__GI___libc_malloc (6 samples, 1.60%)</title><rect x="29.7872%" y="1397" width="1.5957%" height="15" fill="rgb(244,185,38)" fg:x="112" fg:w="6"/><text x="30.0372%" y="1407.50"></text></g><g><title>tcache_init.part.0 (6 samples, 1.60%)</title><rect x="29.7872%" y="1381" width="1.5957%" height="15" fill="rgb(236,202,9)" fg:x="112" fg:w="6"/><text x="30.0372%" y="1391.50"></text></g><g><title>arena_get2.part.0 (6 samples, 1.60%)</title><rect x="29.7872%" y="1365" width="1.5957%" height="15" fill="rgb(250,229,37)" fg:x="112" fg:w="6"/><text x="30.0372%" y="1375.50"></text></g><g><title>alloc_new_heap (6 samples, 1.60%)</title><rect x="29.7872%" y="1349" width="1.5957%" height="15" fill="rgb(206,174,23)" fg:x="112" fg:w="6"/><text x="30.0372%" y="1359.50"></text></g><g><title>__GI___mprotect (5 samples, 1.33%)</title><rect x="30.0532%" y="1333" width="1.3298%" height="15" fill="rgb(211,33,43)" fg:x="113" fg:w="5"/><text x="30.3032%" y="1343.50"></text></g><g><title>__clone3 (112 samples, 29.79%)</title><rect x="2.9255%" y="1541" width="29.7872%" height="15" fill="rgb(245,58,50)" fg:x="11" fg:w="112"/><text x="3.1755%" y="1551.50">__clone3</text></g><g><title>start_thread (95 samples, 25.27%)</title><rect x="7.4468%" y="1525" width="25.2660%" height="15" fill="rgb(244,68,36)" fg:x="28" fg:w="95"/><text x="7.6968%" y="1535.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (94 samples, 25.00%)</title><rect x="7.7128%" y="1509" width="25.0000%" height="15" fill="rgb(232,229,15)" fg:x="29" fg:w="94"/><text x="7.9628%" y="1519.50">std::sys::unix::thread::Thread::new::thr..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 1.33%)</title><rect x="31.3830%" y="1493" width="1.3298%" height="15" fill="rgb(254,30,23)" fg:x="118" fg:w="5"/><text x="31.6330%" y="1503.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 1.33%)</title><rect x="31.3830%" y="1477" width="1.3298%" height="15" fill="rgb(235,160,14)" fg:x="118" fg:w="5"/><text x="31.6330%" y="1487.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 1.33%)</title><rect x="31.3830%" y="1461" width="1.3298%" height="15" fill="rgb(212,155,44)" fg:x="118" fg:w="5"/><text x="31.6330%" y="1471.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 1.33%)</title><rect x="31.3830%" y="1445" width="1.3298%" height="15" fill="rgb(226,2,50)" fg:x="118" fg:w="5"/><text x="31.6330%" y="1455.50"></text></g><g><title>__GI___mprotect (5 samples, 1.33%)</title><rect x="31.3830%" y="1429" width="1.3298%" height="15" fill="rgb(234,177,6)" fg:x="118" fg:w="5"/><text x="31.6330%" y="1439.50"></text></g><g><title>__libc_start_main_alias_2 (1 samples, 0.27%)</title><rect x="34.0426%" y="1525" width="0.2660%" height="15" fill="rgb(217,24,9)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1535.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.27%)</title><rect x="34.0426%" y="1509" width="0.2660%" height="15" fill="rgb(220,13,46)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1519.50"></text></g><g><title>main (1 samples, 0.27%)</title><rect x="34.0426%" y="1493" width="0.2660%" height="15" fill="rgb(239,221,27)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1503.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.27%)</title><rect x="34.0426%" y="1477" width="0.2660%" height="15" fill="rgb(222,198,25)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1487.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.27%)</title><rect x="34.0426%" y="1461" width="0.2660%" height="15" fill="rgb(211,99,13)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1471.50"></text></g><g><title>std::panicking::try (1 samples, 0.27%)</title><rect x="34.0426%" y="1445" width="0.2660%" height="15" fill="rgb(232,111,31)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1455.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.27%)</title><rect x="34.0426%" y="1429" width="0.2660%" height="15" fill="rgb(245,82,37)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1439.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.27%)</title><rect x="34.0426%" y="1413" width="0.2660%" height="15" fill="rgb(227,149,46)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1423.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.27%)</title><rect x="34.0426%" y="1397" width="0.2660%" height="15" fill="rgb(218,36,50)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1407.50"></text></g><g><title>std::panicking::try (1 samples, 0.27%)</title><rect x="34.0426%" y="1381" width="0.2660%" height="15" fill="rgb(226,80,48)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1391.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.27%)</title><rect x="34.0426%" y="1365" width="0.2660%" height="15" fill="rgb(238,224,15)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1375.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.27%)</title><rect x="34.0426%" y="1349" width="0.2660%" height="15" fill="rgb(241,136,10)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1359.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.27%)</title><rect x="34.0426%" y="1333" width="0.2660%" height="15" fill="rgb(208,32,45)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1343.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.27%)</title><rect x="34.0426%" y="1317" width="0.2660%" height="15" fill="rgb(207,135,9)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1327.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.27%)</title><rect x="34.0426%" y="1301" width="0.2660%" height="15" fill="rgb(206,86,44)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1311.50"></text></g><g><title>dashboard::main (1 samples, 0.27%)</title><rect x="34.0426%" y="1285" width="0.2660%" height="15" fill="rgb(245,177,15)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::runtime::Runtime&gt; (1 samples, 0.27%)</title><rect x="34.0426%" y="1269" width="0.2660%" height="15" fill="rgb(206,64,50)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1279.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::shutdown (1 samples, 0.27%)</title><rect x="34.0426%" y="1253" width="0.2660%" height="15" fill="rgb(234,36,40)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1263.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::shutdown (1 samples, 0.27%)</title><rect x="34.0426%" y="1237" width="0.2660%" height="15" fill="rgb(213,64,8)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1247.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::close (1 samples, 0.27%)</title><rect x="34.0426%" y="1221" width="0.2660%" height="15" fill="rgb(210,75,36)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1231.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_all (1 samples, 0.27%)</title><rect x="34.0426%" y="1205" width="0.2660%" height="15" fill="rgb(229,88,21)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1215.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.27%)</title><rect x="34.0426%" y="1189" width="0.2660%" height="15" fill="rgb(252,204,47)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1199.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.27%)</title><rect x="34.0426%" y="1173" width="0.2660%" height="15" fill="rgb(208,77,27)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.27%)</title><rect x="34.0426%" y="1157" width="0.2660%" height="15" fill="rgb(221,76,26)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.27%)</title><rect x="34.0426%" y="1141" width="0.2660%" height="15" fill="rgb(225,139,18)" fg:x="128" fg:w="1"/><text x="34.2926%" y="1151.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.27%)</title><rect x="34.3085%" y="1477" width="0.2660%" height="15" fill="rgb(230,137,11)" fg:x="129" fg:w="1"/><text x="34.5585%" y="1487.50"></text></g><g><title>get_next_env (1 samples, 0.27%)</title><rect x="34.3085%" y="1461" width="0.2660%" height="15" fill="rgb(212,28,1)" fg:x="129" fg:w="1"/><text x="34.5585%" y="1471.50"></text></g><g><title>_start (8 samples, 2.13%)</title><rect x="32.7128%" y="1541" width="2.1277%" height="15" fill="rgb(248,164,17)" fg:x="123" fg:w="8"/><text x="32.9628%" y="1551.50">_..</text></g><g><title>_dl_start (2 samples, 0.53%)</title><rect x="34.3085%" y="1525" width="0.5319%" height="15" fill="rgb(222,171,42)" fg:x="129" fg:w="2"/><text x="34.5585%" y="1535.50"></text></g><g><title>_dl_start_final (2 samples, 0.53%)</title><rect x="34.3085%" y="1509" width="0.5319%" height="15" fill="rgb(243,84,45)" fg:x="129" fg:w="2"/><text x="34.5585%" y="1519.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.53%)</title><rect x="34.3085%" y="1493" width="0.5319%" height="15" fill="rgb(252,49,23)" fg:x="129" fg:w="2"/><text x="34.5585%" y="1503.50"></text></g><g><title>dl_main (1 samples, 0.27%)</title><rect x="34.5745%" y="1477" width="0.2660%" height="15" fill="rgb(215,19,7)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1487.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.27%)</title><rect x="34.5745%" y="1461" width="0.2660%" height="15" fill="rgb(238,81,41)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1471.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.27%)</title><rect x="34.5745%" y="1445" width="0.2660%" height="15" fill="rgb(210,199,37)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1455.50"></text></g><g><title>elf_machine_rela (1 samples, 0.27%)</title><rect x="34.5745%" y="1429" width="0.2660%" height="15" fill="rgb(244,192,49)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1439.50"></text></g><g><title>resolve_map (1 samples, 0.27%)</title><rect x="34.5745%" y="1413" width="0.2660%" height="15" fill="rgb(226,211,11)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1423.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.27%)</title><rect x="34.5745%" y="1397" width="0.2660%" height="15" fill="rgb(236,162,54)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1407.50"></text></g><g><title>do_lookup_x (1 samples, 0.27%)</title><rect x="34.5745%" y="1381" width="0.2660%" height="15" fill="rgb(220,229,9)" fg:x="130" fg:w="1"/><text x="34.8245%" y="1391.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.27%)</title><rect x="34.8404%" y="1541" width="0.2660%" height="15" fill="rgb(250,87,22)" fg:x="131" fg:w="1"/><text x="35.0904%" y="1551.50"></text></g><g><title>crossbeam_epoch::default::default_collector (1 samples, 0.27%)</title><rect x="35.1064%" y="1541" width="0.2660%" height="15" fill="rgb(239,43,17)" fg:x="132" fg:w="1"/><text x="35.3564%" y="1551.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.27%)</title><rect x="35.3723%" y="1541" width="0.2660%" height="15" fill="rgb(231,177,25)" fg:x="133" fg:w="1"/><text x="35.6223%" y="1551.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.27%)</title><rect x="35.6383%" y="1125" width="0.2660%" height="15" fill="rgb(219,179,1)" fg:x="134" fg:w="1"/><text x="35.8883%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="35.6383%" y="1109" width="0.2660%" height="15" fill="rgb(238,219,53)" fg:x="134" fg:w="1"/><text x="35.8883%" y="1119.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="35.6383%" y="1093" width="0.2660%" height="15" fill="rgb(232,167,36)" fg:x="134" fg:w="1"/><text x="35.8883%" y="1103.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.27%)</title><rect x="35.6383%" y="1077" width="0.2660%" height="15" fill="rgb(244,19,51)" fg:x="134" fg:w="1"/><text x="35.8883%" y="1087.50"></text></g><g><title>___pthread_rwlock_unlock (1 samples, 0.27%)</title><rect x="35.6383%" y="1061" width="0.2660%" height="15" fill="rgb(224,6,22)" fg:x="134" fg:w="1"/><text x="35.8883%" y="1071.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (2 samples, 0.53%)</title><rect x="35.6383%" y="1205" width="0.5319%" height="15" fill="rgb(224,145,5)" fg:x="134" fg:w="2"/><text x="35.8883%" y="1215.50"></text></g><g><title>OSSL_DECODER_do_all_provided (2 samples, 0.53%)</title><rect x="35.6383%" y="1189" width="0.5319%" height="15" fill="rgb(234,130,49)" fg:x="134" fg:w="2"/><text x="35.8883%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="35.6383%" y="1173" width="0.5319%" height="15" fill="rgb(254,6,2)" fg:x="134" fg:w="2"/><text x="35.8883%" y="1183.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="35.6383%" y="1157" width="0.5319%" height="15" fill="rgb(208,96,46)" fg:x="134" fg:w="2"/><text x="35.8883%" y="1167.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="35.6383%" y="1141" width="0.5319%" height="15" fill="rgb(239,3,39)" fg:x="134" fg:w="2"/><text x="35.8883%" y="1151.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="35.9043%" y="1125" width="0.2660%" height="15" fill="rgb(233,210,1)" fg:x="135" fg:w="1"/><text x="36.1543%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="35.9043%" y="1109" width="0.2660%" height="15" fill="rgb(244,137,37)" fg:x="135" fg:w="1"/><text x="36.1543%" y="1119.50"></text></g><g><title>OPENSSL_LH_doall_arg (1 samples, 0.27%)</title><rect x="35.9043%" y="1093" width="0.2660%" height="15" fill="rgb(240,136,2)" fg:x="135" fg:w="1"/><text x="36.1543%" y="1103.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="35.9043%" y="1077" width="0.2660%" height="15" fill="rgb(239,18,37)" fg:x="135" fg:w="1"/><text x="36.1543%" y="1087.50"></text></g><g><title>octocrab::OctocrabBuilder::build (3 samples, 0.80%)</title><rect x="35.6383%" y="1493" width="0.7979%" height="15" fill="rgb(218,185,22)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1503.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (3 samples, 0.80%)</title><rect x="35.6383%" y="1477" width="0.7979%" height="15" fill="rgb(225,218,4)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1487.50"></text></g><g><title>reqwest::connect::Connector::new_default_tls (3 samples, 0.80%)</title><rect x="35.6383%" y="1461" width="0.7979%" height="15" fill="rgb(230,182,32)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1471.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (3 samples, 0.80%)</title><rect x="35.6383%" y="1445" width="0.7979%" height="15" fill="rgb(242,56,43)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1455.50"></text></g><g><title>native_tls::imp::TlsConnector::new (3 samples, 0.80%)</title><rect x="35.6383%" y="1429" width="0.7979%" height="15" fill="rgb(233,99,24)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1439.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (3 samples, 0.80%)</title><rect x="35.6383%" y="1413" width="0.7979%" height="15" fill="rgb(234,209,42)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1423.50"></text></g><g><title>openssl::ssl::SslContextBuilder::set_default_verify_paths (3 samples, 0.80%)</title><rect x="35.6383%" y="1397" width="0.7979%" height="15" fill="rgb(227,7,12)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1407.50"></text></g><g><title>X509_STORE_set_default_paths_ex (3 samples, 0.80%)</title><rect x="35.6383%" y="1381" width="0.7979%" height="15" fill="rgb(245,203,43)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1391.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1365" width="0.7979%" height="15" fill="rgb(238,205,33)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1375.50"></text></g><g><title>X509_load_cert_crl_file_ex (3 samples, 0.80%)</title><rect x="35.6383%" y="1349" width="0.7979%" height="15" fill="rgb(231,56,7)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1359.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (3 samples, 0.80%)</title><rect x="35.6383%" y="1333" width="0.7979%" height="15" fill="rgb(244,186,29)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1343.50"></text></g><g><title>ASN1_item_d2i_ex (3 samples, 0.80%)</title><rect x="35.6383%" y="1317" width="0.7979%" height="15" fill="rgb(234,111,31)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1327.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1301" width="0.7979%" height="15" fill="rgb(241,149,10)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1311.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1285" width="0.7979%" height="15" fill="rgb(249,206,44)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1295.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1269" width="0.7979%" height="15" fill="rgb(251,153,30)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1279.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1253" width="0.7979%" height="15" fill="rgb(239,152,38)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1263.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1237" width="0.7979%" height="15" fill="rgb(249,139,47)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1247.50"></text></g><g><title>[libcrypto.so.3.0.5] (3 samples, 0.80%)</title><rect x="35.6383%" y="1221" width="0.7979%" height="15" fill="rgb(244,64,35)" fg:x="134" fg:w="3"/><text x="35.8883%" y="1231.50"></text></g><g><title>OSSL_DECODER_from_data (1 samples, 0.27%)</title><rect x="36.1702%" y="1205" width="0.2660%" height="15" fill="rgb(216,46,15)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1215.50"></text></g><g><title>OSSL_DECODER_from_bio (1 samples, 0.27%)</title><rect x="36.1702%" y="1189" width="0.2660%" height="15" fill="rgb(250,74,19)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1173" width="0.2660%" height="15" fill="rgb(249,42,33)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1183.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1157" width="0.2660%" height="15" fill="rgb(242,149,17)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1167.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1141" width="0.2660%" height="15" fill="rgb(244,29,21)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1151.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1125" width="0.2660%" height="15" fill="rgb(220,130,37)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1109" width="0.2660%" height="15" fill="rgb(211,67,2)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1119.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1093" width="0.2660%" height="15" fill="rgb(235,68,52)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1103.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1077" width="0.2660%" height="15" fill="rgb(246,142,3)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1087.50"></text></g><g><title>EVP_PKEY_set_type_by_keymgmt (1 samples, 0.27%)</title><rect x="36.1702%" y="1061" width="0.2660%" height="15" fill="rgb(241,25,7)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1071.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.1702%" y="1045" width="0.2660%" height="15" fill="rgb(242,119,39)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1055.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.27%)</title><rect x="36.1702%" y="1029" width="0.2660%" height="15" fill="rgb(241,98,45)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1039.50"></text></g><g><title>_int_malloc (1 samples, 0.27%)</title><rect x="36.1702%" y="1013" width="0.2660%" height="15" fill="rgb(254,28,30)" fg:x="136" fg:w="1"/><text x="36.4202%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.4362%" y="1445" width="0.2660%" height="15" fill="rgb(241,142,54)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1455.50"></text></g><g><title>&lt;octocrab::page::Page&lt;T&gt; as octocrab::from_response::FromResponse&gt;::from_response::{{closure}} (1 samples, 0.27%)</title><rect x="36.4362%" y="1429" width="0.2660%" height="15" fill="rgb(222,85,15)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1439.50"></text></g><g><title>serde_json::value::from_value (1 samples, 0.27%)</title><rect x="36.4362%" y="1413" width="0.2660%" height="15" fill="rgb(210,85,47)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1423.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.27%)</title><rect x="36.4362%" y="1397" width="0.2660%" height="15" fill="rgb(224,206,25)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1407.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.27%)</title><rect x="36.4362%" y="1381" width="0.2660%" height="15" fill="rgb(243,201,19)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1391.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.27%)</title><rect x="36.4362%" y="1365" width="0.2660%" height="15" fill="rgb(236,59,4)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1375.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.27%)</title><rect x="36.4362%" y="1349" width="0.2660%" height="15" fill="rgb(254,179,45)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.27%)</title><rect x="36.4362%" y="1333" width="0.2660%" height="15" fill="rgb(226,14,10)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1343.50"></text></g><g><title>core::ptr::write (1 samples, 0.27%)</title><rect x="36.4362%" y="1317" width="0.2660%" height="15" fill="rgb(244,27,41)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1327.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.27%)</title><rect x="36.4362%" y="1301" width="0.2660%" height="15" fill="rgb(235,35,32)" fg:x="137" fg:w="1"/><text x="36.6862%" y="1311.50"></text></g><g><title>dashboard::main::{{closure}} (5 samples, 1.33%)</title><rect x="35.6383%" y="1541" width="1.3298%" height="15" fill="rgb(218,68,31)" fg:x="134" fg:w="5"/><text x="35.8883%" y="1551.50"></text></g><g><title>dashboard::app::try_main_refactor_v3::{{closure}} (5 samples, 1.33%)</title><rect x="35.6383%" y="1525" width="1.3298%" height="15" fill="rgb(207,120,37)" fg:x="134" fg:w="5"/><text x="35.8883%" y="1535.50"></text></g><g><title>api::repos::list_user_repos::{{closure}} (5 samples, 1.33%)</title><rect x="35.6383%" y="1509" width="1.3298%" height="15" fill="rgb(227,98,0)" fg:x="134" fg:w="5"/><text x="35.8883%" y="1519.50"></text></g><g><title>octocrab::api::current::ListReposForAuthenticatedUserBuilder::send::{{closure}} (2 samples, 0.53%)</title><rect x="36.4362%" y="1493" width="0.5319%" height="15" fill="rgb(207,7,3)" fg:x="137" fg:w="2"/><text x="36.6862%" y="1503.50"></text></g><g><title>octocrab::Octocrab::get::{{closure}} (2 samples, 0.53%)</title><rect x="36.4362%" y="1477" width="0.5319%" height="15" fill="rgb(206,98,19)" fg:x="137" fg:w="2"/><text x="36.6862%" y="1487.50"></text></g><g><title>octocrab::Octocrab::get_with_headers::{{closure}} (2 samples, 0.53%)</title><rect x="36.4362%" y="1461" width="0.5319%" height="15" fill="rgb(217,5,26)" fg:x="137" fg:w="2"/><text x="36.6862%" y="1471.50"></text></g><g><title>octocrab::Octocrab::_get_with_headers::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1445" width="0.2660%" height="15" fill="rgb(235,190,38)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1455.50"></text></g><g><title>octocrab::Octocrab::execute::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1429" width="0.2660%" height="15" fill="rgb(247,86,24)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1439.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1413" width="0.2660%" height="15" fill="rgb(205,101,16)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1423.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1397" width="0.2660%" height="15" fill="rgb(246,168,33)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1407.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1381" width="0.2660%" height="15" fill="rgb(231,114,1)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1391.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1365" width="0.2660%" height="15" fill="rgb(207,184,53)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1375.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1349" width="0.2660%" height="15" fill="rgb(224,95,51)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1359.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::connection_for::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1333" width="0.2660%" height="15" fill="rgb(212,188,45)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1343.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1317" width="0.2660%" height="15" fill="rgb(223,154,38)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1327.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1 samples, 0.27%)</title><rect x="36.7021%" y="1301" width="0.2660%" height="15" fill="rgb(251,22,52)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1311.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1285" width="0.2660%" height="15" fill="rgb(229,209,22)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1295.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1269" width="0.2660%" height="15" fill="rgb(234,138,34)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1279.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1253" width="0.2660%" height="15" fill="rgb(212,95,11)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1263.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1237" width="0.2660%" height="15" fill="rgb(240,179,47)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1247.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1221" width="0.2660%" height="15" fill="rgb(240,163,11)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1231.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1205" width="0.2660%" height="15" fill="rgb(236,37,12)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1215.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1189" width="0.2660%" height="15" fill="rgb(232,164,16)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1199.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1173" width="0.2660%" height="15" fill="rgb(244,205,15)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1183.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1157" width="0.2660%" height="15" fill="rgb(223,117,47)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1167.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1141" width="0.2660%" height="15" fill="rgb(244,107,35)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1151.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1125" width="0.2660%" height="15" fill="rgb(205,140,8)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1135.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1109" width="0.2660%" height="15" fill="rgb(228,84,46)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1119.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1093" width="0.2660%" height="15" fill="rgb(254,188,9)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1103.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1077" width="0.2660%" height="15" fill="rgb(206,112,54)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1087.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1061" width="0.2660%" height="15" fill="rgb(216,84,49)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1071.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1045" width="0.2660%" height="15" fill="rgb(214,194,35)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1055.50"></text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="1029" width="0.2660%" height="15" fill="rgb(249,28,3)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1039.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnecting&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="1013" width="0.2660%" height="15" fill="rgb(222,56,52)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="997" width="0.2660%" height="15" fill="rgb(245,217,50)" fg:x="138" fg:w="1"/><text x="36.9521%" y="1007.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="981" width="0.2660%" height="15" fill="rgb(213,201,24)" fg:x="138" fg:w="1"/><text x="36.9521%" y="991.50"></text></g><g><title>tokio_native_tls::TlsConnector::connect::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="965" width="0.2660%" height="15" fill="rgb(248,116,28)" fg:x="138" fg:w="1"/><text x="36.9521%" y="975.50"></text></g><g><title>tokio_native_tls::handshake::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="949" width="0.2660%" height="15" fill="rgb(219,72,43)" fg:x="138" fg:w="1"/><text x="36.9521%" y="959.50"></text></g><g><title>&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="36.7021%" y="933" width="0.2660%" height="15" fill="rgb(209,138,14)" fg:x="138" fg:w="1"/><text x="36.9521%" y="943.50"></text></g><g><title>tokio_native_tls::TlsConnector::connect::{{closure}}::{{closure}} (1 samples, 0.27%)</title><rect x="36.7021%" y="917" width="0.2660%" height="15" fill="rgb(222,18,33)" fg:x="138" fg:w="1"/><text x="36.9521%" y="927.50"></text></g><g><title>native_tls::TlsConnector::connect (1 samples, 0.27%)</title><rect x="36.7021%" y="901" width="0.2660%" height="15" fill="rgb(213,199,7)" fg:x="138" fg:w="1"/><text x="36.9521%" y="911.50"></text></g><g><title>native_tls::imp::TlsConnector::connect (1 samples, 0.27%)</title><rect x="36.7021%" y="885" width="0.2660%" height="15" fill="rgb(250,110,10)" fg:x="138" fg:w="1"/><text x="36.9521%" y="895.50"></text></g><g><title>openssl::ssl::connector::ConnectConfiguration::connect (1 samples, 0.27%)</title><rect x="36.7021%" y="869" width="0.2660%" height="15" fill="rgb(248,123,6)" fg:x="138" fg:w="1"/><text x="36.9521%" y="879.50"></text></g><g><title>openssl::ssl::Ssl::connect (1 samples, 0.27%)</title><rect x="36.7021%" y="853" width="0.2660%" height="15" fill="rgb(206,91,31)" fg:x="138" fg:w="1"/><text x="36.9521%" y="863.50"></text></g><g><title>openssl::ssl::SslStreamBuilder&lt;S&gt;::connect (1 samples, 0.27%)</title><rect x="36.7021%" y="837" width="0.2660%" height="15" fill="rgb(211,154,13)" fg:x="138" fg:w="1"/><text x="36.9521%" y="847.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::connect (1 samples, 0.27%)</title><rect x="36.7021%" y="821" width="0.2660%" height="15" fill="rgb(225,148,7)" fg:x="138" fg:w="1"/><text x="36.9521%" y="831.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="805" width="0.2660%" height="15" fill="rgb(220,160,43)" fg:x="138" fg:w="1"/><text x="36.9521%" y="815.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="789" width="0.2660%" height="15" fill="rgb(213,52,39)" fg:x="138" fg:w="1"/><text x="36.9521%" y="799.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="773" width="0.2660%" height="15" fill="rgb(243,137,7)" fg:x="138" fg:w="1"/><text x="36.9521%" y="783.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="757" width="0.2660%" height="15" fill="rgb(230,79,13)" fg:x="138" fg:w="1"/><text x="36.9521%" y="767.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="741" width="0.2660%" height="15" fill="rgb(247,105,23)" fg:x="138" fg:w="1"/><text x="36.9521%" y="751.50"></text></g><g><title>EVP_PKEY_generate (1 samples, 0.27%)</title><rect x="36.7021%" y="725" width="0.2660%" height="15" fill="rgb(223,179,41)" fg:x="138" fg:w="1"/><text x="36.9521%" y="735.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="709" width="0.2660%" height="15" fill="rgb(218,9,34)" fg:x="138" fg:w="1"/><text x="36.9521%" y="719.50"></text></g><g><title>EVP_PKEY_set_type_by_keymgmt (1 samples, 0.27%)</title><rect x="36.7021%" y="693" width="0.2660%" height="15" fill="rgb(222,106,8)" fg:x="138" fg:w="1"/><text x="36.9521%" y="703.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="677" width="0.2660%" height="15" fill="rgb(211,220,0)" fg:x="138" fg:w="1"/><text x="36.9521%" y="687.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="36.7021%" y="661" width="0.2660%" height="15" fill="rgb(229,52,16)" fg:x="138" fg:w="1"/><text x="36.9521%" y="671.50"></text></g><g><title>EVP_PKEY_asn1_find_str (1 samples, 0.27%)</title><rect x="36.7021%" y="645" width="0.2660%" height="15" fill="rgb(212,155,18)" fg:x="138" fg:w="1"/><text x="36.9521%" y="655.50"></text></g><g><title>OPENSSL_strncasecmp (1 samples, 0.27%)</title><rect x="36.7021%" y="629" width="0.2660%" height="15" fill="rgb(242,21,14)" fg:x="138" fg:w="1"/><text x="36.9521%" y="639.50"></text></g><g><title>dashboard::main (5 samples, 1.33%)</title><rect x="36.9681%" y="1541" width="1.3298%" height="15" fill="rgb(222,19,48)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1551.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (5 samples, 1.33%)</title><rect x="36.9681%" y="1525" width="1.3298%" height="15" fill="rgb(232,45,27)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1535.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (5 samples, 1.33%)</title><rect x="36.9681%" y="1509" width="1.3298%" height="15" fill="rgb(249,103,42)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1519.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (5 samples, 1.33%)</title><rect x="36.9681%" y="1493" width="1.3298%" height="15" fill="rgb(246,81,33)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1503.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (5 samples, 1.33%)</title><rect x="36.9681%" y="1477" width="1.3298%" height="15" fill="rgb(252,33,42)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1487.50"></text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 1.33%)</title><rect x="36.9681%" y="1461" width="1.3298%" height="15" fill="rgb(209,212,41)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1471.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (5 samples, 1.33%)</title><rect x="36.9681%" y="1445" width="1.3298%" height="15" fill="rgb(207,154,6)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1455.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (5 samples, 1.33%)</title><rect x="36.9681%" y="1429" width="1.3298%" height="15" fill="rgb(223,64,47)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1439.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 1.33%)</title><rect x="36.9681%" y="1413" width="1.3298%" height="15" fill="rgb(211,161,38)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1423.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 1.33%)</title><rect x="36.9681%" y="1397" width="1.3298%" height="15" fill="rgb(219,138,40)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1407.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 1.33%)</title><rect x="36.9681%" y="1381" width="1.3298%" height="15" fill="rgb(241,228,46)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1391.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (5 samples, 1.33%)</title><rect x="36.9681%" y="1365" width="1.3298%" height="15" fill="rgb(223,209,38)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1375.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 1.33%)</title><rect x="36.9681%" y="1349" width="1.3298%" height="15" fill="rgb(236,164,45)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1359.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 1.33%)</title><rect x="36.9681%" y="1333" width="1.3298%" height="15" fill="rgb(231,15,5)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1343.50"></text></g><g><title>syscall (5 samples, 1.33%)</title><rect x="36.9681%" y="1317" width="1.3298%" height="15" fill="rgb(252,35,15)" fg:x="139" fg:w="5"/><text x="37.2181%" y="1327.50"></text></g><g><title>http::request::Builder::uri (1 samples, 0.27%)</title><rect x="38.2979%" y="1541" width="0.2660%" height="15" fill="rgb(248,181,18)" fg:x="144" fg:w="1"/><text x="38.5479%" y="1551.50"></text></g><g><title>EVP_KEYMGMT_do_all_provided (2 samples, 0.53%)</title><rect x="38.5638%" y="1125" width="0.5319%" height="15" fill="rgb(233,39,42)" fg:x="145" fg:w="2"/><text x="38.8138%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="38.5638%" y="1109" width="0.5319%" height="15" fill="rgb(238,110,33)" fg:x="145" fg:w="2"/><text x="38.8138%" y="1119.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="38.5638%" y="1093" width="0.5319%" height="15" fill="rgb(233,195,10)" fg:x="145" fg:w="2"/><text x="38.8138%" y="1103.50"></text></g><g><title>EVP_KEYMGMT_is_a (1 samples, 0.27%)</title><rect x="39.0957%" y="1125" width="0.2660%" height="15" fill="rgb(254,105,3)" fg:x="147" fg:w="1"/><text x="39.3457%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="39.0957%" y="1109" width="0.2660%" height="15" fill="rgb(221,225,9)" fg:x="147" fg:w="1"/><text x="39.3457%" y="1119.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="39.0957%" y="1093" width="0.2660%" height="15" fill="rgb(224,227,45)" fg:x="147" fg:w="1"/><text x="39.3457%" y="1103.50"></text></g><g><title>OPENSSL_LH_retrieve (1 samples, 0.27%)</title><rect x="39.0957%" y="1077" width="0.2660%" height="15" fill="rgb(229,198,43)" fg:x="147" fg:w="1"/><text x="39.3457%" y="1087.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="39.0957%" y="1061" width="0.2660%" height="15" fill="rgb(206,209,35)" fg:x="147" fg:w="1"/><text x="39.3457%" y="1071.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.27%)</title><rect x="39.3617%" y="1077" width="0.2660%" height="15" fill="rgb(245,195,53)" fg:x="148" fg:w="1"/><text x="39.6117%" y="1087.50"></text></g><g><title>___pthread_rwlock_rdlock (1 samples, 0.27%)</title><rect x="39.3617%" y="1061" width="0.2660%" height="15" fill="rgb(240,92,26)" fg:x="148" fg:w="1"/><text x="39.6117%" y="1071.50"></text></g><g><title>CRYPTO_THREAD_read_lock (3 samples, 0.80%)</title><rect x="39.8936%" y="1061" width="0.7979%" height="15" fill="rgb(207,40,23)" fg:x="150" fg:w="3"/><text x="40.1436%" y="1071.50"></text></g><g><title>___pthread_rwlock_rdlock (3 samples, 0.80%)</title><rect x="39.8936%" y="1045" width="0.7979%" height="15" fill="rgb(223,111,35)" fg:x="150" fg:w="3"/><text x="40.1436%" y="1055.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.27%)</title><rect x="40.6915%" y="1061" width="0.2660%" height="15" fill="rgb(229,147,28)" fg:x="153" fg:w="1"/><text x="40.9415%" y="1071.50"></text></g><g><title>___pthread_rwlock_unlock (1 samples, 0.27%)</title><rect x="40.6915%" y="1045" width="0.2660%" height="15" fill="rgb(211,29,28)" fg:x="153" fg:w="1"/><text x="40.9415%" y="1055.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (7 samples, 1.86%)</title><rect x="39.3617%" y="1125" width="1.8617%" height="15" fill="rgb(228,72,33)" fg:x="148" fg:w="7"/><text x="39.6117%" y="1135.50">O..</text></g><g><title>OSSL_DECODER_is_a (7 samples, 1.86%)</title><rect x="39.3617%" y="1109" width="1.8617%" height="15" fill="rgb(205,214,31)" fg:x="148" fg:w="7"/><text x="39.6117%" y="1119.50">O..</text></g><g><title>[libcrypto.so.3.0.5] (7 samples, 1.86%)</title><rect x="39.3617%" y="1093" width="1.8617%" height="15" fill="rgb(224,111,15)" fg:x="148" fg:w="7"/><text x="39.6117%" y="1103.50">[..</text></g><g><title>[libcrypto.so.3.0.5] (6 samples, 1.60%)</title><rect x="39.6277%" y="1077" width="1.5957%" height="15" fill="rgb(253,21,26)" fg:x="149" fg:w="6"/><text x="39.8777%" y="1087.50"></text></g><g><title>CRYPTO_strndup (1 samples, 0.27%)</title><rect x="40.9574%" y="1061" width="0.2660%" height="15" fill="rgb(245,139,43)" fg:x="154" fg:w="1"/><text x="41.2074%" y="1071.50"></text></g><g><title>OPENSSL_strnlen (1 samples, 0.27%)</title><rect x="40.9574%" y="1045" width="0.2660%" height="15" fill="rgb(252,170,7)" fg:x="154" fg:w="1"/><text x="41.2074%" y="1055.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.27%)</title><rect x="41.2234%" y="1029" width="0.2660%" height="15" fill="rgb(231,118,14)" fg:x="155" fg:w="1"/><text x="41.4734%" y="1039.50"></text></g><g><title>___pthread_rwlock_rdlock (1 samples, 0.27%)</title><rect x="41.2234%" y="1013" width="0.2660%" height="15" fill="rgb(238,83,0)" fg:x="155" fg:w="1"/><text x="41.4734%" y="1023.50"></text></g><g><title>ASN1_item_d2i_ex (12 samples, 3.19%)</title><rect x="38.5638%" y="1253" width="3.1915%" height="15" fill="rgb(221,39,39)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1263.50">ASN..</text></g><g><title>[libcrypto.so.3.0.5] (12 samples, 3.19%)</title><rect x="38.5638%" y="1237" width="3.1915%" height="15" fill="rgb(222,119,46)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1247.50">[li..</text></g><g><title>[libcrypto.so.3.0.5] (12 samples, 3.19%)</title><rect x="38.5638%" y="1221" width="3.1915%" height="15" fill="rgb(222,165,49)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1231.50">[li..</text></g><g><title>[libcrypto.so.3.0.5] (12 samples, 3.19%)</title><rect x="38.5638%" y="1205" width="3.1915%" height="15" fill="rgb(219,113,52)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1215.50">[li..</text></g><g><title>[libcrypto.so.3.0.5] (12 samples, 3.19%)</title><rect x="38.5638%" y="1189" width="3.1915%" height="15" fill="rgb(214,7,15)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1199.50">[li..</text></g><g><title>[libcrypto.so.3.0.5] (12 samples, 3.19%)</title><rect x="38.5638%" y="1173" width="3.1915%" height="15" fill="rgb(235,32,4)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1183.50">[li..</text></g><g><title>[libcrypto.so.3.0.5] (12 samples, 3.19%)</title><rect x="38.5638%" y="1157" width="3.1915%" height="15" fill="rgb(238,90,54)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1167.50">[li..</text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (12 samples, 3.19%)</title><rect x="38.5638%" y="1141" width="3.1915%" height="15" fill="rgb(213,208,19)" fg:x="145" fg:w="12"/><text x="38.8138%" y="1151.50">OSS..</text></g><g><title>OSSL_DECODER_do_all_provided (2 samples, 0.53%)</title><rect x="41.2234%" y="1125" width="0.5319%" height="15" fill="rgb(233,156,4)" fg:x="155" fg:w="2"/><text x="41.4734%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="41.2234%" y="1109" width="0.5319%" height="15" fill="rgb(207,194,5)" fg:x="155" fg:w="2"/><text x="41.4734%" y="1119.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="41.2234%" y="1093" width="0.5319%" height="15" fill="rgb(206,111,30)" fg:x="155" fg:w="2"/><text x="41.4734%" y="1103.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="41.2234%" y="1077" width="0.5319%" height="15" fill="rgb(243,70,54)" fg:x="155" fg:w="2"/><text x="41.4734%" y="1087.50"></text></g><g><title>OSSL_DECODER_is_a (2 samples, 0.53%)</title><rect x="41.2234%" y="1061" width="0.5319%" height="15" fill="rgb(242,28,8)" fg:x="155" fg:w="2"/><text x="41.4734%" y="1071.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="41.2234%" y="1045" width="0.5319%" height="15" fill="rgb(219,106,18)" fg:x="155" fg:w="2"/><text x="41.4734%" y="1055.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.27%)</title><rect x="41.4894%" y="1029" width="0.2660%" height="15" fill="rgb(244,222,10)" fg:x="156" fg:w="1"/><text x="41.7394%" y="1039.50"></text></g><g><title>___pthread_rwlock_unlock (1 samples, 0.27%)</title><rect x="41.4894%" y="1013" width="0.2660%" height="15" fill="rgb(236,179,52)" fg:x="156" fg:w="1"/><text x="41.7394%" y="1023.50"></text></g><g><title>openssl::ssl::SslContextBuilder::set_default_verify_paths (13 samples, 3.46%)</title><rect x="38.5638%" y="1333" width="3.4574%" height="15" fill="rgb(213,23,39)" fg:x="145" fg:w="13"/><text x="38.8138%" y="1343.50">ope..</text></g><g><title>X509_STORE_set_default_paths_ex (13 samples, 3.46%)</title><rect x="38.5638%" y="1317" width="3.4574%" height="15" fill="rgb(238,48,10)" fg:x="145" fg:w="13"/><text x="38.8138%" y="1327.50">X50..</text></g><g><title>[libcrypto.so.3.0.5] (13 samples, 3.46%)</title><rect x="38.5638%" y="1301" width="3.4574%" height="15" fill="rgb(251,196,23)" fg:x="145" fg:w="13"/><text x="38.8138%" y="1311.50">[li..</text></g><g><title>X509_load_cert_crl_file_ex (13 samples, 3.46%)</title><rect x="38.5638%" y="1285" width="3.4574%" height="15" fill="rgb(250,152,24)" fg:x="145" fg:w="13"/><text x="38.8138%" y="1295.50">X50..</text></g><g><title>PEM_X509_INFO_read_bio_ex (13 samples, 3.46%)</title><rect x="38.5638%" y="1269" width="3.4574%" height="15" fill="rgb(209,150,17)" fg:x="145" fg:w="13"/><text x="38.8138%" y="1279.50">PEM..</text></g><g><title>PEM_read_bio_ex (1 samples, 0.27%)</title><rect x="41.7553%" y="1253" width="0.2660%" height="15" fill="rgb(234,202,34)" fg:x="157" fg:w="1"/><text x="42.0053%" y="1263.50"></text></g><g><title>EVP_DecodeUpdate (1 samples, 0.27%)</title><rect x="41.7553%" y="1237" width="0.2660%" height="15" fill="rgb(253,148,53)" fg:x="157" fg:w="1"/><text x="42.0053%" y="1247.50"></text></g><g><title>octocrab::OctocrabBuilder::build (14 samples, 3.72%)</title><rect x="38.5638%" y="1429" width="3.7234%" height="15" fill="rgb(218,129,16)" fg:x="145" fg:w="14"/><text x="38.8138%" y="1439.50">octo..</text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (14 samples, 3.72%)</title><rect x="38.5638%" y="1413" width="3.7234%" height="15" fill="rgb(216,85,19)" fg:x="145" fg:w="14"/><text x="38.8138%" y="1423.50">reqw..</text></g><g><title>reqwest::connect::Connector::new_default_tls (14 samples, 3.72%)</title><rect x="38.5638%" y="1397" width="3.7234%" height="15" fill="rgb(235,228,7)" fg:x="145" fg:w="14"/><text x="38.8138%" y="1407.50">reqw..</text></g><g><title>native_tls::TlsConnectorBuilder::build (14 samples, 3.72%)</title><rect x="38.5638%" y="1381" width="3.7234%" height="15" fill="rgb(245,175,0)" fg:x="145" fg:w="14"/><text x="38.8138%" y="1391.50">nati..</text></g><g><title>native_tls::imp::TlsConnector::new (14 samples, 3.72%)</title><rect x="38.5638%" y="1365" width="3.7234%" height="15" fill="rgb(208,168,36)" fg:x="145" fg:w="14"/><text x="38.8138%" y="1375.50">nati..</text></g><g><title>openssl::ssl::connector::SslConnector::builder (14 samples, 3.72%)</title><rect x="38.5638%" y="1349" width="3.7234%" height="15" fill="rgb(246,171,24)" fg:x="145" fg:w="14"/><text x="38.8138%" y="1359.50">open..</text></g><g><title>openssl::ssl::connector::ctx (1 samples, 0.27%)</title><rect x="42.0213%" y="1333" width="0.2660%" height="15" fill="rgb(215,142,24)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1343.50"></text></g><g><title>openssl::ssl::SslContextBuilder::new (1 samples, 0.27%)</title><rect x="42.0213%" y="1317" width="0.2660%" height="15" fill="rgb(250,187,7)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1327.50"></text></g><g><title>SSL_CTX_new_ex (1 samples, 0.27%)</title><rect x="42.0213%" y="1301" width="0.2660%" height="15" fill="rgb(228,66,33)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1311.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1285" width="0.2660%" height="15" fill="rgb(234,215,21)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1295.50"></text></g><g><title>EVP_CIPHER_fetch (1 samples, 0.27%)</title><rect x="42.0213%" y="1269" width="0.2660%" height="15" fill="rgb(222,191,20)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1279.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1253" width="0.2660%" height="15" fill="rgb(245,79,54)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1263.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1237" width="0.2660%" height="15" fill="rgb(240,10,37)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1247.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1221" width="0.2660%" height="15" fill="rgb(214,192,32)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1231.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1205" width="0.2660%" height="15" fill="rgb(209,36,54)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1189" width="0.2660%" height="15" fill="rgb(220,10,11)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1173" width="0.2660%" height="15" fill="rgb(221,106,17)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1183.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="42.0213%" y="1157" width="0.2660%" height="15" fill="rgb(251,142,44)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1167.50"></text></g><g><title>__strchr_avx2 (1 samples, 0.27%)</title><rect x="42.0213%" y="1141" width="0.2660%" height="15" fill="rgb(238,13,15)" fg:x="158" fg:w="1"/><text x="42.2713%" y="1151.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.27%)</title><rect x="42.2872%" y="1157" width="0.2660%" height="15" fill="rgb(208,107,27)" fg:x="159" fg:w="1"/><text x="42.5372%" y="1167.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="42.2872%" y="1141" width="0.2660%" height="15" fill="rgb(205,136,37)" fg:x="159" fg:w="1"/><text x="42.5372%" y="1151.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.27%)</title><rect x="42.2872%" y="1125" width="0.2660%" height="15" fill="rgb(250,205,27)" fg:x="159" fg:w="1"/><text x="42.5372%" y="1135.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="42.2872%" y="1109" width="0.2660%" height="15" fill="rgb(210,80,43)" fg:x="159" fg:w="1"/><text x="42.5372%" y="1119.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.27%)</title><rect x="42.2872%" y="1093" width="0.2660%" height="15" fill="rgb(247,160,36)" fg:x="159" fg:w="1"/><text x="42.5372%" y="1103.50"></text></g><g><title>_int_malloc (1 samples, 0.27%)</title><rect x="42.2872%" y="1077" width="0.2660%" height="15" fill="rgb(234,13,49)" fg:x="159" fg:w="1"/><text x="42.5372%" y="1087.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="42.5532%" y="997" width="0.2660%" height="15" fill="rgb(234,122,0)" fg:x="160" fg:w="1"/><text x="42.8032%" y="1007.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.27%)</title><rect x="42.5532%" y="981" width="0.2660%" height="15" fill="rgb(207,146,38)" fg:x="160" fg:w="1"/><text x="42.8032%" y="991.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.27%)</title><rect x="42.5532%" y="965" width="0.2660%" height="15" fill="rgb(207,177,25)" fg:x="160" fg:w="1"/><text x="42.8032%" y="975.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.27%)</title><rect x="42.5532%" y="949" width="0.2660%" height="15" fill="rgb(211,178,42)" fg:x="160" fg:w="1"/><text x="42.8032%" y="959.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.27%)</title><rect x="42.5532%" y="933" width="0.2660%" height="15" fill="rgb(230,69,54)" fg:x="160" fg:w="1"/><text x="42.8032%" y="943.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.27%)</title><rect x="42.5532%" y="917" width="0.2660%" height="15" fill="rgb(214,135,41)" fg:x="160" fg:w="1"/><text x="42.8032%" y="927.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.53%)</title><rect x="42.5532%" y="1013" width="0.5319%" height="15" fill="rgb(237,67,25)" fg:x="160" fg:w="2"/><text x="42.8032%" y="1023.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.27%)</title><rect x="42.8191%" y="997" width="0.2660%" height="15" fill="rgb(222,189,50)" fg:x="161" fg:w="1"/><text x="43.0691%" y="1007.50"></text></g><g><title>serde::de::MapAccess::next_entry (3 samples, 0.80%)</title><rect x="42.5532%" y="1157" width="0.7979%" height="15" fill="rgb(245,148,34)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1167.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (3 samples, 0.80%)</title><rect x="42.5532%" y="1141" width="0.7979%" height="15" fill="rgb(222,29,6)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1151.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.80%)</title><rect x="42.5532%" y="1125" width="0.7979%" height="15" fill="rgb(221,189,43)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1135.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.80%)</title><rect x="42.5532%" y="1109" width="0.7979%" height="15" fill="rgb(207,36,27)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1119.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.80%)</title><rect x="42.5532%" y="1093" width="0.7979%" height="15" fill="rgb(217,90,24)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1103.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.80%)</title><rect x="42.5532%" y="1077" width="0.7979%" height="15" fill="rgb(224,66,35)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1087.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.80%)</title><rect x="42.5532%" y="1061" width="0.7979%" height="15" fill="rgb(221,13,50)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1071.50"></text></g><g><title>serde::de::MapAccess::next_entry (3 samples, 0.80%)</title><rect x="42.5532%" y="1045" width="0.7979%" height="15" fill="rgb(236,68,49)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1055.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (3 samples, 0.80%)</title><rect x="42.5532%" y="1029" width="0.7979%" height="15" fill="rgb(229,146,28)" fg:x="160" fg:w="3"/><text x="42.8032%" y="1039.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.27%)</title><rect x="43.0851%" y="1013" width="0.2660%" height="15" fill="rgb(225,31,38)" fg:x="162" fg:w="1"/><text x="43.3351%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="43.0851%" y="997" width="0.2660%" height="15" fill="rgb(250,208,3)" fg:x="162" fg:w="1"/><text x="43.3351%" y="1007.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.27%)</title><rect x="43.0851%" y="981" width="0.2660%" height="15" fill="rgb(246,54,23)" fg:x="162" fg:w="1"/><text x="43.3351%" y="991.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.27%)</title><rect x="43.0851%" y="965" width="0.2660%" height="15" fill="rgb(243,76,11)" fg:x="162" fg:w="1"/><text x="43.3351%" y="975.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.27%)</title><rect x="43.0851%" y="949" width="0.2660%" height="15" fill="rgb(245,21,50)" fg:x="162" fg:w="1"/><text x="43.3351%" y="959.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.27%)</title><rect x="43.0851%" y="933" width="0.2660%" height="15" fill="rgb(228,9,43)" fg:x="162" fg:w="1"/><text x="43.3351%" y="943.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.27%)</title><rect x="43.3511%" y="1109" width="0.2660%" height="15" fill="rgb(208,100,47)" fg:x="163" fg:w="1"/><text x="43.6011%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.27%)</title><rect x="43.3511%" y="1093" width="0.2660%" height="15" fill="rgb(232,26,8)" fg:x="163" fg:w="1"/><text x="43.6011%" y="1103.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.27%)</title><rect x="43.3511%" y="1077" width="0.2660%" height="15" fill="rgb(216,166,38)" fg:x="163" fg:w="1"/><text x="43.6011%" y="1087.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.27%)</title><rect x="43.3511%" y="1061" width="0.2660%" height="15" fill="rgb(251,202,51)" fg:x="163" fg:w="1"/><text x="43.6011%" y="1071.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.27%)</title><rect x="43.3511%" y="1045" width="0.2660%" height="15" fill="rgb(254,216,34)" fg:x="163" fg:w="1"/><text x="43.6011%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.27%)</title><rect x="43.3511%" y="1029" width="0.2660%" height="15" fill="rgb(251,32,27)" fg:x="163" fg:w="1"/><text x="43.6011%" y="1039.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (20 samples, 5.32%)</title><rect x="38.5638%" y="1541" width="5.3191%" height="15" fill="rgb(208,127,28)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1551.50">tokio::..</text></g><g><title>tokio::runtime::coop::budget (20 samples, 5.32%)</title><rect x="38.5638%" y="1525" width="5.3191%" height="15" fill="rgb(224,137,22)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1535.50">tokio::..</text></g><g><title>tokio::runtime::coop::with_budget (20 samples, 5.32%)</title><rect x="38.5638%" y="1509" width="5.3191%" height="15" fill="rgb(254,70,32)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1519.50">tokio::..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (20 samples, 5.32%)</title><rect x="38.5638%" y="1493" width="5.3191%" height="15" fill="rgb(229,75,37)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1503.50">tokio::..</text></g><g><title>dashboard::main::{{closure}} (20 samples, 5.32%)</title><rect x="38.5638%" y="1477" width="5.3191%" height="15" fill="rgb(252,64,23)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1487.50">dashboa..</text></g><g><title>dashboard::app::try_main_refactor_v3::{{closure}} (20 samples, 5.32%)</title><rect x="38.5638%" y="1461" width="5.3191%" height="15" fill="rgb(232,162,48)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1471.50">dashboa..</text></g><g><title>api::repos::list_user_repos::{{closure}} (20 samples, 5.32%)</title><rect x="38.5638%" y="1445" width="5.3191%" height="15" fill="rgb(246,160,12)" fg:x="145" fg:w="20"/><text x="38.8138%" y="1455.50">api::re..</text></g><g><title>octocrab::api::current::ListReposForAuthenticatedUserBuilder::send::{{closure}} (6 samples, 1.60%)</title><rect x="42.2872%" y="1429" width="1.5957%" height="15" fill="rgb(247,166,0)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1439.50"></text></g><g><title>octocrab::Octocrab::get::{{closure}} (6 samples, 1.60%)</title><rect x="42.2872%" y="1413" width="1.5957%" height="15" fill="rgb(249,219,21)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1423.50"></text></g><g><title>octocrab::Octocrab::get_with_headers::{{closure}} (6 samples, 1.60%)</title><rect x="42.2872%" y="1397" width="1.5957%" height="15" fill="rgb(205,209,3)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1407.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6 samples, 1.60%)</title><rect x="42.2872%" y="1381" width="1.5957%" height="15" fill="rgb(243,44,1)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1391.50"></text></g><g><title>&lt;octocrab::page::Page&lt;T&gt; as octocrab::from_response::FromResponse&gt;::from_response::{{closure}} (6 samples, 1.60%)</title><rect x="42.2872%" y="1365" width="1.5957%" height="15" fill="rgb(206,159,16)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1375.50"></text></g><g><title>reqwest::async_impl::response::Response::json::{{closure}} (6 samples, 1.60%)</title><rect x="42.2872%" y="1349" width="1.5957%" height="15" fill="rgb(244,77,30)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1359.50"></text></g><g><title>serde_json::de::from_slice (6 samples, 1.60%)</title><rect x="42.2872%" y="1333" width="1.5957%" height="15" fill="rgb(218,69,12)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1343.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 1.60%)</title><rect x="42.2872%" y="1317" width="1.5957%" height="15" fill="rgb(212,87,7)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1327.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 1.60%)</title><rect x="42.2872%" y="1301" width="1.5957%" height="15" fill="rgb(245,114,25)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1311.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 1.60%)</title><rect x="42.2872%" y="1285" width="1.5957%" height="15" fill="rgb(210,61,42)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1295.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6 samples, 1.60%)</title><rect x="42.2872%" y="1269" width="1.5957%" height="15" fill="rgb(211,52,33)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1279.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 1.60%)</title><rect x="42.2872%" y="1253" width="1.5957%" height="15" fill="rgb(234,58,33)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1263.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 1.60%)</title><rect x="42.2872%" y="1237" width="1.5957%" height="15" fill="rgb(220,115,36)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1247.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 1.60%)</title><rect x="42.2872%" y="1221" width="1.5957%" height="15" fill="rgb(243,153,54)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1231.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 1.60%)</title><rect x="42.2872%" y="1205" width="1.5957%" height="15" fill="rgb(251,47,18)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1215.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 1.60%)</title><rect x="42.2872%" y="1189" width="1.5957%" height="15" fill="rgb(242,102,42)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1199.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 1.60%)</title><rect x="42.2872%" y="1173" width="1.5957%" height="15" fill="rgb(234,31,38)" fg:x="159" fg:w="6"/><text x="42.5372%" y="1183.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (2 samples, 0.53%)</title><rect x="43.3511%" y="1157" width="0.5319%" height="15" fill="rgb(221,117,51)" fg:x="163" fg:w="2"/><text x="43.6011%" y="1167.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.53%)</title><rect x="43.3511%" y="1141" width="0.5319%" height="15" fill="rgb(212,20,18)" fg:x="163" fg:w="2"/><text x="43.6011%" y="1151.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.53%)</title><rect x="43.3511%" y="1125" width="0.5319%" height="15" fill="rgb(245,133,36)" fg:x="163" fg:w="2"/><text x="43.6011%" y="1135.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.27%)</title><rect x="43.6170%" y="1109" width="0.2660%" height="15" fill="rgb(212,6,19)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.27%)</title><rect x="43.6170%" y="1093" width="0.2660%" height="15" fill="rgb(218,1,36)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1103.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.27%)</title><rect x="43.6170%" y="1077" width="0.2660%" height="15" fill="rgb(246,84,54)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1087.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.27%)</title><rect x="43.6170%" y="1061" width="0.2660%" height="15" fill="rgb(242,110,6)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.27%)</title><rect x="43.6170%" y="1045" width="0.2660%" height="15" fill="rgb(214,47,5)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.27%)</title><rect x="43.6170%" y="1029" width="0.2660%" height="15" fill="rgb(218,159,25)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.27%)</title><rect x="43.6170%" y="1013" width="0.2660%" height="15" fill="rgb(215,211,28)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1023.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.27%)</title><rect x="43.6170%" y="997" width="0.2660%" height="15" fill="rgb(238,59,32)" fg:x="164" fg:w="1"/><text x="43.8670%" y="1007.50"></text></g><g><title>dashboard (166 samples, 44.15%)</title><rect x="0.0000%" y="1557" width="44.1489%" height="15" fill="rgb(226,82,3)" fg:x="0" fg:w="166"/><text x="0.2500%" y="1567.50">dashboard</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1 samples, 0.27%)</title><rect x="43.8830%" y="1541" width="0.2660%" height="15" fill="rgb(240,164,32)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1551.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (1 samples, 0.27%)</title><rect x="43.8830%" y="1525" width="0.2660%" height="15" fill="rgb(232,46,7)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1535.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.27%)</title><rect x="43.8830%" y="1509" width="0.2660%" height="15" fill="rgb(229,129,53)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1519.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.27%)</title><rect x="43.8830%" y="1493" width="0.2660%" height="15" fill="rgb(234,188,29)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1503.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.27%)</title><rect x="43.8830%" y="1477" width="0.2660%" height="15" fill="rgb(246,141,4)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1487.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (1 samples, 0.27%)</title><rect x="43.8830%" y="1461" width="0.2660%" height="15" fill="rgb(229,23,39)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1471.50"></text></g><g><title>dashboard::main::{{closure}} (1 samples, 0.27%)</title><rect x="43.8830%" y="1445" width="0.2660%" height="15" fill="rgb(206,12,3)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1455.50"></text></g><g><title>dashboard::app::try_main_refactor_v3::{{closure}} (1 samples, 0.27%)</title><rect x="43.8830%" y="1429" width="0.2660%" height="15" fill="rgb(252,226,20)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;octocrab::page::Page&lt;octocrab::models::Repository&gt;&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1413" width="0.2660%" height="15" fill="rgb(216,123,35)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;octocrab::models::Repository&gt;&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1397" width="0.2660%" height="15" fill="rgb(212,68,40)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.27%)</title><rect x="43.8830%" y="1381" width="0.2660%" height="15" fill="rgb(254,125,32)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;[octocrab::models::Repository]&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1365" width="0.2660%" height="15" fill="rgb(253,97,22)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;octocrab::models::Repository&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1349" width="0.2660%" height="15" fill="rgb(241,101,14)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;url::Url&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1333" width="0.2660%" height="15" fill="rgb(238,103,29)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1317" width="0.2660%" height="15" fill="rgb(233,195,47)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1301" width="0.2660%" height="15" fill="rgb(246,218,30)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.27%)</title><rect x="43.8830%" y="1285" width="0.2660%" height="15" fill="rgb(219,145,47)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.27%)</title><rect x="43.8830%" y="1269" width="0.2660%" height="15" fill="rgb(243,12,26)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.27%)</title><rect x="43.8830%" y="1253" width="0.2660%" height="15" fill="rgb(214,87,16)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.27%)</title><rect x="43.8830%" y="1237" width="0.2660%" height="15" fill="rgb(208,99,42)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1247.50"></text></g><g><title>__free (1 samples, 0.27%)</title><rect x="43.8830%" y="1221" width="0.2660%" height="15" fill="rgb(253,99,2)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1231.50"></text></g><g><title>_int_free (1 samples, 0.27%)</title><rect x="43.8830%" y="1205" width="0.2660%" height="15" fill="rgb(220,168,23)" fg:x="165" fg:w="1"/><text x="44.1330%" y="1215.50"></text></g><g><title>[gh] (111 samples, 29.52%)</title><rect x="44.1489%" y="1541" width="29.5213%" height="15" fill="rgb(242,38,24)" fg:x="166" fg:w="111"/><text x="44.3989%" y="1551.50">[gh]</text></g><g><title>[gh] (105 samples, 27.93%)</title><rect x="45.7447%" y="1525" width="27.9255%" height="15" fill="rgb(225,182,9)" fg:x="172" fg:w="105"/><text x="45.9947%" y="1535.50">[gh]</text></g><g><title>[gh] (105 samples, 27.93%)</title><rect x="45.7447%" y="1509" width="27.9255%" height="15" fill="rgb(243,178,37)" fg:x="172" fg:w="105"/><text x="45.9947%" y="1519.50">[gh]</text></g><g><title>[gh] (104 samples, 27.66%)</title><rect x="46.0106%" y="1493" width="27.6596%" height="15" fill="rgb(232,139,19)" fg:x="173" fg:w="104"/><text x="46.2606%" y="1503.50">[gh]</text></g><g><title>[gh] (90 samples, 23.94%)</title><rect x="49.7340%" y="1477" width="23.9362%" height="15" fill="rgb(225,201,24)" fg:x="187" fg:w="90"/><text x="49.9840%" y="1487.50">[gh]</text></g><g><title>[gh] (74 samples, 19.68%)</title><rect x="53.9894%" y="1461" width="19.6809%" height="15" fill="rgb(221,47,46)" fg:x="203" fg:w="74"/><text x="54.2394%" y="1471.50">[gh]</text></g><g><title>[gh] (73 samples, 19.41%)</title><rect x="54.2553%" y="1445" width="19.4149%" height="15" fill="rgb(249,23,13)" fg:x="204" fg:w="73"/><text x="54.5053%" y="1455.50">[gh]</text></g><g><title>[gh] (66 samples, 17.55%)</title><rect x="56.1170%" y="1429" width="17.5532%" height="15" fill="rgb(219,9,5)" fg:x="211" fg:w="66"/><text x="56.3670%" y="1439.50">[gh]</text></g><g><title>[gh] (64 samples, 17.02%)</title><rect x="56.6489%" y="1413" width="17.0213%" height="15" fill="rgb(254,171,16)" fg:x="213" fg:w="64"/><text x="56.8989%" y="1423.50">[gh]</text></g><g><title>[gh] (62 samples, 16.49%)</title><rect x="57.1809%" y="1397" width="16.4894%" height="15" fill="rgb(230,171,20)" fg:x="215" fg:w="62"/><text x="57.4309%" y="1407.50">[gh]</text></g><g><title>[gh] (40 samples, 10.64%)</title><rect x="63.0319%" y="1381" width="10.6383%" height="15" fill="rgb(210,71,41)" fg:x="237" fg:w="40"/><text x="63.2819%" y="1391.50">[gh]</text></g><g><title>[gh] (39 samples, 10.37%)</title><rect x="63.2979%" y="1365" width="10.3723%" height="15" fill="rgb(206,173,20)" fg:x="238" fg:w="39"/><text x="63.5479%" y="1375.50">[gh]</text></g><g><title>[gh] (38 samples, 10.11%)</title><rect x="63.5638%" y="1349" width="10.1064%" height="15" fill="rgb(233,88,34)" fg:x="239" fg:w="38"/><text x="63.8138%" y="1359.50">[gh]</text></g><g><title>[gh] (36 samples, 9.57%)</title><rect x="64.0957%" y="1333" width="9.5745%" height="15" fill="rgb(223,209,46)" fg:x="241" fg:w="36"/><text x="64.3457%" y="1343.50">[gh]</text></g><g><title>[gh] (35 samples, 9.31%)</title><rect x="64.3617%" y="1317" width="9.3085%" height="15" fill="rgb(250,43,18)" fg:x="242" fg:w="35"/><text x="64.6117%" y="1327.50">[gh]</text></g><g><title>[gh] (31 samples, 8.24%)</title><rect x="65.4255%" y="1301" width="8.2447%" height="15" fill="rgb(208,13,10)" fg:x="246" fg:w="31"/><text x="65.6755%" y="1311.50">[gh]</text></g><g><title>[gh] (26 samples, 6.91%)</title><rect x="66.7553%" y="1285" width="6.9149%" height="15" fill="rgb(212,200,36)" fg:x="251" fg:w="26"/><text x="67.0053%" y="1295.50">[gh]</text></g><g><title>[gh] (26 samples, 6.91%)</title><rect x="66.7553%" y="1269" width="6.9149%" height="15" fill="rgb(225,90,30)" fg:x="251" fg:w="26"/><text x="67.0053%" y="1279.50">[gh]</text></g><g><title>[gh] (23 samples, 6.12%)</title><rect x="67.5532%" y="1253" width="6.1170%" height="15" fill="rgb(236,182,39)" fg:x="254" fg:w="23"/><text x="67.8032%" y="1263.50">[gh]</text></g><g><title>[gh] (23 samples, 6.12%)</title><rect x="67.5532%" y="1237" width="6.1170%" height="15" fill="rgb(212,144,35)" fg:x="254" fg:w="23"/><text x="67.8032%" y="1247.50">[gh]</text></g><g><title>[gh] (22 samples, 5.85%)</title><rect x="67.8191%" y="1221" width="5.8511%" height="15" fill="rgb(228,63,44)" fg:x="255" fg:w="22"/><text x="68.0691%" y="1231.50">[gh]</text></g><g><title>[gh] (17 samples, 4.52%)</title><rect x="69.1489%" y="1205" width="4.5213%" height="15" fill="rgb(228,109,6)" fg:x="260" fg:w="17"/><text x="69.3989%" y="1215.50">[gh]</text></g><g><title>[gh] (13 samples, 3.46%)</title><rect x="70.2128%" y="1189" width="3.4574%" height="15" fill="rgb(238,117,24)" fg:x="264" fg:w="13"/><text x="70.4628%" y="1199.50">[gh]</text></g><g><title>[gh] (12 samples, 3.19%)</title><rect x="70.4787%" y="1173" width="3.1915%" height="15" fill="rgb(242,26,26)" fg:x="265" fg:w="12"/><text x="70.7287%" y="1183.50">[gh]</text></g><g><title>[gh] (2 samples, 0.53%)</title><rect x="73.1383%" y="1157" width="0.5319%" height="15" fill="rgb(221,92,48)" fg:x="275" fg:w="2"/><text x="73.3883%" y="1167.50"></text></g><g><title>[gh] (2 samples, 0.53%)</title><rect x="73.1383%" y="1141" width="0.5319%" height="15" fill="rgb(209,209,32)" fg:x="275" fg:w="2"/><text x="73.3883%" y="1151.50"></text></g><g><title>[gh] (2 samples, 0.53%)</title><rect x="73.1383%" y="1125" width="0.5319%" height="15" fill="rgb(221,70,22)" fg:x="275" fg:w="2"/><text x="73.3883%" y="1135.50"></text></g><g><title>[gh] (1 samples, 0.27%)</title><rect x="73.4043%" y="1109" width="0.2660%" height="15" fill="rgb(248,145,5)" fg:x="276" fg:w="1"/><text x="73.6543%" y="1119.50"></text></g><g><title>[gh] (1 samples, 0.27%)</title><rect x="73.4043%" y="1093" width="0.2660%" height="15" fill="rgb(226,116,26)" fg:x="276" fg:w="1"/><text x="73.6543%" y="1103.50"></text></g><g><title>[gh] (1 samples, 0.27%)</title><rect x="73.4043%" y="1077" width="0.2660%" height="15" fill="rgb(244,5,17)" fg:x="276" fg:w="1"/><text x="73.6543%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="73.6702%" y="1541" width="1.0638%" height="15" fill="rgb(252,159,33)" fg:x="277" fg:w="4"/><text x="73.9202%" y="1551.50"></text></g><g><title>[gh] (4 samples, 1.06%)</title><rect x="73.6702%" y="1525" width="1.0638%" height="15" fill="rgb(206,71,0)" fg:x="277" fg:w="4"/><text x="73.9202%" y="1535.50"></text></g><g><title>__clone3 (6 samples, 1.60%)</title><rect x="74.7340%" y="1541" width="1.5957%" height="15" fill="rgb(233,118,54)" fg:x="281" fg:w="6"/><text x="74.9840%" y="1551.50"></text></g><g><title>start_thread (1 samples, 0.27%)</title><rect x="76.0638%" y="1525" width="0.2660%" height="15" fill="rgb(234,83,48)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1535.50"></text></g><g><title>[gh] (1 samples, 0.27%)</title><rect x="76.0638%" y="1509" width="0.2660%" height="15" fill="rgb(228,3,54)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1519.50"></text></g><g><title>__free (1 samples, 0.27%)</title><rect x="76.0638%" y="1493" width="0.2660%" height="15" fill="rgb(226,155,13)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1503.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.27%)</title><rect x="76.0638%" y="1477" width="0.2660%" height="15" fill="rgb(241,28,37)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1487.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.27%)</title><rect x="76.0638%" y="1461" width="0.2660%" height="15" fill="rgb(233,93,10)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1471.50"></text></g><g><title>alloc_new_heap (1 samples, 0.27%)</title><rect x="76.0638%" y="1445" width="0.2660%" height="15" fill="rgb(225,113,19)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1455.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.27%)</title><rect x="76.0638%" y="1429" width="0.2660%" height="15" fill="rgb(241,2,18)" fg:x="286" fg:w="1"/><text x="76.3138%" y="1439.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.27%)</title><rect x="76.3298%" y="1541" width="0.2660%" height="15" fill="rgb(228,207,21)" fg:x="287" fg:w="1"/><text x="76.5798%" y="1551.50"></text></g><g><title>dl_main (2 samples, 0.53%)</title><rect x="76.5957%" y="1477" width="0.5319%" height="15" fill="rgb(213,211,35)" fg:x="288" fg:w="2"/><text x="76.8457%" y="1487.50"></text></g><g><title>_dl_relocate_object (2 samples, 0.53%)</title><rect x="76.5957%" y="1461" width="0.5319%" height="15" fill="rgb(209,83,10)" fg:x="288" fg:w="2"/><text x="76.8457%" y="1471.50"></text></g><g><title>elf_dynamic_do_Rela (2 samples, 0.53%)</title><rect x="76.5957%" y="1445" width="0.5319%" height="15" fill="rgb(209,164,1)" fg:x="288" fg:w="2"/><text x="76.8457%" y="1455.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.27%)</title><rect x="76.8617%" y="1429" width="0.2660%" height="15" fill="rgb(213,184,43)" fg:x="289" fg:w="1"/><text x="77.1117%" y="1439.50"></text></g><g><title>gh (125 samples, 33.24%)</title><rect x="44.1489%" y="1557" width="33.2447%" height="15" fill="rgb(231,61,34)" fg:x="166" fg:w="125"/><text x="44.3989%" y="1567.50">gh</text></g><g><title>_start (3 samples, 0.80%)</title><rect x="76.5957%" y="1541" width="0.7979%" height="15" fill="rgb(235,75,3)" fg:x="288" fg:w="3"/><text x="76.8457%" y="1551.50"></text></g><g><title>_dl_start (3 samples, 0.80%)</title><rect x="76.5957%" y="1525" width="0.7979%" height="15" fill="rgb(220,106,47)" fg:x="288" fg:w="3"/><text x="76.8457%" y="1535.50"></text></g><g><title>_dl_start_final (3 samples, 0.80%)</title><rect x="76.5957%" y="1509" width="0.7979%" height="15" fill="rgb(210,196,33)" fg:x="288" fg:w="3"/><text x="76.8457%" y="1519.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.80%)</title><rect x="76.5957%" y="1493" width="0.7979%" height="15" fill="rgb(229,154,42)" fg:x="288" fg:w="3"/><text x="76.8457%" y="1503.50"></text></g><g><title>dl_platform_init (1 samples, 0.27%)</title><rect x="77.1277%" y="1477" width="0.2660%" height="15" fill="rgb(228,114,26)" fg:x="290" fg:w="1"/><text x="77.3777%" y="1487.50"></text></g><g><title>init_cpu_features (1 samples, 0.27%)</title><rect x="77.1277%" y="1461" width="0.2660%" height="15" fill="rgb(208,144,1)" fg:x="290" fg:w="1"/><text x="77.3777%" y="1471.50"></text></g><g><title>get_common_indices (1 samples, 0.27%)</title><rect x="77.1277%" y="1445" width="0.2660%" height="15" fill="rgb(239,112,37)" fg:x="290" fg:w="1"/><text x="77.3777%" y="1455.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="77.3936%" y="1541" width="0.2660%" height="15" fill="rgb(210,96,50)" fg:x="291" fg:w="1"/><text x="77.6436%" y="1551.50"></text></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.27%)</title><rect x="77.3936%" y="1525" width="0.2660%" height="15" fill="rgb(222,178,2)" fg:x="291" fg:w="1"/><text x="77.6436%" y="1535.50"></text></g><g><title>__GI___munmap (1 samples, 0.27%)</title><rect x="77.6596%" y="1541" width="0.2660%" height="15" fill="rgb(226,74,18)" fg:x="292" fg:w="1"/><text x="77.9096%" y="1551.50"></text></g><g><title>__GI___call_tls_dtors (1 samples, 0.27%)</title><rect x="80.5851%" y="1509" width="0.2660%" height="15" fill="rgb(225,67,54)" fg:x="303" fg:w="1"/><text x="80.8351%" y="1519.50"></text></g><g><title>__free (1 samples, 0.27%)</title><rect x="80.5851%" y="1493" width="0.2660%" height="15" fill="rgb(251,92,32)" fg:x="303" fg:w="1"/><text x="80.8351%" y="1503.50"></text></g><g><title>__GI___nptl_deallocate_tsd (1 samples, 0.27%)</title><rect x="80.8511%" y="1509" width="0.2660%" height="15" fill="rgb(228,149,22)" fg:x="304" fg:w="1"/><text x="81.1011%" y="1519.50"></text></g><g><title>__malloc_arena_thread_freeres (2 samples, 0.53%)</title><rect x="81.1170%" y="1509" width="0.5319%" height="15" fill="rgb(243,54,13)" fg:x="305" fg:w="2"/><text x="81.3670%" y="1519.50"></text></g><g><title>core::mem::drop (1 samples, 0.27%)</title><rect x="81.6489%" y="1301" width="0.2660%" height="15" fill="rgb(243,180,28)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (1 samples, 0.27%)</title><rect x="81.6489%" y="1285" width="0.2660%" height="15" fill="rgb(208,167,24)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (1 samples, 0.27%)</title><rect x="81.6489%" y="1269" width="0.2660%" height="15" fill="rgb(245,73,45)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1279.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.27%)</title><rect x="81.6489%" y="1253" width="0.2660%" height="15" fill="rgb(237,203,48)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1263.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.27%)</title><rect x="81.6489%" y="1237" width="0.2660%" height="15" fill="rgb(211,197,16)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1247.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.27%)</title><rect x="81.6489%" y="1221" width="0.2660%" height="15" fill="rgb(243,99,51)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1231.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (1 samples, 0.27%)</title><rect x="81.6489%" y="1205" width="0.2660%" height="15" fill="rgb(215,123,29)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.27%)</title><rect x="81.6489%" y="1189" width="0.2660%" height="15" fill="rgb(239,186,37)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.27%)</title><rect x="81.6489%" y="1173" width="0.2660%" height="15" fill="rgb(252,136,39)" fg:x="307" fg:w="1"/><text x="81.8989%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.27%)</title><rect x="81.9149%" y="1157" width="0.2660%" height="15" fill="rgb(223,213,32)" fg:x="308" fg:w="1"/><text x="82.1649%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.27%)</title><rect x="81.9149%" y="1141" width="0.2660%" height="15" fill="rgb(233,115,5)" fg:x="308" fg:w="1"/><text x="82.1649%" y="1151.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait_timeout (5 samples, 1.33%)</title><rect x="81.9149%" y="1301" width="1.3298%" height="15" fill="rgb(207,226,44)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1311.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_for (5 samples, 1.33%)</title><rect x="81.9149%" y="1285" width="1.3298%" height="15" fill="rgb(208,126,0)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1295.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 1.33%)</title><rect x="81.9149%" y="1269" width="1.3298%" height="15" fill="rgb(244,66,21)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1279.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 1.33%)</title><rect x="81.9149%" y="1253" width="1.3298%" height="15" fill="rgb(222,97,12)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1263.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (5 samples, 1.33%)</title><rect x="81.9149%" y="1237" width="1.3298%" height="15" fill="rgb(219,213,19)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1247.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 1.33%)</title><rect x="81.9149%" y="1221" width="1.3298%" height="15" fill="rgb(252,169,30)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1231.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 1.33%)</title><rect x="81.9149%" y="1205" width="1.3298%" height="15" fill="rgb(206,32,51)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1215.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (5 samples, 1.33%)</title><rect x="81.9149%" y="1189" width="1.3298%" height="15" fill="rgb(250,172,42)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1199.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 1.33%)</title><rect x="81.9149%" y="1173" width="1.3298%" height="15" fill="rgb(209,34,43)" fg:x="308" fg:w="5"/><text x="82.1649%" y="1183.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (4 samples, 1.06%)</title><rect x="82.1809%" y="1157" width="1.0638%" height="15" fill="rgb(223,11,35)" fg:x="309" fg:w="4"/><text x="82.4309%" y="1167.50"></text></g><g><title>syscall (4 samples, 1.06%)</title><rect x="82.1809%" y="1141" width="1.0638%" height="15" fill="rgb(251,219,26)" fg:x="309" fg:w="4"/><text x="82.4309%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (4 samples, 1.06%)</title><rect x="83.2447%" y="1173" width="1.0638%" height="15" fill="rgb(231,119,3)" fg:x="313" fg:w="4"/><text x="83.4947%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 1.06%)</title><rect x="83.2447%" y="1157" width="1.0638%" height="15" fill="rgb(216,97,11)" fg:x="313" fg:w="4"/><text x="83.4947%" y="1167.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (40 samples, 10.64%)</title><rect x="83.2447%" y="1301" width="10.6383%" height="15" fill="rgb(223,59,9)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1311.50">tokio::loom::std..</text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (40 samples, 10.64%)</title><rect x="83.2447%" y="1285" width="10.6383%" height="15" fill="rgb(233,93,31)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1295.50">lock_api::mutex:..</text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (40 samples, 10.64%)</title><rect x="83.2447%" y="1269" width="10.6383%" height="15" fill="rgb(239,81,33)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1279.50">&lt;parking_lot::ra..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (40 samples, 10.64%)</title><rect x="83.2447%" y="1253" width="10.6383%" height="15" fill="rgb(213,120,34)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1263.50">parking_lot::raw..</text></g><g><title>parking_lot_core::parking_lot::park (40 samples, 10.64%)</title><rect x="83.2447%" y="1237" width="10.6383%" height="15" fill="rgb(243,49,53)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1247.50">parking_lot_core..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (40 samples, 10.64%)</title><rect x="83.2447%" y="1221" width="10.6383%" height="15" fill="rgb(247,216,33)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1231.50">parking_lot_core..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (40 samples, 10.64%)</title><rect x="83.2447%" y="1205" width="10.6383%" height="15" fill="rgb(226,26,14)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1215.50">parking_lot_core..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (40 samples, 10.64%)</title><rect x="83.2447%" y="1189" width="10.6383%" height="15" fill="rgb(215,49,53)" fg:x="313" fg:w="40"/><text x="83.4947%" y="1199.50">&lt;parking_lot_cor..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (36 samples, 9.57%)</title><rect x="84.3085%" y="1173" width="9.5745%" height="15" fill="rgb(245,162,40)" fg:x="317" fg:w="36"/><text x="84.5585%" y="1183.50">parking_lot_co..</text></g><g><title>syscall (36 samples, 9.57%)</title><rect x="84.3085%" y="1157" width="9.5745%" height="15" fill="rgb(229,68,17)" fg:x="317" fg:w="36"/><text x="84.5585%" y="1167.50">syscall</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.27%)</title><rect x="94.1489%" y="1237" width="0.2660%" height="15" fill="rgb(213,182,10)" fg:x="354" fg:w="1"/><text x="94.3989%" y="1247.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (1 samples, 0.27%)</title><rect x="94.1489%" y="1221" width="0.2660%" height="15" fill="rgb(245,125,30)" fg:x="354" fg:w="1"/><text x="94.3989%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.27%)</title><rect x="94.1489%" y="1205" width="0.2660%" height="15" fill="rgb(232,202,2)" fg:x="354" fg:w="1"/><text x="94.3989%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.27%)</title><rect x="94.1489%" y="1189" width="0.2660%" height="15" fill="rgb(237,140,51)" fg:x="354" fg:w="1"/><text x="94.3989%" y="1199.50"></text></g><g><title>tokio::loom::std::thread::yield_now (1 samples, 0.27%)</title><rect x="94.4149%" y="917" width="0.2660%" height="15" fill="rgb(236,157,25)" fg:x="355" fg:w="1"/><text x="94.6649%" y="927.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.27%)</title><rect x="94.4149%" y="901" width="0.2660%" height="15" fill="rgb(219,209,0)" fg:x="355" fg:w="1"/><text x="94.6649%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.27%)</title><rect x="94.4149%" y="885" width="0.2660%" height="15" fill="rgb(240,116,54)" fg:x="355" fg:w="1"/><text x="94.6649%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.27%)</title><rect x="94.6809%" y="789" width="0.2660%" height="15" fill="rgb(216,10,36)" fg:x="356" fg:w="1"/><text x="94.9309%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.27%)</title><rect x="94.6809%" y="773" width="0.2660%" height="15" fill="rgb(222,72,44)" fg:x="356" fg:w="1"/><text x="94.9309%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (9 samples, 2.39%)</title><rect x="94.6809%" y="917" width="2.3936%" height="15" fill="rgb(232,159,9)" fg:x="356" fg:w="9"/><text x="94.9309%" y="927.50">to..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (9 samples, 2.39%)</title><rect x="94.6809%" y="901" width="2.3936%" height="15" fill="rgb(210,39,32)" fg:x="356" fg:w="9"/><text x="94.9309%" y="911.50">to..</text></g><g><title>parking_lot::condvar::Condvar::wait (9 samples, 2.39%)</title><rect x="94.6809%" y="885" width="2.3936%" height="15" fill="rgb(216,194,45)" fg:x="356" fg:w="9"/><text x="94.9309%" y="895.50">pa..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (9 samples, 2.39%)</title><rect x="94.6809%" y="869" width="2.3936%" height="15" fill="rgb(218,18,35)" fg:x="356" fg:w="9"/><text x="94.9309%" y="879.50">pa..</text></g><g><title>parking_lot_core::parking_lot::park (9 samples, 2.39%)</title><rect x="94.6809%" y="853" width="2.3936%" height="15" fill="rgb(207,83,51)" fg:x="356" fg:w="9"/><text x="94.9309%" y="863.50">pa..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (9 samples, 2.39%)</title><rect x="94.6809%" y="837" width="2.3936%" height="15" fill="rgb(225,63,43)" fg:x="356" fg:w="9"/><text x="94.9309%" y="847.50">pa..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (9 samples, 2.39%)</title><rect x="94.6809%" y="821" width="2.3936%" height="15" fill="rgb(207,57,36)" fg:x="356" fg:w="9"/><text x="94.9309%" y="831.50">pa..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (9 samples, 2.39%)</title><rect x="94.6809%" y="805" width="2.3936%" height="15" fill="rgb(216,99,33)" fg:x="356" fg:w="9"/><text x="94.9309%" y="815.50">&lt;p..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (8 samples, 2.13%)</title><rect x="94.9468%" y="789" width="2.1277%" height="15" fill="rgb(225,42,16)" fg:x="357" fg:w="8"/><text x="95.1968%" y="799.50">p..</text></g><g><title>syscall (8 samples, 2.13%)</title><rect x="94.9468%" y="773" width="2.1277%" height="15" fill="rgb(220,201,45)" fg:x="357" fg:w="8"/><text x="95.1968%" y="783.50">s..</text></g><g><title>futures_task::waker::wake_arc_raw (1 samples, 0.27%)</title><rect x="97.0745%" y="805" width="0.2660%" height="15" fill="rgb(225,33,4)" fg:x="365" fg:w="1"/><text x="97.3245%" y="815.50"></text></g><g><title>futures_task::arc_wake::ArcWake::wake (1 samples, 0.27%)</title><rect x="97.0745%" y="789" width="0.2660%" height="15" fill="rgb(224,33,50)" fg:x="365" fg:w="1"/><text x="97.3245%" y="799.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (1 samples, 0.27%)</title><rect x="97.0745%" y="773" width="0.2660%" height="15" fill="rgb(246,198,51)" fg:x="365" fg:w="1"/><text x="97.3245%" y="783.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.27%)</title><rect x="97.0745%" y="757" width="0.2660%" height="15" fill="rgb(205,22,4)" fg:x="365" fg:w="1"/><text x="97.3245%" y="767.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.27%)</title><rect x="97.0745%" y="741" width="0.2660%" height="15" fill="rgb(206,3,8)" fg:x="365" fg:w="1"/><text x="97.3245%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (1 samples, 0.27%)</title><rect x="97.0745%" y="725" width="0.2660%" height="15" fill="rgb(251,23,15)" fg:x="365" fg:w="1"/><text x="97.3245%" y="735.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (1 samples, 0.27%)</title><rect x="97.0745%" y="709" width="0.2660%" height="15" fill="rgb(252,88,28)" fg:x="365" fg:w="1"/><text x="97.3245%" y="719.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.27%)</title><rect x="97.0745%" y="693" width="0.2660%" height="15" fill="rgb(212,127,14)" fg:x="365" fg:w="1"/><text x="97.3245%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.27%)</title><rect x="97.0745%" y="677" width="0.2660%" height="15" fill="rgb(247,145,37)" fg:x="365" fg:w="1"/><text x="97.3245%" y="687.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1 samples, 0.27%)</title><rect x="97.0745%" y="661" width="0.2660%" height="15" fill="rgb(209,117,53)" fg:x="365" fg:w="1"/><text x="97.3245%" y="671.50"></text></g><g><title>syscall (1 samples, 0.27%)</title><rect x="97.0745%" y="645" width="0.2660%" height="15" fill="rgb(212,90,42)" fg:x="365" fg:w="1"/><text x="97.3245%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (12 samples, 3.19%)</title><rect x="94.4149%" y="981" width="3.1915%" height="15" fill="rgb(218,164,37)" fg:x="355" fg:w="12"/><text x="94.6649%" y="991.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (12 samples, 3.19%)</title><rect x="94.4149%" y="965" width="3.1915%" height="15" fill="rgb(246,65,34)" fg:x="355" fg:w="12"/><text x="94.6649%" y="975.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (12 samples, 3.19%)</title><rect x="94.4149%" y="949" width="3.1915%" height="15" fill="rgb(231,100,33)" fg:x="355" fg:w="12"/><text x="94.6649%" y="959.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (12 samples, 3.19%)</title><rect x="94.4149%" y="933" width="3.1915%" height="15" fill="rgb(228,126,14)" fg:x="355" fg:w="12"/><text x="94.6649%" y="943.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (2 samples, 0.53%)</title><rect x="97.0745%" y="917" width="0.5319%" height="15" fill="rgb(215,173,21)" fg:x="365" fg:w="2"/><text x="97.3245%" y="927.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (2 samples, 0.53%)</title><rect x="97.0745%" y="901" width="0.5319%" height="15" fill="rgb(210,6,40)" fg:x="365" fg:w="2"/><text x="97.3245%" y="911.50"></text></g><g><title>tokio::runtime::io::Driver::turn (2 samples, 0.53%)</title><rect x="97.0745%" y="885" width="0.5319%" height="15" fill="rgb(212,48,18)" fg:x="365" fg:w="2"/><text x="97.3245%" y="895.50"></text></g><g><title>tokio::runtime::io::Driver::dispatch (2 samples, 0.53%)</title><rect x="97.0745%" y="869" width="0.5319%" height="15" fill="rgb(230,214,11)" fg:x="365" fg:w="2"/><text x="97.3245%" y="879.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (2 samples, 0.53%)</title><rect x="97.0745%" y="853" width="0.5319%" height="15" fill="rgb(254,105,39)" fg:x="365" fg:w="2"/><text x="97.3245%" y="863.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (2 samples, 0.53%)</title><rect x="97.0745%" y="837" width="0.5319%" height="15" fill="rgb(245,158,5)" fg:x="365" fg:w="2"/><text x="97.3245%" y="847.50"></text></g><g><title>core::task::wake::Waker::wake (2 samples, 0.53%)</title><rect x="97.0745%" y="821" width="0.5319%" height="15" fill="rgb(249,208,11)" fg:x="365" fg:w="2"/><text x="97.3245%" y="831.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.27%)</title><rect x="97.3404%" y="805" width="0.2660%" height="15" fill="rgb(210,39,28)" fg:x="366" fg:w="1"/><text x="97.5904%" y="815.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.27%)</title><rect x="97.3404%" y="789" width="0.2660%" height="15" fill="rgb(211,56,53)" fg:x="366" fg:w="1"/><text x="97.5904%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (1 samples, 0.27%)</title><rect x="97.3404%" y="773" width="0.2660%" height="15" fill="rgb(226,201,30)" fg:x="366" fg:w="1"/><text x="97.5904%" y="783.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (1 samples, 0.27%)</title><rect x="97.3404%" y="757" width="0.2660%" height="15" fill="rgb(239,101,34)" fg:x="366" fg:w="1"/><text x="97.5904%" y="767.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.27%)</title><rect x="97.3404%" y="741" width="0.2660%" height="15" fill="rgb(226,209,5)" fg:x="366" fg:w="1"/><text x="97.5904%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.27%)</title><rect x="97.3404%" y="725" width="0.2660%" height="15" fill="rgb(250,105,47)" fg:x="366" fg:w="1"/><text x="97.5904%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (1 samples, 0.27%)</title><rect x="97.3404%" y="709" width="0.2660%" height="15" fill="rgb(230,72,3)" fg:x="366" fg:w="1"/><text x="97.5904%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.27%)</title><rect x="97.3404%" y="693" width="0.2660%" height="15" fill="rgb(232,218,39)" fg:x="366" fg:w="1"/><text x="97.5904%" y="703.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.27%)</title><rect x="97.3404%" y="677" width="0.2660%" height="15" fill="rgb(248,166,6)" fg:x="366" fg:w="1"/><text x="97.5904%" y="687.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.27%)</title><rect x="97.3404%" y="661" width="0.2660%" height="15" fill="rgb(247,89,20)" fg:x="366" fg:w="1"/><text x="97.5904%" y="671.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="97.6064%" y="629" width="0.2660%" height="15" fill="rgb(248,130,54)" fg:x="367" fg:w="1"/><text x="97.8564%" y="639.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.27%)</title><rect x="97.6064%" y="613" width="0.2660%" height="15" fill="rgb(234,196,4)" fg:x="367" fg:w="1"/><text x="97.8564%" y="623.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="97.6064%" y="597" width="0.2660%" height="15" fill="rgb(250,143,31)" fg:x="367" fg:w="1"/><text x="97.8564%" y="607.50"></text></g><g><title>&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="97.6064%" y="581" width="0.2660%" height="15" fill="rgb(211,110,34)" fg:x="367" fg:w="1"/><text x="97.8564%" y="591.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.27%)</title><rect x="97.6064%" y="565" width="0.2660%" height="15" fill="rgb(215,124,48)" fg:x="367" fg:w="1"/><text x="97.8564%" y="575.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (1 samples, 0.27%)</title><rect x="97.6064%" y="549" width="0.2660%" height="15" fill="rgb(216,46,13)" fg:x="367" fg:w="1"/><text x="97.8564%" y="559.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (1 samples, 0.27%)</title><rect x="97.6064%" y="533" width="0.2660%" height="15" fill="rgb(205,184,25)" fg:x="367" fg:w="1"/><text x="97.8564%" y="543.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (1 samples, 0.27%)</title><rect x="97.6064%" y="517" width="0.2660%" height="15" fill="rgb(228,1,10)" fg:x="367" fg:w="1"/><text x="97.8564%" y="527.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (1 samples, 0.27%)</title><rect x="97.6064%" y="501" width="0.2660%" height="15" fill="rgb(213,116,27)" fg:x="367" fg:w="1"/><text x="97.8564%" y="511.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (1 samples, 0.27%)</title><rect x="97.6064%" y="485" width="0.2660%" height="15" fill="rgb(241,95,50)" fg:x="367" fg:w="1"/><text x="97.8564%" y="495.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::require_empty_read (1 samples, 0.27%)</title><rect x="97.6064%" y="469" width="0.2660%" height="15" fill="rgb(238,48,32)" fg:x="367" fg:w="1"/><text x="97.8564%" y="479.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (1 samples, 0.27%)</title><rect x="97.6064%" y="453" width="0.2660%" height="15" fill="rgb(235,113,49)" fg:x="367" fg:w="1"/><text x="97.8564%" y="463.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.27%)</title><rect x="97.6064%" y="437" width="0.2660%" height="15" fill="rgb(205,127,43)" fg:x="367" fg:w="1"/><text x="97.8564%" y="447.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.27%)</title><rect x="97.6064%" y="421" width="0.2660%" height="15" fill="rgb(250,162,2)" fg:x="367" fg:w="1"/><text x="97.8564%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.27%)</title><rect x="97.6064%" y="405" width="0.2660%" height="15" fill="rgb(220,13,41)" fg:x="367" fg:w="1"/><text x="97.8564%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.27%)</title><rect x="97.6064%" y="389" width="0.2660%" height="15" fill="rgb(249,221,25)" fg:x="367" fg:w="1"/><text x="97.8564%" y="399.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (1 samples, 0.27%)</title><rect x="97.6064%" y="373" width="0.2660%" height="15" fill="rgb(215,208,19)" fg:x="367" fg:w="1"/><text x="97.8564%" y="383.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}} (1 samples, 0.27%)</title><rect x="97.6064%" y="357" width="0.2660%" height="15" fill="rgb(236,175,2)" fg:x="367" fg:w="1"/><text x="97.8564%" y="367.50"></text></g><g><title>&lt;native_tls::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.27%)</title><rect x="97.6064%" y="341" width="0.2660%" height="15" fill="rgb(241,52,2)" fg:x="367" fg:w="1"/><text x="97.8564%" y="351.50"></text></g><g><title>&lt;native_tls::imp::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.27%)</title><rect x="97.6064%" y="325" width="0.2660%" height="15" fill="rgb(248,140,14)" fg:x="367" fg:w="1"/><text x="97.8564%" y="335.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.27%)</title><rect x="97.6064%" y="309" width="0.2660%" height="15" fill="rgb(253,22,42)" fg:x="367" fg:w="1"/><text x="97.8564%" y="319.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_read (1 samples, 0.27%)</title><rect x="97.6064%" y="293" width="0.2660%" height="15" fill="rgb(234,61,47)" fg:x="367" fg:w="1"/><text x="97.8564%" y="303.50"></text></g><g><title>SSL_read (1 samples, 0.27%)</title><rect x="97.6064%" y="277" width="0.2660%" height="15" fill="rgb(208,226,15)" fg:x="367" fg:w="1"/><text x="97.8564%" y="287.50"></text></g><g><title>[libssl.so.3.0.5] (1 samples, 0.27%)</title><rect x="97.6064%" y="261" width="0.2660%" height="15" fill="rgb(217,221,4)" fg:x="367" fg:w="1"/><text x="97.8564%" y="271.50"></text></g><g><title>BUF_MEM_free (1 samples, 0.27%)</title><rect x="97.8723%" y="101" width="0.2660%" height="15" fill="rgb(212,174,34)" fg:x="368" fg:w="1"/><text x="98.1223%" y="111.50"></text></g><g><title>__free (1 samples, 0.27%)</title><rect x="97.8723%" y="85" width="0.2660%" height="15" fill="rgb(253,83,4)" fg:x="368" fg:w="1"/><text x="98.1223%" y="95.50"></text></g><g><title>_int_free (1 samples, 0.27%)</title><rect x="97.8723%" y="69" width="0.2660%" height="15" fill="rgb(250,195,49)" fg:x="368" fg:w="1"/><text x="98.1223%" y="79.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (63 samples, 16.76%)</title><rect x="81.6489%" y="1493" width="16.7553%" height="15" fill="rgb(241,192,25)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1503.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (63 samples, 16.76%)</title><rect x="81.6489%" y="1477" width="16.7553%" height="15" fill="rgb(208,124,10)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1487.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (63 samples, 16.76%)</title><rect x="81.6489%" y="1461" width="16.7553%" height="15" fill="rgb(222,33,0)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1471.50">core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (63 samples, 16.76%)</title><rect x="81.6489%" y="1445" width="16.7553%" height="15" fill="rgb(234,209,28)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1455.50">std::thread::Builder::spaw..</text></g><g><title>std::panic::catch_unwind (63 samples, 16.76%)</title><rect x="81.6489%" y="1429" width="16.7553%" height="15" fill="rgb(224,11,23)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1439.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (63 samples, 16.76%)</title><rect x="81.6489%" y="1413" width="16.7553%" height="15" fill="rgb(232,99,1)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1423.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (63 samples, 16.76%)</title><rect x="81.6489%" y="1397" width="16.7553%" height="15" fill="rgb(237,95,45)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1407.50">std::panicking::try::do_ca..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (63 samples, 16.76%)</title><rect x="81.6489%" y="1381" width="16.7553%" height="15" fill="rgb(208,109,11)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1391.50">&lt;core::panic::unwind_safe:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (63 samples, 16.76%)</title><rect x="81.6489%" y="1365" width="16.7553%" height="15" fill="rgb(216,190,48)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1375.50">std::thread::Builder::spaw..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (63 samples, 16.76%)</title><rect x="81.6489%" y="1349" width="16.7553%" height="15" fill="rgb(251,171,36)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1359.50">std::sys_common::backtrace..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (63 samples, 16.76%)</title><rect x="81.6489%" y="1333" width="16.7553%" height="15" fill="rgb(230,62,22)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1343.50">tokio::runtime::blocking::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (63 samples, 16.76%)</title><rect x="81.6489%" y="1317" width="16.7553%" height="15" fill="rgb(225,114,35)" fg:x="307" fg:w="63"/><text x="81.8989%" y="1327.50">tokio::runtime::blocking::..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (17 samples, 4.52%)</title><rect x="93.8830%" y="1301" width="4.5213%" height="15" fill="rgb(215,118,42)" fg:x="353" fg:w="17"/><text x="94.1330%" y="1311.50">tokio..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (17 samples, 4.52%)</title><rect x="93.8830%" y="1285" width="4.5213%" height="15" fill="rgb(243,119,21)" fg:x="353" fg:w="17"/><text x="94.1330%" y="1295.50">tokio..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (17 samples, 4.52%)</title><rect x="93.8830%" y="1269" width="4.5213%" height="15" fill="rgb(252,177,53)" fg:x="353" fg:w="17"/><text x="94.1330%" y="1279.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (16 samples, 4.26%)</title><rect x="94.1489%" y="1253" width="4.2553%" height="15" fill="rgb(237,209,29)" fg:x="354" fg:w="16"/><text x="94.3989%" y="1263.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (15 samples, 3.99%)</title><rect x="94.4149%" y="1237" width="3.9894%" height="15" fill="rgb(212,65,23)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1247.50">toki..</text></g><g><title>tokio::runtime::task::harness::poll_future (15 samples, 3.99%)</title><rect x="94.4149%" y="1221" width="3.9894%" height="15" fill="rgb(230,222,46)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1231.50">toki..</text></g><g><title>std::panic::catch_unwind (15 samples, 3.99%)</title><rect x="94.4149%" y="1205" width="3.9894%" height="15" fill="rgb(215,135,32)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1215.50">std:..</text></g><g><title>std::panicking::try (15 samples, 3.99%)</title><rect x="94.4149%" y="1189" width="3.9894%" height="15" fill="rgb(246,101,22)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1199.50">std:..</text></g><g><title>std::panicking::try::do_call (15 samples, 3.99%)</title><rect x="94.4149%" y="1173" width="3.9894%" height="15" fill="rgb(206,107,13)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1183.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 3.99%)</title><rect x="94.4149%" y="1157" width="3.9894%" height="15" fill="rgb(250,100,44)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1167.50">&lt;cor..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (15 samples, 3.99%)</title><rect x="94.4149%" y="1141" width="3.9894%" height="15" fill="rgb(231,147,38)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1151.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (15 samples, 3.99%)</title><rect x="94.4149%" y="1125" width="3.9894%" height="15" fill="rgb(229,8,40)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1135.50">toki..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (15 samples, 3.99%)</title><rect x="94.4149%" y="1109" width="3.9894%" height="15" fill="rgb(221,135,30)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1119.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (15 samples, 3.99%)</title><rect x="94.4149%" y="1093" width="3.9894%" height="15" fill="rgb(249,193,18)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1103.50">toki..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 3.99%)</title><rect x="94.4149%" y="1077" width="3.9894%" height="15" fill="rgb(209,133,39)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1087.50">&lt;tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (15 samples, 3.99%)</title><rect x="94.4149%" y="1061" width="3.9894%" height="15" fill="rgb(232,100,14)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1071.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (15 samples, 3.99%)</title><rect x="94.4149%" y="1045" width="3.9894%" height="15" fill="rgb(224,185,1)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1055.50">toki..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (15 samples, 3.99%)</title><rect x="94.4149%" y="1029" width="3.9894%" height="15" fill="rgb(223,139,8)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1039.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (15 samples, 3.99%)</title><rect x="94.4149%" y="1013" width="3.9894%" height="15" fill="rgb(232,213,38)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1023.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (15 samples, 3.99%)</title><rect x="94.4149%" y="997" width="3.9894%" height="15" fill="rgb(207,94,22)" fg:x="355" fg:w="15"/><text x="94.6649%" y="1007.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3 samples, 0.80%)</title><rect x="97.6064%" y="981" width="0.7979%" height="15" fill="rgb(219,183,54)" fg:x="367" fg:w="3"/><text x="97.8564%" y="991.50"></text></g><g><title>tokio::runtime::coop::budget (3 samples, 0.80%)</title><rect x="97.6064%" y="965" width="0.7979%" height="15" fill="rgb(216,185,54)" fg:x="367" fg:w="3"/><text x="97.8564%" y="975.50"></text></g><g><title>tokio::runtime::coop::with_budget (3 samples, 0.80%)</title><rect x="97.6064%" y="949" width="0.7979%" height="15" fill="rgb(254,217,39)" fg:x="367" fg:w="3"/><text x="97.8564%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (3 samples, 0.80%)</title><rect x="97.6064%" y="933" width="0.7979%" height="15" fill="rgb(240,178,23)" fg:x="367" fg:w="3"/><text x="97.8564%" y="943.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (3 samples, 0.80%)</title><rect x="97.6064%" y="917" width="0.7979%" height="15" fill="rgb(218,11,47)" fg:x="367" fg:w="3"/><text x="97.8564%" y="927.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="901" width="0.7979%" height="15" fill="rgb(218,51,51)" fg:x="367" fg:w="3"/><text x="97.8564%" y="911.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="885" width="0.7979%" height="15" fill="rgb(238,126,27)" fg:x="367" fg:w="3"/><text x="97.8564%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3 samples, 0.80%)</title><rect x="97.6064%" y="869" width="0.7979%" height="15" fill="rgb(249,202,22)" fg:x="367" fg:w="3"/><text x="97.8564%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3 samples, 0.80%)</title><rect x="97.6064%" y="853" width="0.7979%" height="15" fill="rgb(254,195,49)" fg:x="367" fg:w="3"/><text x="97.8564%" y="863.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.80%)</title><rect x="97.6064%" y="837" width="0.7979%" height="15" fill="rgb(208,123,14)" fg:x="367" fg:w="3"/><text x="97.8564%" y="847.50"></text></g><g><title>std::panicking::try (3 samples, 0.80%)</title><rect x="97.6064%" y="821" width="0.7979%" height="15" fill="rgb(224,200,8)" fg:x="367" fg:w="3"/><text x="97.8564%" y="831.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.80%)</title><rect x="97.6064%" y="805" width="0.7979%" height="15" fill="rgb(217,61,36)" fg:x="367" fg:w="3"/><text x="97.8564%" y="815.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.80%)</title><rect x="97.6064%" y="789" width="0.7979%" height="15" fill="rgb(206,35,45)" fg:x="367" fg:w="3"/><text x="97.8564%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3 samples, 0.80%)</title><rect x="97.6064%" y="773" width="0.7979%" height="15" fill="rgb(217,65,33)" fg:x="367" fg:w="3"/><text x="97.8564%" y="783.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="757" width="0.7979%" height="15" fill="rgb(222,158,48)" fg:x="367" fg:w="3"/><text x="97.8564%" y="767.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 0.80%)</title><rect x="97.6064%" y="741" width="0.7979%" height="15" fill="rgb(254,2,54)" fg:x="367" fg:w="3"/><text x="97.8564%" y="751.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (3 samples, 0.80%)</title><rect x="97.6064%" y="725" width="0.7979%" height="15" fill="rgb(250,143,38)" fg:x="367" fg:w="3"/><text x="97.8564%" y="735.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="709" width="0.7979%" height="15" fill="rgb(248,25,0)" fg:x="367" fg:w="3"/><text x="97.8564%" y="719.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="693" width="0.7979%" height="15" fill="rgb(206,152,27)" fg:x="367" fg:w="3"/><text x="97.8564%" y="703.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="677" width="0.7979%" height="15" fill="rgb(240,77,30)" fg:x="367" fg:w="3"/><text x="97.8564%" y="687.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="661" width="0.7979%" height="15" fill="rgb(231,5,3)" fg:x="367" fg:w="3"/><text x="97.8564%" y="671.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.80%)</title><rect x="97.6064%" y="645" width="0.7979%" height="15" fill="rgb(207,226,32)" fg:x="367" fg:w="3"/><text x="97.8564%" y="655.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (2 samples, 0.53%)</title><rect x="97.8723%" y="629" width="0.5319%" height="15" fill="rgb(222,207,47)" fg:x="368" fg:w="2"/><text x="98.1223%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt;,())&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="613" width="0.5319%" height="15" fill="rgb(229,115,45)" fg:x="368" fg:w="2"/><text x="98.1223%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="597" width="0.5319%" height="15" fill="rgb(224,191,6)" fg:x="368" fg:w="2"/><text x="98.1223%" y="607.50"></text></g><g><title>&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.53%)</title><rect x="97.8723%" y="581" width="0.5319%" height="15" fill="rgb(230,227,24)" fg:x="368" fg:w="2"/><text x="98.1223%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="565" width="0.5319%" height="15" fill="rgb(228,80,19)" fg:x="368" fg:w="2"/><text x="98.1223%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="549" width="0.5319%" height="15" fill="rgb(247,229,0)" fg:x="368" fg:w="2"/><text x="98.1223%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;hyper::client::conn::ProtoClient&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="533" width="0.5319%" height="15" fill="rgb(237,194,15)" fg:x="368" fg:w="2"/><text x="98.1223%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::ProtoClient&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="517" width="0.5319%" height="15" fill="rgb(219,203,20)" fg:x="368" fg:w="2"/><text x="98.1223%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::dispatch::Dispatcher&lt;hyper::proto::h1::dispatch::Client&lt;reqwest::async_impl::body::ImplStream&gt;,reqwest::async_impl::body::ImplStream,reqwest::connect::Conn,hyper::proto::h1::role::Client&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="501" width="0.5319%" height="15" fill="rgb(234,128,8)" fg:x="368" fg:w="2"/><text x="98.1223%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::conn::Conn&lt;reqwest::connect::Conn,bytes::bytes::Bytes,hyper::proto::h1::role::Client&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="485" width="0.5319%" height="15" fill="rgb(248,202,8)" fg:x="368" fg:w="2"/><text x="98.1223%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::io::Buffered&lt;reqwest::connect::Conn,hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="469" width="0.5319%" height="15" fill="rgb(206,104,37)" fg:x="368" fg:w="2"/><text x="98.1223%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::Conn&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="453" width="0.5319%" height="15" fill="rgb(223,8,27)" fg:x="368" fg:w="2"/><text x="98.1223%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn reqwest::connect::AsyncConn&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="437" width="0.5319%" height="15" fill="rgb(216,217,28)" fg:x="368" fg:w="2"/><text x="98.1223%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="421" width="0.5319%" height="15" fill="rgb(249,199,1)" fg:x="368" fg:w="2"/><text x="98.1223%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_native_tls::TlsStream&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="405" width="0.5319%" height="15" fill="rgb(240,85,17)" fg:x="368" fg:w="2"/><text x="98.1223%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;native_tls::TlsStream&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="389" width="0.5319%" height="15" fill="rgb(206,108,45)" fg:x="368" fg:w="2"/><text x="98.1223%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;native_tls::imp::TlsStream&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="373" width="0.5319%" height="15" fill="rgb(245,210,41)" fg:x="368" fg:w="2"/><text x="98.1223%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;openssl::ssl::SslStream&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="357" width="0.5319%" height="15" fill="rgb(206,13,37)" fg:x="368" fg:w="2"/><text x="98.1223%" y="367.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.53%)</title><rect x="97.8723%" y="341" width="0.5319%" height="15" fill="rgb(250,61,18)" fg:x="368" fg:w="2"/><text x="98.1223%" y="351.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (2 samples, 0.53%)</title><rect x="97.8723%" y="325" width="0.5319%" height="15" fill="rgb(235,172,48)" fg:x="368" fg:w="2"/><text x="98.1223%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;openssl::ssl::Ssl&gt; (2 samples, 0.53%)</title><rect x="97.8723%" y="309" width="0.5319%" height="15" fill="rgb(249,201,17)" fg:x="368" fg:w="2"/><text x="98.1223%" y="319.50"></text></g><g><title>&lt;openssl::ssl::Ssl as core::ops::drop::Drop&gt;::drop (2 samples, 0.53%)</title><rect x="97.8723%" y="293" width="0.5319%" height="15" fill="rgb(219,208,6)" fg:x="368" fg:w="2"/><text x="98.1223%" y="303.50"></text></g><g><title>SSL_free (2 samples, 0.53%)</title><rect x="97.8723%" y="277" width="0.5319%" height="15" fill="rgb(248,31,23)" fg:x="368" fg:w="2"/><text x="98.1223%" y="287.50"></text></g><g><title>SSL_CTX_free (2 samples, 0.53%)</title><rect x="97.8723%" y="261" width="0.5319%" height="15" fill="rgb(245,15,42)" fg:x="368" fg:w="2"/><text x="98.1223%" y="271.50"></text></g><g><title>X509_STORE_free (2 samples, 0.53%)</title><rect x="97.8723%" y="245" width="0.5319%" height="15" fill="rgb(222,217,39)" fg:x="368" fg:w="2"/><text x="98.1223%" y="255.50"></text></g><g><title>OPENSSL_sk_pop_free (2 samples, 0.53%)</title><rect x="97.8723%" y="229" width="0.5319%" height="15" fill="rgb(210,219,27)" fg:x="368" fg:w="2"/><text x="98.1223%" y="239.50"></text></g><g><title>X509_OBJECT_free (2 samples, 0.53%)</title><rect x="97.8723%" y="213" width="0.5319%" height="15" fill="rgb(252,166,36)" fg:x="368" fg:w="2"/><text x="98.1223%" y="223.50"></text></g><g><title>ASN1_item_free (2 samples, 0.53%)</title><rect x="97.8723%" y="197" width="0.5319%" height="15" fill="rgb(245,132,34)" fg:x="368" fg:w="2"/><text x="98.1223%" y="207.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="97.8723%" y="181" width="0.5319%" height="15" fill="rgb(236,54,3)" fg:x="368" fg:w="2"/><text x="98.1223%" y="191.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="97.8723%" y="165" width="0.5319%" height="15" fill="rgb(241,173,43)" fg:x="368" fg:w="2"/><text x="98.1223%" y="175.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="97.8723%" y="149" width="0.5319%" height="15" fill="rgb(215,190,9)" fg:x="368" fg:w="2"/><text x="98.1223%" y="159.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="97.8723%" y="133" width="0.5319%" height="15" fill="rgb(242,101,16)" fg:x="368" fg:w="2"/><text x="98.1223%" y="143.50"></text></g><g><title>[libcrypto.so.3.0.5] (2 samples, 0.53%)</title><rect x="97.8723%" y="117" width="0.5319%" height="15" fill="rgb(223,190,21)" fg:x="368" fg:w="2"/><text x="98.1223%" y="127.50"></text></g><g><title>EVP_PKEY_free (1 samples, 0.27%)</title><rect x="98.1383%" y="101" width="0.2660%" height="15" fill="rgb(215,228,25)" fg:x="369" fg:w="1"/><text x="98.3883%" y="111.50"></text></g><g><title>[libcrypto.so.3.0.5] (1 samples, 0.27%)</title><rect x="98.1383%" y="85" width="0.2660%" height="15" fill="rgb(225,36,22)" fg:x="369" fg:w="1"/><text x="98.3883%" y="95.50"></text></g><g><title>RSA_free (1 samples, 0.27%)</title><rect x="98.1383%" y="69" width="0.2660%" height="15" fill="rgb(251,106,46)" fg:x="369" fg:w="1"/><text x="98.3883%" y="79.50"></text></g><g><title>BN_free (1 samples, 0.27%)</title><rect x="98.1383%" y="53" width="0.2660%" height="15" fill="rgb(208,90,1)" fg:x="369" fg:w="1"/><text x="98.3883%" y="63.50"></text></g><g><title>__free (1 samples, 0.27%)</title><rect x="98.1383%" y="37" width="0.2660%" height="15" fill="rgb(243,10,4)" fg:x="369" fg:w="1"/><text x="98.3883%" y="47.50"></text></g><g><title>__clone3 (82 samples, 21.81%)</title><rect x="77.9255%" y="1541" width="21.8085%" height="15" fill="rgb(212,137,27)" fg:x="293" fg:w="82"/><text x="78.1755%" y="1551.50">__clone3</text></g><g><title>start_thread (72 samples, 19.15%)</title><rect x="80.5851%" y="1525" width="19.1489%" height="15" fill="rgb(231,220,49)" fg:x="303" fg:w="72"/><text x="80.8351%" y="1535.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (68 samples, 18.09%)</title><rect x="81.6489%" y="1509" width="18.0851%" height="15" fill="rgb(237,96,20)" fg:x="307" fg:w="68"/><text x="81.8989%" y="1519.50">std::sys::unix::thread::Thre..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (5 samples, 1.33%)</title><rect x="98.4043%" y="1493" width="1.3298%" height="15" fill="rgb(239,229,30)" fg:x="370" fg:w="5"/><text x="98.6543%" y="1503.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (5 samples, 1.33%)</title><rect x="98.4043%" y="1477" width="1.3298%" height="15" fill="rgb(219,65,33)" fg:x="370" fg:w="5"/><text x="98.6543%" y="1487.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (5 samples, 1.33%)</title><rect x="98.4043%" y="1461" width="1.3298%" height="15" fill="rgb(243,134,7)" fg:x="370" fg:w="5"/><text x="98.6543%" y="1471.50"></text></g><g><title>__GI___munmap (5 samples, 1.33%)</title><rect x="98.4043%" y="1445" width="1.3298%" height="15" fill="rgb(216,177,54)" fg:x="370" fg:w="5"/><text x="98.6543%" y="1455.50"></text></g><g><title>all (376 samples, 100%)</title><rect x="0.0000%" y="1573" width="100.0000%" height="15" fill="rgb(211,160,20)" fg:x="0" fg:w="376"/><text x="0.2500%" y="1583.50"></text></g><g><title>tokio-runtime-w (85 samples, 22.61%)</title><rect x="77.3936%" y="1557" width="22.6064%" height="15" fill="rgb(239,85,39)" fg:x="291" fg:w="85"/><text x="77.6436%" y="1567.50">tokio-runtime-w</text></g><g><title>trust_dns_proto::serialize::binary::encoder::BinEncoder::emit_character_data (1 samples, 0.27%)</title><rect x="99.7340%" y="1541" width="0.2660%" height="15" fill="rgb(232,125,22)" fg:x="375" fg:w="1"/><text x="99.9840%" y="1551.50"></text></g></svg></svg>