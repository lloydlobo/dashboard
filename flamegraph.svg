<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1654" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1637.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1637.00"> </text><svg id="frames" x="10" width="1180" total_samples="531"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.19%)</title><rect x="0.0000%" y="1573" width="0.1883%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1583.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.19%)</title><rect x="0.0000%" y="1557" width="0.1883%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1567.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.19%)</title><rect x="0.0000%" y="1541" width="0.1883%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="0.0000%" y="1525" width="0.1883%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="0.0000%" y="1509" width="0.1883%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.19%)</title><rect x="0.0000%" y="1493" width="0.1883%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="0.0000%" y="1477" width="0.1883%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1487.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.19%)</title><rect x="0.1883%" y="1573" width="0.1883%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.4383%" y="1583.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_key (1 samples, 0.19%)</title><rect x="0.3766%" y="1557" width="0.1883%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1567.50"></text></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.19%)</title><rect x="0.3766%" y="1541" width="0.1883%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1551.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.19%)</title><rect x="0.3766%" y="1525" width="0.1883%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1535.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.19%)</title><rect x="0.3766%" y="1509" width="0.1883%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1519.50"></text></g><g><title>&lt;octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::Repository&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.19%)</title><rect x="0.3766%" y="1493" width="0.1883%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1503.50"></text></g><g><title>&lt;serde_json::value::de::MapKeyDeserializer as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.19%)</title><rect x="0.3766%" y="1477" width="0.1883%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1487.50"></text></g><g><title>&lt;serde_json::value::de::MapKeyDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.19%)</title><rect x="0.3766%" y="1461" width="0.1883%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1471.50"></text></g><g><title>&lt;serde_json::value::de::BorrowedCowStrDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.19%)</title><rect x="0.3766%" y="1445" width="0.1883%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1455.50"></text></g><g><title>serde::de::Visitor::visit_string (1 samples, 0.19%)</title><rect x="0.3766%" y="1429" width="0.1883%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1439.50"></text></g><g><title>&lt;octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::Repository&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.19%)</title><rect x="0.3766%" y="1413" width="0.1883%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1423.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.19%)</title><rect x="0.3766%" y="1397" width="0.1883%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1407.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.19%)</title><rect x="0.3766%" y="1381" width="0.1883%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1391.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.19%)</title><rect x="0.3766%" y="1365" width="0.1883%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1375.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.19%)</title><rect x="0.3766%" y="1349" width="0.1883%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.6266%" y="1359.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend (1 samples, 0.19%)</title><rect x="0.5650%" y="1253" width="0.1883%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.8150%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.19%)</title><rect x="0.5650%" y="1237" width="0.1883%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.8150%" y="1247.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.19%)</title><rect x="0.5650%" y="1221" width="0.1883%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.8150%" y="1231.50"></text></g><g><title>&lt;percent_encoding::PercentEncode as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.19%)</title><rect x="0.5650%" y="1205" width="0.1883%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.8150%" y="1215.50"></text></g><g><title>url::parser::Parser::after_double_slash (2 samples, 0.38%)</title><rect x="0.5650%" y="1301" width="0.3766%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.8150%" y="1311.50"></text></g><g><title>url::parser::Parser::parse_path_start (2 samples, 0.38%)</title><rect x="0.5650%" y="1285" width="0.3766%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="0.8150%" y="1295.50"></text></g><g><title>url::parser::Parser::parse_path (2 samples, 0.38%)</title><rect x="0.5650%" y="1269" width="0.3766%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="2"/><text x="0.8150%" y="1279.50"></text></g><g><title>url::parser::Input::next_utf8 (1 samples, 0.19%)</title><rect x="0.7533%" y="1253" width="0.1883%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="1.0033%" y="1263.50"></text></g><g><title>core::str::iter::Chars::as_str (1 samples, 0.19%)</title><rect x="0.7533%" y="1237" width="0.1883%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="1"/><text x="1.0033%" y="1247.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.19%)</title><rect x="0.7533%" y="1221" width="0.1883%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="1.0033%" y="1231.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.19%)</title><rect x="0.7533%" y="1205" width="0.1883%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="1.0033%" y="1215.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.19%)</title><rect x="0.7533%" y="1189" width="0.1883%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="1.0033%" y="1199.50"></text></g><g><title>&lt;url::Url as serde::de::Deserialize&gt;::deserialize (3 samples, 0.56%)</title><rect x="0.5650%" y="1445" width="0.5650%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1455.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_str (3 samples, 0.56%)</title><rect x="0.5650%" y="1429" width="0.5650%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1439.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (3 samples, 0.56%)</title><rect x="0.5650%" y="1413" width="0.5650%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1423.50"></text></g><g><title>serde::de::Visitor::visit_string (3 samples, 0.56%)</title><rect x="0.5650%" y="1397" width="0.5650%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1407.50"></text></g><g><title>&lt;&lt;url::Url as serde::de::Deserialize&gt;::deserialize::UrlVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.56%)</title><rect x="0.5650%" y="1381" width="0.5650%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1391.50"></text></g><g><title>url::Url::parse (3 samples, 0.56%)</title><rect x="0.5650%" y="1365" width="0.5650%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1375.50"></text></g><g><title>url::ParseOptions::parse (3 samples, 0.56%)</title><rect x="0.5650%" y="1349" width="0.5650%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1359.50"></text></g><g><title>url::parser::Parser::parse_url (3 samples, 0.56%)</title><rect x="0.5650%" y="1333" width="0.5650%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1343.50"></text></g><g><title>url::parser::Parser::parse_with_scheme (3 samples, 0.56%)</title><rect x="0.5650%" y="1317" width="0.5650%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="3"/><text x="0.8150%" y="1327.50"></text></g><g><title>url::parser::Parser::parse_non_special (1 samples, 0.19%)</title><rect x="0.9416%" y="1301" width="0.1883%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1311.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.19%)</title><rect x="0.9416%" y="1285" width="0.1883%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1295.50"></text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 0.19%)</title><rect x="0.9416%" y="1269" width="0.1883%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1279.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.19%)</title><rect x="0.9416%" y="1253" width="0.1883%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1263.50"></text></g><g><title>url::parser::Input::next_utf8 (1 samples, 0.19%)</title><rect x="0.9416%" y="1237" width="0.1883%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1247.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.19%)</title><rect x="0.9416%" y="1221" width="0.1883%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1231.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (1 samples, 0.19%)</title><rect x="0.9416%" y="1205" width="0.1883%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1215.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (1 samples, 0.19%)</title><rect x="0.9416%" y="1189" width="0.1883%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="1"/><text x="1.1916%" y="1199.50"></text></g><g><title>chrono::datetime::serde::&lt;impl serde::de::Deserialize for chrono::datetime::DateTime&lt;chrono::offset::utc::Utc&gt;&gt;::deserialize (1 samples, 0.19%)</title><rect x="1.1299%" y="1445" width="0.1883%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1455.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_str (1 samples, 0.19%)</title><rect x="1.1299%" y="1429" width="0.1883%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1439.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.19%)</title><rect x="1.1299%" y="1413" width="0.1883%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1423.50"></text></g><g><title>serde::de::Visitor::visit_string (1 samples, 0.19%)</title><rect x="1.1299%" y="1397" width="0.1883%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1407.50"></text></g><g><title>&lt;chrono::datetime::serde::DateTimeVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.19%)</title><rect x="1.1299%" y="1381" width="0.1883%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1391.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1 samples, 0.19%)</title><rect x="1.1299%" y="1365" width="0.1883%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1375.50"></text></g><g><title>chrono::format::parse::&lt;impl core::str::traits::FromStr for chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt;&gt;::from_str (1 samples, 0.19%)</title><rect x="1.1299%" y="1349" width="0.1883%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1359.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime (1 samples, 0.19%)</title><rect x="1.1299%" y="1333" width="0.1883%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1343.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (1 samples, 0.19%)</title><rect x="1.1299%" y="1317" width="0.1883%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1327.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (1 samples, 0.19%)</title><rect x="1.1299%" y="1301" width="0.1883%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1311.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (1 samples, 0.19%)</title><rect x="1.1299%" y="1285" width="0.1883%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1295.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (1 samples, 0.19%)</title><rect x="1.1299%" y="1269" width="0.1883%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1279.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (1 samples, 0.19%)</title><rect x="1.1299%" y="1253" width="0.1883%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1263.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;chrono::oldtime::Duration&gt;&gt;::add (1 samples, 0.19%)</title><rect x="1.1299%" y="1237" width="0.1883%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1247.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (1 samples, 0.19%)</title><rect x="1.1299%" y="1221" width="0.1883%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1231.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (1 samples, 0.19%)</title><rect x="1.1299%" y="1205" width="0.1883%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1215.50"></text></g><g><title>chrono::naive::internals::Of::new (1 samples, 0.19%)</title><rect x="1.1299%" y="1189" width="0.1883%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="1.3799%" y="1199.50"></text></g><g><title>&lt;octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::Repository&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 1.13%)</title><rect x="0.3766%" y="1573" width="1.1299%" height="15" fill="rgb(246,177,23)" fg:x="2" fg:w="6"/><text x="0.6266%" y="1583.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (5 samples, 0.94%)</title><rect x="0.5650%" y="1557" width="0.9416%" height="15" fill="rgb(230,62,27)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1567.50"></text></g><g><title>serde::de::MapAccess::next_value (5 samples, 0.94%)</title><rect x="0.5650%" y="1541" width="0.9416%" height="15" fill="rgb(216,154,8)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1551.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.94%)</title><rect x="0.5650%" y="1525" width="0.9416%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1535.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.94%)</title><rect x="0.5650%" y="1509" width="0.9416%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1519.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (5 samples, 0.94%)</title><rect x="0.5650%" y="1493" width="0.9416%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1503.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_option (5 samples, 0.94%)</title><rect x="0.5650%" y="1477" width="0.9416%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1487.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (5 samples, 0.94%)</title><rect x="0.5650%" y="1461" width="0.9416%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="5"/><text x="0.8150%" y="1471.50"></text></g><g><title>octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::User&gt;::deserialize (1 samples, 0.19%)</title><rect x="1.3183%" y="1445" width="0.1883%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1455.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.19%)</title><rect x="1.3183%" y="1429" width="0.1883%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1439.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.19%)</title><rect x="1.3183%" y="1413" width="0.1883%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1423.50"></text></g><g><title>&lt;octocrab::models::_::&lt;impl serde::de::Deserialize for octocrab::models::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.19%)</title><rect x="1.3183%" y="1397" width="0.1883%" height="15" fill="rgb(242,79,21)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1407.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (1 samples, 0.19%)</title><rect x="1.3183%" y="1381" width="0.1883%" height="15" fill="rgb(211,96,35)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1391.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.19%)</title><rect x="1.3183%" y="1365" width="0.1883%" height="15" fill="rgb(253,215,40)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1375.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.19%)</title><rect x="1.3183%" y="1349" width="0.1883%" height="15" fill="rgb(211,81,21)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1359.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.19%)</title><rect x="1.3183%" y="1333" width="0.1883%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1343.50"></text></g><g><title>&lt;url::Url as serde::de::Deserialize&gt;::deserialize (1 samples, 0.19%)</title><rect x="1.3183%" y="1317" width="0.1883%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1327.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_str (1 samples, 0.19%)</title><rect x="1.3183%" y="1301" width="0.1883%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1311.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.19%)</title><rect x="1.3183%" y="1285" width="0.1883%" height="15" fill="rgb(244,218,35)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1295.50"></text></g><g><title>serde::de::Visitor::visit_string (1 samples, 0.19%)</title><rect x="1.3183%" y="1269" width="0.1883%" height="15" fill="rgb(240,68,47)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1279.50"></text></g><g><title>&lt;&lt;url::Url as serde::de::Deserialize&gt;::deserialize::UrlVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.19%)</title><rect x="1.3183%" y="1253" width="0.1883%" height="15" fill="rgb(210,16,53)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1263.50"></text></g><g><title>url::Url::parse (1 samples, 0.19%)</title><rect x="1.3183%" y="1237" width="0.1883%" height="15" fill="rgb(235,124,12)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1247.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 0.19%)</title><rect x="1.3183%" y="1221" width="0.1883%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1231.50"></text></g><g><title>url::parser::Parser::parse_url (1 samples, 0.19%)</title><rect x="1.3183%" y="1205" width="0.1883%" height="15" fill="rgb(250,166,2)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1215.50"></text></g><g><title>url::parser::Parser::parse_with_scheme (1 samples, 0.19%)</title><rect x="1.3183%" y="1189" width="0.1883%" height="15" fill="rgb(242,216,29)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1199.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.19%)</title><rect x="1.3183%" y="1173" width="0.1883%" height="15" fill="rgb(230,116,27)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1183.50"></text></g><g><title>url::parser::Parser::parse_host_and_port (1 samples, 0.19%)</title><rect x="1.3183%" y="1157" width="0.1883%" height="15" fill="rgb(228,99,48)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1167.50"></text></g><g><title>url::parser::Parser::parse_host (1 samples, 0.19%)</title><rect x="1.3183%" y="1141" width="0.1883%" height="15" fill="rgb(253,11,6)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1151.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.19%)</title><rect x="1.3183%" y="1125" width="0.1883%" height="15" fill="rgb(247,143,39)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1135.50"></text></g><g><title>url::host::Host::domain_to_ascii (1 samples, 0.19%)</title><rect x="1.3183%" y="1109" width="0.1883%" height="15" fill="rgb(236,97,10)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1119.50"></text></g><g><title>idna::domain_to_ascii (1 samples, 0.19%)</title><rect x="1.3183%" y="1093" width="0.1883%" height="15" fill="rgb(233,208,19)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1103.50"></text></g><g><title>idna::uts46::Config::to_ascii (1 samples, 0.19%)</title><rect x="1.3183%" y="1077" width="0.1883%" height="15" fill="rgb(216,164,2)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1087.50"></text></g><g><title>idna::uts46::Idna::to_ascii (1 samples, 0.19%)</title><rect x="1.3183%" y="1061" width="0.1883%" height="15" fill="rgb(220,129,5)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1071.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.19%)</title><rect x="1.3183%" y="1045" width="0.1883%" height="15" fill="rgb(242,17,10)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="1.3183%" y="1029" width="0.1883%" height="15" fill="rgb(242,107,0)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="1.3183%" y="1013" width="0.1883%" height="15" fill="rgb(251,28,31)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.19%)</title><rect x="1.3183%" y="997" width="0.1883%" height="15" fill="rgb(233,223,10)" fg:x="7" fg:w="1"/><text x="1.5683%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="1.3183%" y="981" width="0.1883%" height="15" fill="rgb(215,21,27)" fg:x="7" fg:w="1"/><text x="1.5683%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="1.3183%" y="965" width="0.1883%" height="15" fill="rgb(232,23,21)" fg:x="7" fg:w="1"/><text x="1.5683%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.19%)</title><rect x="1.3183%" y="949" width="0.1883%" height="15" fill="rgb(244,5,23)" fg:x="7" fg:w="1"/><text x="1.5683%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="1.3183%" y="933" width="0.1883%" height="15" fill="rgb(226,81,46)" fg:x="7" fg:w="1"/><text x="1.5683%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="1.3183%" y="917" width="0.1883%" height="15" fill="rgb(247,70,30)" fg:x="7" fg:w="1"/><text x="1.5683%" y="927.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="1.3183%" y="901" width="0.1883%" height="15" fill="rgb(212,68,19)" fg:x="7" fg:w="1"/><text x="1.5683%" y="911.50"></text></g><g><title>&lt;octocrab::page::Page&lt;T&gt; as octocrab::from_response::FromResponse&gt;::from_response::{{closure}} (1 samples, 0.19%)</title><rect x="1.5066%" y="1573" width="0.1883%" height="15" fill="rgb(240,187,13)" fg:x="8" fg:w="1"/><text x="1.7566%" y="1583.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1573" width="0.1883%" height="15" fill="rgb(223,113,26)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1583.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1557" width="0.1883%" height="15" fill="rgb(206,192,2)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1567.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1541" width="0.1883%" height="15" fill="rgb(241,108,4)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1551.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1525" width="0.1883%" height="15" fill="rgb(247,173,49)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1535.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::connection_for::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1509" width="0.1883%" height="15" fill="rgb(224,114,35)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1519.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1493" width="0.1883%" height="15" fill="rgb(245,159,27)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1503.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1 samples, 0.19%)</title><rect x="1.6949%" y="1477" width="0.1883%" height="15" fill="rgb(245,172,44)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1487.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1461" width="0.1883%" height="15" fill="rgb(236,23,11)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1471.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1445" width="0.1883%" height="15" fill="rgb(205,117,38)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1455.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1429" width="0.1883%" height="15" fill="rgb(237,72,25)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1439.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1413" width="0.1883%" height="15" fill="rgb(244,70,9)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1423.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1397" width="0.1883%" height="15" fill="rgb(217,125,39)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1407.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1381" width="0.1883%" height="15" fill="rgb(235,36,10)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1391.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1365" width="0.1883%" height="15" fill="rgb(251,123,47)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1375.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1349" width="0.1883%" height="15" fill="rgb(221,13,13)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1359.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1333" width="0.1883%" height="15" fill="rgb(238,131,9)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1343.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1317" width="0.1883%" height="15" fill="rgb(211,50,8)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1327.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1301" width="0.1883%" height="15" fill="rgb(245,182,24)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1311.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1285" width="0.1883%" height="15" fill="rgb(242,14,37)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1295.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1269" width="0.1883%" height="15" fill="rgb(246,228,12)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1279.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1253" width="0.1883%" height="15" fill="rgb(213,55,15)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1263.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1237" width="0.1883%" height="15" fill="rgb(209,9,3)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1247.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1221" width="0.1883%" height="15" fill="rgb(230,59,30)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1231.50"></text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1205" width="0.1883%" height="15" fill="rgb(209,121,21)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1215.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnecting&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1189" width="0.1883%" height="15" fill="rgb(220,109,13)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1199.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1173" width="0.1883%" height="15" fill="rgb(232,18,1)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1183.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1157" width="0.1883%" height="15" fill="rgb(215,41,42)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1167.50"></text></g><g><title>tokio_native_tls::TlsConnector::connect::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1141" width="0.1883%" height="15" fill="rgb(224,123,36)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1151.50"></text></g><g><title>tokio_native_tls::handshake::{{closure}} (1 samples, 0.19%)</title><rect x="1.6949%" y="1125" width="0.1883%" height="15" fill="rgb(240,125,3)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1135.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="1.6949%" y="1109" width="0.1883%" height="15" fill="rgb(205,98,50)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1119.50"></text></g><g><title>native_tls::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.19%)</title><rect x="1.6949%" y="1093" width="0.1883%" height="15" fill="rgb(205,185,37)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1103.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.19%)</title><rect x="1.6949%" y="1077" width="0.1883%" height="15" fill="rgb(238,207,15)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1087.50"></text></g><g><title>openssl::ssl::MidHandshakeSslStream&lt;S&gt;::handshake (1 samples, 0.19%)</title><rect x="1.6949%" y="1061" width="0.1883%" height="15" fill="rgb(213,199,42)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1071.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::do_handshake (1 samples, 0.19%)</title><rect x="1.6949%" y="1045" width="0.1883%" height="15" fill="rgb(235,201,11)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1055.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="1029" width="0.1883%" height="15" fill="rgb(207,46,11)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1039.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="1013" width="0.1883%" height="15" fill="rgb(241,35,35)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1023.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="997" width="0.1883%" height="15" fill="rgb(243,32,47)" fg:x="9" fg:w="1"/><text x="1.9449%" y="1007.50"></text></g><g><title>X509_verify_cert (1 samples, 0.19%)</title><rect x="1.6949%" y="981" width="0.1883%" height="15" fill="rgb(247,202,23)" fg:x="9" fg:w="1"/><text x="1.9449%" y="991.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="965" width="0.1883%" height="15" fill="rgb(219,102,11)" fg:x="9" fg:w="1"/><text x="1.9449%" y="975.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="949" width="0.1883%" height="15" fill="rgb(243,110,44)" fg:x="9" fg:w="1"/><text x="1.9449%" y="959.50"></text></g><g><title>X509_verify (1 samples, 0.19%)</title><rect x="1.6949%" y="933" width="0.1883%" height="15" fill="rgb(222,74,54)" fg:x="9" fg:w="1"/><text x="1.9449%" y="943.50"></text></g><g><title>ASN1_item_verify_ex (1 samples, 0.19%)</title><rect x="1.6949%" y="917" width="0.1883%" height="15" fill="rgb(216,99,12)" fg:x="9" fg:w="1"/><text x="1.9449%" y="927.50"></text></g><g><title>ASN1_item_verify_ctx (1 samples, 0.19%)</title><rect x="1.6949%" y="901" width="0.1883%" height="15" fill="rgb(226,22,26)" fg:x="9" fg:w="1"/><text x="1.9449%" y="911.50"></text></g><g><title>EVP_DigestVerifyFinal (1 samples, 0.19%)</title><rect x="1.6949%" y="885" width="0.1883%" height="15" fill="rgb(217,163,10)" fg:x="9" fg:w="1"/><text x="1.9449%" y="895.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="869" width="0.1883%" height="15" fill="rgb(213,25,53)" fg:x="9" fg:w="1"/><text x="1.9449%" y="879.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="853" width="0.1883%" height="15" fill="rgb(252,105,26)" fg:x="9" fg:w="1"/><text x="1.9449%" y="863.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="837" width="0.1883%" height="15" fill="rgb(220,39,43)" fg:x="9" fg:w="1"/><text x="1.9449%" y="847.50"></text></g><g><title>EC_POINT_mul (1 samples, 0.19%)</title><rect x="1.6949%" y="821" width="0.1883%" height="15" fill="rgb(229,68,48)" fg:x="9" fg:w="1"/><text x="1.9449%" y="831.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="805" width="0.1883%" height="15" fill="rgb(252,8,32)" fg:x="9" fg:w="1"/><text x="1.9449%" y="815.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="1.6949%" y="789" width="0.1883%" height="15" fill="rgb(223,20,43)" fg:x="9" fg:w="1"/><text x="1.9449%" y="799.50"></text></g><g><title>BN_copy (1 samples, 0.19%)</title><rect x="1.6949%" y="773" width="0.1883%" height="15" fill="rgb(229,81,49)" fg:x="9" fg:w="1"/><text x="1.9449%" y="783.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.19%)</title><rect x="1.8832%" y="1573" width="0.1883%" height="15" fill="rgb(236,28,36)" fg:x="10" fg:w="1"/><text x="2.1332%" y="1583.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.19%)</title><rect x="2.0716%" y="1573" width="0.1883%" height="15" fill="rgb(249,185,26)" fg:x="11" fg:w="1"/><text x="2.3216%" y="1583.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.19%)</title><rect x="2.2599%" y="1573" width="0.1883%" height="15" fill="rgb(249,174,33)" fg:x="12" fg:w="1"/><text x="2.5099%" y="1583.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="2.4482%" y="1573" width="0.1883%" height="15" fill="rgb(233,201,37)" fg:x="13" fg:w="1"/><text x="2.6982%" y="1583.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="2.6365%" y="1557" width="0.1883%" height="15" fill="rgb(221,78,26)" fg:x="14" fg:w="1"/><text x="2.8865%" y="1567.50"></text></g><g><title>CRYPTO_strndup (1 samples, 0.19%)</title><rect x="2.8249%" y="1557" width="0.1883%" height="15" fill="rgb(250,127,30)" fg:x="15" fg:w="1"/><text x="3.0749%" y="1567.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="3.0132%" y="1557" width="0.1883%" height="15" fill="rgb(230,49,44)" fg:x="16" fg:w="1"/><text x="3.2632%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="3.2015%" y="1557" width="0.1883%" height="15" fill="rgb(229,67,23)" fg:x="17" fg:w="1"/><text x="3.4515%" y="1567.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="3.2015%" y="1541" width="0.1883%" height="15" fill="rgb(249,83,47)" fg:x="17" fg:w="1"/><text x="3.4515%" y="1551.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.19%)</title><rect x="3.3898%" y="1557" width="0.1883%" height="15" fill="rgb(215,43,3)" fg:x="18" fg:w="1"/><text x="3.6398%" y="1567.50"></text></g><g><title>[unknown] (6 samples, 1.13%)</title><rect x="2.6365%" y="1573" width="1.1299%" height="15" fill="rgb(238,154,13)" fg:x="14" fg:w="6"/><text x="2.8865%" y="1583.50"></text></g><g><title>tokio::runtime::context::with_defer (1 samples, 0.19%)</title><rect x="3.5782%" y="1557" width="0.1883%" height="15" fill="rgb(219,56,2)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.19%)</title><rect x="3.5782%" y="1541" width="0.1883%" height="15" fill="rgb(233,0,4)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.19%)</title><rect x="3.5782%" y="1525" width="0.1883%" height="15" fill="rgb(235,30,7)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1535.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (1 samples, 0.19%)</title><rect x="3.5782%" y="1509" width="0.1883%" height="15" fill="rgb(250,79,13)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1519.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.19%)</title><rect x="3.5782%" y="1493" width="0.1883%" height="15" fill="rgb(211,146,34)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1503.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.19%)</title><rect x="3.5782%" y="1477" width="0.1883%" height="15" fill="rgb(228,22,38)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1487.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.19%)</title><rect x="3.5782%" y="1461" width="0.1883%" height="15" fill="rgb(235,168,5)" fg:x="19" fg:w="1"/><text x="3.8282%" y="1471.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.19%)</title><rect x="3.7665%" y="1573" width="0.1883%" height="15" fill="rgb(221,155,16)" fg:x="20" fg:w="1"/><text x="4.0165%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.19%)</title><rect x="5.0847%" y="1285" width="0.1883%" height="15" fill="rgb(215,215,53)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.19%)</title><rect x="5.0847%" y="1269" width="0.1883%" height="15" fill="rgb(223,4,10)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.19%)</title><rect x="5.0847%" y="1253" width="0.1883%" height="15" fill="rgb(234,103,6)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.19%)</title><rect x="5.0847%" y="1237" width="0.1883%" height="15" fill="rgb(227,97,0)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="5.0847%" y="1221" width="0.1883%" height="15" fill="rgb(234,150,53)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.19%)</title><rect x="5.0847%" y="1205" width="0.1883%" height="15" fill="rgb(228,201,54)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.19%)</title><rect x="5.0847%" y="1189" width="0.1883%" height="15" fill="rgb(222,22,37)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.19%)</title><rect x="5.0847%" y="1173" width="0.1883%" height="15" fill="rgb(237,53,32)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.19%)</title><rect x="5.0847%" y="1157" width="0.1883%" height="15" fill="rgb(233,25,53)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1167.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.19%)</title><rect x="5.0847%" y="1141" width="0.1883%" height="15" fill="rgb(210,40,34)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1151.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.19%)</title><rect x="5.0847%" y="1125" width="0.1883%" height="15" fill="rgb(241,220,44)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1135.50"></text></g><g><title>dashboard::gh::GitRepoListItem::new (1 samples, 0.19%)</title><rect x="5.0847%" y="1109" width="0.1883%" height="15" fill="rgb(235,28,35)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1119.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="5.0847%" y="1093" width="0.1883%" height="15" fill="rgb(210,56,17)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="5.0847%" y="1077" width="0.1883%" height="15" fill="rgb(224,130,29)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="5.0847%" y="1061" width="0.1883%" height="15" fill="rgb(235,212,8)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="5.0847%" y="1045" width="0.1883%" height="15" fill="rgb(223,33,50)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="5.0847%" y="1029" width="0.1883%" height="15" fill="rgb(219,149,13)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1039.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.19%)</title><rect x="5.0847%" y="1013" width="0.1883%" height="15" fill="rgb(250,156,29)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="5.0847%" y="997" width="0.1883%" height="15" fill="rgb(216,193,19)" fg:x="27" fg:w="1"/><text x="5.3347%" y="1007.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="5.0847%" y="981" width="0.1883%" height="15" fill="rgb(216,135,14)" fg:x="27" fg:w="1"/><text x="5.3347%" y="991.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.19%)</title><rect x="5.2731%" y="1269" width="0.1883%" height="15" fill="rgb(241,47,5)" fg:x="28" fg:w="1"/><text x="5.5231%" y="1279.50"></text></g><g><title>std::io::default_read_to_string (1 samples, 0.19%)</title><rect x="5.2731%" y="1253" width="0.1883%" height="15" fill="rgb(233,42,35)" fg:x="28" fg:w="1"/><text x="5.5231%" y="1263.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.19%)</title><rect x="5.2731%" y="1237" width="0.1883%" height="15" fill="rgb(231,13,6)" fg:x="28" fg:w="1"/><text x="5.5231%" y="1247.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.19%)</title><rect x="5.2731%" y="1221" width="0.1883%" height="15" fill="rgb(207,181,40)" fg:x="28" fg:w="1"/><text x="5.5231%" y="1231.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.19%)</title><rect x="5.2731%" y="1205" width="0.1883%" height="15" fill="rgb(254,173,49)" fg:x="28" fg:w="1"/><text x="5.5231%" y="1215.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.19%)</title><rect x="5.4614%" y="1077" width="0.1883%" height="15" fill="rgb(221,1,38)" fg:x="29" fg:w="1"/><text x="5.7114%" y="1087.50"></text></g><g><title>dashboard::app::update_markdown_file (7 samples, 1.32%)</title><rect x="5.0847%" y="1301" width="1.3183%" height="15" fill="rgb(206,124,46)" fg:x="27" fg:w="7"/><text x="5.3347%" y="1311.50"></text></g><g><title>parser::findrepl::replace_par (6 samples, 1.13%)</title><rect x="5.2731%" y="1285" width="1.1299%" height="15" fill="rgb(249,21,11)" fg:x="28" fg:w="6"/><text x="5.5231%" y="1295.50"></text></g><g><title>rayon_core::join::join (5 samples, 0.94%)</title><rect x="5.4614%" y="1269" width="0.9416%" height="15" fill="rgb(222,201,40)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1279.50"></text></g><g><title>rayon_core::join::join_context (5 samples, 0.94%)</title><rect x="5.4614%" y="1253" width="0.9416%" height="15" fill="rgb(235,61,29)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1263.50"></text></g><g><title>rayon_core::registry::in_worker (5 samples, 0.94%)</title><rect x="5.4614%" y="1237" width="0.9416%" height="15" fill="rgb(219,207,3)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1247.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold (5 samples, 0.94%)</title><rect x="5.4614%" y="1221" width="0.9416%" height="15" fill="rgb(222,56,46)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.94%)</title><rect x="5.4614%" y="1205" width="0.9416%" height="15" fill="rgb(239,76,54)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.94%)</title><rect x="5.4614%" y="1189" width="0.9416%" height="15" fill="rgb(231,124,27)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1199.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}} (5 samples, 0.94%)</title><rect x="5.4614%" y="1173" width="0.9416%" height="15" fill="rgb(249,195,6)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1183.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (5 samples, 0.94%)</title><rect x="5.4614%" y="1157" width="0.9416%" height="15" fill="rgb(237,174,47)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1167.50"></text></g><g><title>std::sync::condvar::Condvar::wait (5 samples, 0.94%)</title><rect x="5.4614%" y="1141" width="0.9416%" height="15" fill="rgb(206,201,31)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1151.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (5 samples, 0.94%)</title><rect x="5.4614%" y="1125" width="0.9416%" height="15" fill="rgb(231,57,52)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 0.94%)</title><rect x="5.4614%" y="1109" width="0.9416%" height="15" fill="rgb(248,177,22)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1119.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.94%)</title><rect x="5.4614%" y="1093" width="0.9416%" height="15" fill="rgb(215,211,37)" fg:x="29" fg:w="5"/><text x="5.7114%" y="1103.50"></text></g><g><title>syscall (4 samples, 0.75%)</title><rect x="5.6497%" y="1077" width="0.7533%" height="15" fill="rgb(241,128,51)" fg:x="30" fg:w="4"/><text x="5.8997%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.75%)</title><rect x="6.4030%" y="1109" width="0.7533%" height="15" fill="rgb(227,165,31)" fg:x="34" fg:w="4"/><text x="6.6530%" y="1119.50"></text></g><g><title>syscall (4 samples, 0.75%)</title><rect x="6.4030%" y="1093" width="0.7533%" height="15" fill="rgb(228,167,24)" fg:x="34" fg:w="4"/><text x="6.6530%" y="1103.50"></text></g><g><title>rayon_core::join::join (5 samples, 0.94%)</title><rect x="6.4030%" y="1285" width="0.9416%" height="15" fill="rgb(228,143,12)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1295.50"></text></g><g><title>rayon_core::join::join_context (5 samples, 0.94%)</title><rect x="6.4030%" y="1269" width="0.9416%" height="15" fill="rgb(249,149,8)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1279.50"></text></g><g><title>rayon_core::registry::in_worker (5 samples, 0.94%)</title><rect x="6.4030%" y="1253" width="0.9416%" height="15" fill="rgb(243,35,44)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1263.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold (5 samples, 0.94%)</title><rect x="6.4030%" y="1237" width="0.9416%" height="15" fill="rgb(246,89,9)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.94%)</title><rect x="6.4030%" y="1221" width="0.9416%" height="15" fill="rgb(233,213,13)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.94%)</title><rect x="6.4030%" y="1205" width="0.9416%" height="15" fill="rgb(233,141,41)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1215.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}} (5 samples, 0.94%)</title><rect x="6.4030%" y="1189" width="0.9416%" height="15" fill="rgb(239,167,4)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1199.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (5 samples, 0.94%)</title><rect x="6.4030%" y="1173" width="0.9416%" height="15" fill="rgb(209,217,16)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1183.50"></text></g><g><title>std::sync::condvar::Condvar::wait (5 samples, 0.94%)</title><rect x="6.4030%" y="1157" width="0.9416%" height="15" fill="rgb(219,88,35)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1167.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (5 samples, 0.94%)</title><rect x="6.4030%" y="1141" width="0.9416%" height="15" fill="rgb(220,193,23)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1151.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 0.94%)</title><rect x="6.4030%" y="1125" width="0.9416%" height="15" fill="rgb(230,90,52)" fg:x="34" fg:w="5"/><text x="6.6530%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="7.1563%" y="1109" width="0.1883%" height="15" fill="rgb(252,106,19)" fg:x="38" fg:w="1"/><text x="7.4063%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.19%)</title><rect x="7.1563%" y="1093" width="0.1883%" height="15" fill="rgb(206,74,20)" fg:x="38" fg:w="1"/><text x="7.4063%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="7.1563%" y="1077" width="0.1883%" height="15" fill="rgb(230,138,44)" fg:x="38" fg:w="1"/><text x="7.4063%" y="1087.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end (1 samples, 0.19%)</title><rect x="7.7213%" y="1125" width="0.1883%" height="15" fill="rgb(235,182,43)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1135.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (1 samples, 0.19%)</title><rect x="7.7213%" y="1109" width="0.1883%" height="15" fill="rgb(242,16,51)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1119.50"></text></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::end_object (1 samples, 0.19%)</title><rect x="7.7213%" y="1093" width="0.1883%" height="15" fill="rgb(248,9,4)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1103.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="7.7213%" y="1077" width="0.1883%" height="15" fill="rgb(210,31,22)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1087.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="7.7213%" y="1061" width="0.1883%" height="15" fill="rgb(239,54,39)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1071.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="7.7213%" y="1045" width="0.1883%" height="15" fill="rgb(230,99,41)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1055.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="7.7213%" y="1029" width="0.1883%" height="15" fill="rgb(253,106,12)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1039.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="7.7213%" y="1013" width="0.1883%" height="15" fill="rgb(213,46,41)" fg:x="41" fg:w="1"/><text x="7.9713%" y="1023.50"></text></g><g><title>serde_json::ser::indent (2 samples, 0.38%)</title><rect x="7.9096%" y="1061" width="0.3766%" height="15" fill="rgb(215,133,35)" fg:x="42" fg:w="2"/><text x="8.1596%" y="1071.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.38%)</title><rect x="7.9096%" y="1045" width="0.3766%" height="15" fill="rgb(213,28,5)" fg:x="42" fg:w="2"/><text x="8.1596%" y="1055.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.38%)</title><rect x="7.9096%" y="1029" width="0.3766%" height="15" fill="rgb(215,77,49)" fg:x="42" fg:w="2"/><text x="8.1596%" y="1039.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.38%)</title><rect x="7.9096%" y="1013" width="0.3766%" height="15" fill="rgb(248,100,22)" fg:x="42" fg:w="2"/><text x="8.1596%" y="1023.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.38%)</title><rect x="7.9096%" y="997" width="0.3766%" height="15" fill="rgb(208,67,9)" fg:x="42" fg:w="2"/><text x="8.1596%" y="1007.50"></text></g><g><title>__GI___write (2 samples, 0.38%)</title><rect x="7.9096%" y="981" width="0.3766%" height="15" fill="rgb(219,133,21)" fg:x="42" fg:w="2"/><text x="8.1596%" y="991.50"></text></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::begin_object_key (3 samples, 0.56%)</title><rect x="7.9096%" y="1077" width="0.5650%" height="15" fill="rgb(246,46,29)" fg:x="42" fg:w="3"/><text x="8.1596%" y="1087.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="8.2863%" y="1061" width="0.1883%" height="15" fill="rgb(246,185,52)" fg:x="44" fg:w="1"/><text x="8.5363%" y="1071.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="8.2863%" y="1045" width="0.1883%" height="15" fill="rgb(252,136,11)" fg:x="44" fg:w="1"/><text x="8.5363%" y="1055.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="8.2863%" y="1029" width="0.1883%" height="15" fill="rgb(219,138,53)" fg:x="44" fg:w="1"/><text x="8.5363%" y="1039.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="8.2863%" y="1013" width="0.1883%" height="15" fill="rgb(211,51,23)" fg:x="44" fg:w="1"/><text x="8.5363%" y="1023.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="8.2863%" y="997" width="0.1883%" height="15" fill="rgb(247,221,28)" fg:x="44" fg:w="1"/><text x="8.5363%" y="1007.50"></text></g><g><title>serde_json::ser::Formatter::end_string (3 samples, 0.56%)</title><rect x="8.4746%" y="1013" width="0.5650%" height="15" fill="rgb(251,222,45)" fg:x="45" fg:w="3"/><text x="8.7246%" y="1023.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.56%)</title><rect x="8.4746%" y="997" width="0.5650%" height="15" fill="rgb(217,162,53)" fg:x="45" fg:w="3"/><text x="8.7246%" y="1007.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (3 samples, 0.56%)</title><rect x="8.4746%" y="981" width="0.5650%" height="15" fill="rgb(229,93,14)" fg:x="45" fg:w="3"/><text x="8.7246%" y="991.50"></text></g><g><title>std::sys::unix::net::Socket::write (3 samples, 0.56%)</title><rect x="8.4746%" y="965" width="0.5650%" height="15" fill="rgb(209,67,49)" fg:x="45" fg:w="3"/><text x="8.7246%" y="975.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.56%)</title><rect x="8.4746%" y="949" width="0.5650%" height="15" fill="rgb(213,87,29)" fg:x="45" fg:w="3"/><text x="8.7246%" y="959.50"></text></g><g><title>__GI___write (3 samples, 0.56%)</title><rect x="8.4746%" y="933" width="0.5650%" height="15" fill="rgb(205,151,52)" fg:x="45" fg:w="3"/><text x="8.7246%" y="943.50"></text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.19%)</title><rect x="8.8512%" y="917" width="0.1883%" height="15" fill="rgb(253,215,39)" fg:x="47" fg:w="1"/><text x="9.1012%" y="927.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (9 samples, 1.69%)</title><rect x="7.9096%" y="1093" width="1.6949%" height="15" fill="rgb(221,220,41)" fg:x="42" fg:w="9"/><text x="8.1596%" y="1103.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (6 samples, 1.13%)</title><rect x="8.4746%" y="1077" width="1.1299%" height="15" fill="rgb(218,133,21)" fg:x="45" fg:w="6"/><text x="8.7246%" y="1087.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (6 samples, 1.13%)</title><rect x="8.4746%" y="1061" width="1.1299%" height="15" fill="rgb(221,193,43)" fg:x="45" fg:w="6"/><text x="8.7246%" y="1071.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (6 samples, 1.13%)</title><rect x="8.4746%" y="1045" width="1.1299%" height="15" fill="rgb(240,128,52)" fg:x="45" fg:w="6"/><text x="8.7246%" y="1055.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 1.13%)</title><rect x="8.4746%" y="1029" width="1.1299%" height="15" fill="rgb(253,114,12)" fg:x="45" fg:w="6"/><text x="8.7246%" y="1039.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (3 samples, 0.56%)</title><rect x="9.0395%" y="1013" width="0.5650%" height="15" fill="rgb(215,223,47)" fg:x="48" fg:w="3"/><text x="9.2895%" y="1023.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (2 samples, 0.38%)</title><rect x="9.2279%" y="997" width="0.3766%" height="15" fill="rgb(248,225,23)" fg:x="49" fg:w="2"/><text x="9.4779%" y="1007.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.38%)</title><rect x="9.2279%" y="981" width="0.3766%" height="15" fill="rgb(250,108,0)" fg:x="49" fg:w="2"/><text x="9.4779%" y="991.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.38%)</title><rect x="9.2279%" y="965" width="0.3766%" height="15" fill="rgb(228,208,7)" fg:x="49" fg:w="2"/><text x="9.4779%" y="975.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.38%)</title><rect x="9.2279%" y="949" width="0.3766%" height="15" fill="rgb(244,45,10)" fg:x="49" fg:w="2"/><text x="9.4779%" y="959.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.38%)</title><rect x="9.2279%" y="933" width="0.3766%" height="15" fill="rgb(207,125,25)" fg:x="49" fg:w="2"/><text x="9.4779%" y="943.50"></text></g><g><title>__GI___write (2 samples, 0.38%)</title><rect x="9.2279%" y="917" width="0.3766%" height="15" fill="rgb(210,195,18)" fg:x="49" fg:w="2"/><text x="9.4779%" y="927.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.19%)</title><rect x="9.4162%" y="901" width="0.1883%" height="15" fill="rgb(249,80,12)" fg:x="50" fg:w="1"/><text x="9.6662%" y="911.50"></text></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::begin_object_value (1 samples, 0.19%)</title><rect x="9.6045%" y="1077" width="0.1883%" height="15" fill="rgb(221,65,9)" fg:x="51" fg:w="1"/><text x="9.8545%" y="1087.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="9.6045%" y="1061" width="0.1883%" height="15" fill="rgb(235,49,36)" fg:x="51" fg:w="1"/><text x="9.8545%" y="1071.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="9.6045%" y="1045" width="0.1883%" height="15" fill="rgb(225,32,20)" fg:x="51" fg:w="1"/><text x="9.8545%" y="1055.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="9.6045%" y="1029" width="0.1883%" height="15" fill="rgb(215,141,46)" fg:x="51" fg:w="1"/><text x="9.8545%" y="1039.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="9.6045%" y="1013" width="0.1883%" height="15" fill="rgb(250,160,47)" fg:x="51" fg:w="1"/><text x="9.8545%" y="1023.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="9.6045%" y="997" width="0.1883%" height="15" fill="rgb(216,222,40)" fg:x="51" fg:w="1"/><text x="9.8545%" y="1007.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.19%)</title><rect x="9.6045%" y="981" width="0.1883%" height="15" fill="rgb(234,217,39)" fg:x="51" fg:w="1"/><text x="9.8545%" y="991.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.19%)</title><rect x="9.7928%" y="1077" width="0.1883%" height="15" fill="rgb(207,178,40)" fg:x="52" fg:w="1"/><text x="10.0428%" y="1087.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="9.7928%" y="1061" width="0.1883%" height="15" fill="rgb(221,136,13)" fg:x="52" fg:w="1"/><text x="10.0428%" y="1071.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="9.7928%" y="1045" width="0.1883%" height="15" fill="rgb(249,199,10)" fg:x="52" fg:w="1"/><text x="10.0428%" y="1055.50"></text></g><g><title>serde_json::ser::Formatter::end_string (1 samples, 0.19%)</title><rect x="9.9812%" y="1029" width="0.1883%" height="15" fill="rgb(249,222,13)" fg:x="53" fg:w="1"/><text x="10.2312%" y="1039.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="9.9812%" y="1013" width="0.1883%" height="15" fill="rgb(244,185,38)" fg:x="53" fg:w="1"/><text x="10.2312%" y="1023.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="9.9812%" y="997" width="0.1883%" height="15" fill="rgb(236,202,9)" fg:x="53" fg:w="1"/><text x="10.2312%" y="1007.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="9.9812%" y="981" width="0.1883%" height="15" fill="rgb(250,229,37)" fg:x="53" fg:w="1"/><text x="10.2312%" y="991.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="9.9812%" y="965" width="0.1883%" height="15" fill="rgb(206,174,23)" fg:x="53" fg:w="1"/><text x="10.2312%" y="975.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="9.9812%" y="949" width="0.1883%" height="15" fill="rgb(211,33,43)" fg:x="53" fg:w="1"/><text x="10.2312%" y="959.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (3 samples, 0.56%)</title><rect x="9.9812%" y="1077" width="0.5650%" height="15" fill="rgb(245,58,50)" fg:x="53" fg:w="3"/><text x="10.2312%" y="1087.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.56%)</title><rect x="9.9812%" y="1061" width="0.5650%" height="15" fill="rgb(244,68,36)" fg:x="53" fg:w="3"/><text x="10.2312%" y="1071.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.56%)</title><rect x="9.9812%" y="1045" width="0.5650%" height="15" fill="rgb(232,229,15)" fg:x="53" fg:w="3"/><text x="10.2312%" y="1055.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.38%)</title><rect x="10.1695%" y="1029" width="0.3766%" height="15" fill="rgb(254,30,23)" fg:x="54" fg:w="2"/><text x="10.4195%" y="1039.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.19%)</title><rect x="10.3578%" y="1013" width="0.1883%" height="15" fill="rgb(235,160,14)" fg:x="55" fg:w="1"/><text x="10.6078%" y="1023.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="10.3578%" y="997" width="0.1883%" height="15" fill="rgb(212,155,44)" fg:x="55" fg:w="1"/><text x="10.6078%" y="1007.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="10.3578%" y="981" width="0.1883%" height="15" fill="rgb(226,2,50)" fg:x="55" fg:w="1"/><text x="10.6078%" y="991.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="10.3578%" y="965" width="0.1883%" height="15" fill="rgb(234,177,6)" fg:x="55" fg:w="1"/><text x="10.6078%" y="975.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="10.3578%" y="949" width="0.1883%" height="15" fill="rgb(217,24,9)" fg:x="55" fg:w="1"/><text x="10.6078%" y="959.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="10.3578%" y="933" width="0.1883%" height="15" fill="rgb(220,13,46)" fg:x="55" fg:w="1"/><text x="10.6078%" y="943.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.19%)</title><rect x="10.5461%" y="1013" width="0.1883%" height="15" fill="rgb(239,221,27)" fg:x="56" fg:w="1"/><text x="10.7961%" y="1023.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_seq (2 samples, 0.38%)</title><rect x="10.7345%" y="1013" width="0.3766%" height="15" fill="rgb(222,198,25)" fg:x="57" fg:w="2"/><text x="10.9845%" y="1023.50"></text></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::begin_array (2 samples, 0.38%)</title><rect x="10.7345%" y="997" width="0.3766%" height="15" fill="rgb(211,99,13)" fg:x="57" fg:w="2"/><text x="10.9845%" y="1007.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.38%)</title><rect x="10.7345%" y="981" width="0.3766%" height="15" fill="rgb(232,111,31)" fg:x="57" fg:w="2"/><text x="10.9845%" y="991.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.38%)</title><rect x="10.7345%" y="965" width="0.3766%" height="15" fill="rgb(245,82,37)" fg:x="57" fg:w="2"/><text x="10.9845%" y="975.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.38%)</title><rect x="10.7345%" y="949" width="0.3766%" height="15" fill="rgb(227,149,46)" fg:x="57" fg:w="2"/><text x="10.9845%" y="959.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.38%)</title><rect x="10.7345%" y="933" width="0.3766%" height="15" fill="rgb(218,36,50)" fg:x="57" fg:w="2"/><text x="10.9845%" y="943.50"></text></g><g><title>__GI___write (2 samples, 0.38%)</title><rect x="10.7345%" y="917" width="0.3766%" height="15" fill="rgb(226,80,48)" fg:x="57" fg:w="2"/><text x="10.9845%" y="927.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.19%)</title><rect x="10.9228%" y="901" width="0.1883%" height="15" fill="rgb(238,224,15)" fg:x="58" fg:w="1"/><text x="11.1728%" y="911.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.19%)</title><rect x="11.2994%" y="869" width="0.1883%" height="15" fill="rgb(241,136,10)" fg:x="60" fg:w="1"/><text x="11.5494%" y="879.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.19%)</title><rect x="11.2994%" y="853" width="0.1883%" height="15" fill="rgb(208,32,45)" fg:x="60" fg:w="1"/><text x="11.5494%" y="863.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.19%)</title><rect x="11.2994%" y="837" width="0.1883%" height="15" fill="rgb(207,135,9)" fg:x="60" fg:w="1"/><text x="11.5494%" y="847.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.19%)</title><rect x="11.2994%" y="821" width="0.1883%" height="15" fill="rgb(206,86,44)" fg:x="60" fg:w="1"/><text x="11.5494%" y="831.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.19%)</title><rect x="11.2994%" y="805" width="0.1883%" height="15" fill="rgb(245,177,15)" fg:x="60" fg:w="1"/><text x="11.5494%" y="815.50"></text></g><g><title>serde_json::ser::Formatter::end_string (1 samples, 0.19%)</title><rect x="11.2994%" y="789" width="0.1883%" height="15" fill="rgb(206,64,50)" fg:x="60" fg:w="1"/><text x="11.5494%" y="799.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="11.2994%" y="773" width="0.1883%" height="15" fill="rgb(234,36,40)" fg:x="60" fg:w="1"/><text x="11.5494%" y="783.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="11.2994%" y="757" width="0.1883%" height="15" fill="rgb(213,64,8)" fg:x="60" fg:w="1"/><text x="11.5494%" y="767.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="11.2994%" y="741" width="0.1883%" height="15" fill="rgb(210,75,36)" fg:x="60" fg:w="1"/><text x="11.5494%" y="751.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="11.2994%" y="725" width="0.1883%" height="15" fill="rgb(229,88,21)" fg:x="60" fg:w="1"/><text x="11.5494%" y="735.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="11.2994%" y="709" width="0.1883%" height="15" fill="rgb(252,204,47)" fg:x="60" fg:w="1"/><text x="11.5494%" y="719.50"></text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.19%)</title><rect x="11.2994%" y="693" width="0.1883%" height="15" fill="rgb(208,77,27)" fg:x="60" fg:w="1"/><text x="11.5494%" y="703.50"></text></g><g><title>serde_json::ser::Formatter::end_string (1 samples, 0.19%)</title><rect x="11.4878%" y="805" width="0.1883%" height="15" fill="rgb(221,76,26)" fg:x="61" fg:w="1"/><text x="11.7378%" y="815.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="11.4878%" y="789" width="0.1883%" height="15" fill="rgb(225,139,18)" fg:x="61" fg:w="1"/><text x="11.7378%" y="799.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="11.4878%" y="773" width="0.1883%" height="15" fill="rgb(230,137,11)" fg:x="61" fg:w="1"/><text x="11.7378%" y="783.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="11.4878%" y="757" width="0.1883%" height="15" fill="rgb(212,28,1)" fg:x="61" fg:w="1"/><text x="11.7378%" y="767.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="11.4878%" y="741" width="0.1883%" height="15" fill="rgb(248,164,17)" fg:x="61" fg:w="1"/><text x="11.7378%" y="751.50"></text></g><g><title>core::cmp::min (1 samples, 0.19%)</title><rect x="11.4878%" y="725" width="0.1883%" height="15" fill="rgb(222,171,42)" fg:x="61" fg:w="1"/><text x="11.7378%" y="735.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.19%)</title><rect x="11.4878%" y="709" width="0.1883%" height="15" fill="rgb(243,84,45)" fg:x="61" fg:w="1"/><text x="11.7378%" y="719.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.19%)</title><rect x="11.4878%" y="693" width="0.1883%" height="15" fill="rgb(252,49,23)" fg:x="61" fg:w="1"/><text x="11.7378%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 6.78%)</title><rect x="5.0847%" y="1365" width="6.7797%" height="15" fill="rgb(215,19,7)" fg:x="27" fg:w="36"/><text x="5.3347%" y="1375.50">&lt;alloc::b..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36 samples, 6.78%)</title><rect x="5.0847%" y="1349" width="6.7797%" height="15" fill="rgb(238,81,41)" fg:x="27" fg:w="36"/><text x="5.3347%" y="1359.50">core::ops..</text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::{{closure}} (36 samples, 6.78%)</title><rect x="5.0847%" y="1333" width="6.7797%" height="15" fill="rgb(210,199,37)" fg:x="27" fg:w="36"/><text x="5.3347%" y="1343.50">crossbeam..</text></g><g><title>dashboard::app::try_main_refactor_v3::{{closure}}::{{closure}}::{{closure}} (36 samples, 6.78%)</title><rect x="5.0847%" y="1317" width="6.7797%" height="15" fill="rgb(244,192,49)" fg:x="27" fg:w="36"/><text x="5.3347%" y="1327.50">dashboard..</text></g><g><title>dashboard::app::write_json_file (29 samples, 5.46%)</title><rect x="6.4030%" y="1301" width="5.4614%" height="15" fill="rgb(226,211,11)" fg:x="34" fg:w="29"/><text x="6.6530%" y="1311.50">dashboa..</text></g><g><title>serde_json::ser::to_writer_pretty (24 samples, 4.52%)</title><rect x="7.3446%" y="1285" width="4.5198%" height="15" fill="rgb(236,162,54)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1295.50">serde..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (24 samples, 4.52%)</title><rect x="7.3446%" y="1269" width="4.5198%" height="15" fill="rgb(220,229,9)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1279.50">serde..</text></g><g><title>serde::ser::Serializer::collect_seq (24 samples, 4.52%)</title><rect x="7.3446%" y="1253" width="4.5198%" height="15" fill="rgb(250,87,22)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1263.50">serde..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (24 samples, 4.52%)</title><rect x="7.3446%" y="1237" width="4.5198%" height="15" fill="rgb(239,43,17)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1247.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (24 samples, 4.52%)</title><rect x="7.3446%" y="1221" width="4.5198%" height="15" fill="rgb(231,177,25)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1231.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (24 samples, 4.52%)</title><rect x="7.3446%" y="1205" width="4.5198%" height="15" fill="rgb(219,179,1)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1215.50">core:..</text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (24 samples, 4.52%)</title><rect x="7.3446%" y="1189" width="4.5198%" height="15" fill="rgb(238,219,53)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1199.50">serde..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (24 samples, 4.52%)</title><rect x="7.3446%" y="1173" width="4.5198%" height="15" fill="rgb(232,167,36)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1183.50">&lt;serd..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (24 samples, 4.52%)</title><rect x="7.3446%" y="1157" width="4.5198%" height="15" fill="rgb(244,19,51)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1167.50">serde..</text></g><g><title>dashboard::gh::_::&lt;impl serde::ser::Serialize for dashboard::gh::GitRepo&gt;::serialize (24 samples, 4.52%)</title><rect x="7.3446%" y="1141" width="4.5198%" height="15" fill="rgb(224,6,22)" fg:x="39" fg:w="24"/><text x="7.5946%" y="1151.50">dashb..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 3.95%)</title><rect x="7.9096%" y="1125" width="3.9548%" height="15" fill="rgb(224,145,5)" fg:x="42" fg:w="21"/><text x="8.1596%" y="1135.50">&lt;ser..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (21 samples, 3.95%)</title><rect x="7.9096%" y="1109" width="3.9548%" height="15" fill="rgb(234,130,49)" fg:x="42" fg:w="21"/><text x="8.1596%" y="1119.50">serd..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 2.26%)</title><rect x="9.6045%" y="1093" width="2.2599%" height="15" fill="rgb(254,6,2)" fg:x="51" fg:w="12"/><text x="9.8545%" y="1103.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::option::Option&lt;T&gt;&gt;::serialize (7 samples, 1.32%)</title><rect x="10.5461%" y="1077" width="1.3183%" height="15" fill="rgb(208,96,46)" fg:x="56" fg:w="7"/><text x="10.7961%" y="1087.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_some (7 samples, 1.32%)</title><rect x="10.5461%" y="1061" width="1.3183%" height="15" fill="rgb(239,3,39)" fg:x="56" fg:w="7"/><text x="10.7961%" y="1071.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (7 samples, 1.32%)</title><rect x="10.5461%" y="1045" width="1.3183%" height="15" fill="rgb(233,210,1)" fg:x="56" fg:w="7"/><text x="10.7961%" y="1055.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 1.32%)</title><rect x="10.5461%" y="1029" width="1.3183%" height="15" fill="rgb(244,137,37)" fg:x="56" fg:w="7"/><text x="10.7961%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (4 samples, 0.75%)</title><rect x="11.1111%" y="1013" width="0.7533%" height="15" fill="rgb(240,136,2)" fg:x="59" fg:w="4"/><text x="11.3611%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.75%)</title><rect x="11.1111%" y="997" width="0.7533%" height="15" fill="rgb(239,18,37)" fg:x="59" fg:w="4"/><text x="11.3611%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (4 samples, 0.75%)</title><rect x="11.1111%" y="981" width="0.7533%" height="15" fill="rgb(218,185,22)" fg:x="59" fg:w="4"/><text x="11.3611%" y="991.50"></text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (4 samples, 0.75%)</title><rect x="11.1111%" y="965" width="0.7533%" height="15" fill="rgb(225,218,4)" fg:x="59" fg:w="4"/><text x="11.3611%" y="975.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (4 samples, 0.75%)</title><rect x="11.1111%" y="949" width="0.7533%" height="15" fill="rgb(230,182,32)" fg:x="59" fg:w="4"/><text x="11.3611%" y="959.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.75%)</title><rect x="11.1111%" y="933" width="0.7533%" height="15" fill="rgb(242,56,43)" fg:x="59" fg:w="4"/><text x="11.3611%" y="943.50"></text></g><g><title>dashboard::gh::_::&lt;impl serde::ser::Serialize for dashboard::gh::RepositoryTopic&gt;::serialize (4 samples, 0.75%)</title><rect x="11.1111%" y="917" width="0.7533%" height="15" fill="rgb(233,99,24)" fg:x="59" fg:w="4"/><text x="11.3611%" y="927.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.75%)</title><rect x="11.1111%" y="901" width="0.7533%" height="15" fill="rgb(234,209,42)" fg:x="59" fg:w="4"/><text x="11.3611%" y="911.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.75%)</title><rect x="11.1111%" y="885" width="0.7533%" height="15" fill="rgb(227,7,12)" fg:x="59" fg:w="4"/><text x="11.3611%" y="895.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.38%)</title><rect x="11.4878%" y="869" width="0.3766%" height="15" fill="rgb(245,203,43)" fg:x="61" fg:w="2"/><text x="11.7378%" y="879.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (2 samples, 0.38%)</title><rect x="11.4878%" y="853" width="0.3766%" height="15" fill="rgb(238,205,33)" fg:x="61" fg:w="2"/><text x="11.7378%" y="863.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.38%)</title><rect x="11.4878%" y="837" width="0.3766%" height="15" fill="rgb(231,56,7)" fg:x="61" fg:w="2"/><text x="11.7378%" y="847.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.38%)</title><rect x="11.4878%" y="821" width="0.3766%" height="15" fill="rgb(244,186,29)" fg:x="61" fg:w="2"/><text x="11.7378%" y="831.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.19%)</title><rect x="11.6761%" y="805" width="0.1883%" height="15" fill="rgb(234,111,31)" fg:x="62" fg:w="1"/><text x="11.9261%" y="815.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.19%)</title><rect x="11.6761%" y="789" width="0.1883%" height="15" fill="rgb(241,149,10)" fg:x="62" fg:w="1"/><text x="11.9261%" y="799.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="11.6761%" y="773" width="0.1883%" height="15" fill="rgb(249,206,44)" fg:x="62" fg:w="1"/><text x="11.9261%" y="783.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="11.6761%" y="757" width="0.1883%" height="15" fill="rgb(251,153,30)" fg:x="62" fg:w="1"/><text x="11.9261%" y="767.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="11.6761%" y="741" width="0.1883%" height="15" fill="rgb(239,152,38)" fg:x="62" fg:w="1"/><text x="11.9261%" y="751.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="11.6761%" y="725" width="0.1883%" height="15" fill="rgb(249,139,47)" fg:x="62" fg:w="1"/><text x="11.9261%" y="735.50"></text></g><g><title>__GI___write (1 samples, 0.19%)</title><rect x="11.6761%" y="709" width="0.1883%" height="15" fill="rgb(244,64,35)" fg:x="62" fg:w="1"/><text x="11.9261%" y="719.50"></text></g><g><title>rayon_core::registry::Registry::pop_injected_job (1 samples, 0.19%)</title><rect x="11.8644%" y="1253" width="0.1883%" height="15" fill="rgb(216,46,15)" fg:x="63" fg:w="1"/><text x="12.1144%" y="1263.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (1 samples, 0.19%)</title><rect x="11.8644%" y="1237" width="0.1883%" height="15" fill="rgb(250,74,19)" fg:x="63" fg:w="1"/><text x="12.1144%" y="1247.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (1 samples, 0.19%)</title><rect x="12.0527%" y="997" width="0.1883%" height="15" fill="rgb(249,42,33)" fg:x="64" fg:w="1"/><text x="12.3027%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.19%)</title><rect x="12.0527%" y="981" width="0.1883%" height="15" fill="rgb(242,149,17)" fg:x="64" fg:w="1"/><text x="12.3027%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="12.0527%" y="965" width="0.1883%" height="15" fill="rgb(244,29,21)" fg:x="64" fg:w="1"/><text x="12.3027%" y="975.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (3 samples, 0.56%)</title><rect x="12.0527%" y="1173" width="0.5650%" height="15" fill="rgb(220,130,37)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3 samples, 0.56%)</title><rect x="12.0527%" y="1157" width="0.5650%" height="15" fill="rgb(211,67,2)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1167.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (3 samples, 0.56%)</title><rect x="12.0527%" y="1141" width="0.5650%" height="15" fill="rgb(235,68,52)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1151.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.56%)</title><rect x="12.0527%" y="1125" width="0.5650%" height="15" fill="rgb(246,142,3)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1135.50"></text></g><g><title>crossbeam_epoch::default::pin (3 samples, 0.56%)</title><rect x="12.0527%" y="1109" width="0.5650%" height="15" fill="rgb(241,25,7)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1119.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.56%)</title><rect x="12.0527%" y="1093" width="0.5650%" height="15" fill="rgb(242,119,39)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.56%)</title><rect x="12.0527%" y="1077" width="0.5650%" height="15" fill="rgb(241,98,45)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1087.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (3 samples, 0.56%)</title><rect x="12.0527%" y="1061" width="0.5650%" height="15" fill="rgb(254,28,30)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1071.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (3 samples, 0.56%)</title><rect x="12.0527%" y="1045" width="0.5650%" height="15" fill="rgb(241,142,54)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1055.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (3 samples, 0.56%)</title><rect x="12.0527%" y="1029" width="0.5650%" height="15" fill="rgb(222,85,15)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1039.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (3 samples, 0.56%)</title><rect x="12.0527%" y="1013" width="0.5650%" height="15" fill="rgb(210,85,47)" fg:x="64" fg:w="3"/><text x="12.3027%" y="1023.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2 samples, 0.38%)</title><rect x="12.2411%" y="997" width="0.3766%" height="15" fill="rgb(224,206,25)" fg:x="65" fg:w="2"/><text x="12.4911%" y="1007.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (2 samples, 0.38%)</title><rect x="12.2411%" y="981" width="0.3766%" height="15" fill="rgb(243,201,19)" fg:x="65" fg:w="2"/><text x="12.4911%" y="991.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.38%)</title><rect x="12.2411%" y="965" width="0.3766%" height="15" fill="rgb(236,59,4)" fg:x="65" fg:w="2"/><text x="12.4911%" y="975.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (2 samples, 0.38%)</title><rect x="12.2411%" y="949" width="0.3766%" height="15" fill="rgb(254,179,45)" fg:x="65" fg:w="2"/><text x="12.4911%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.38%)</title><rect x="12.2411%" y="933" width="0.3766%" height="15" fill="rgb(226,14,10)" fg:x="65" fg:w="2"/><text x="12.4911%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.38%)</title><rect x="12.2411%" y="917" width="0.3766%" height="15" fill="rgb(244,27,41)" fg:x="65" fg:w="2"/><text x="12.4911%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1 samples, 0.19%)</title><rect x="12.6177%" y="1093" width="0.1883%" height="15" fill="rgb(235,35,32)" fg:x="67" fg:w="1"/><text x="12.8677%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.19%)</title><rect x="12.6177%" y="1077" width="0.1883%" height="15" fill="rgb(218,68,31)" fg:x="67" fg:w="1"/><text x="12.8677%" y="1087.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (1 samples, 0.19%)</title><rect x="12.8060%" y="981" width="0.1883%" height="15" fill="rgb(207,120,37)" fg:x="68" fg:w="1"/><text x="13.0560%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.19%)</title><rect x="12.8060%" y="965" width="0.1883%" height="15" fill="rgb(227,98,0)" fg:x="68" fg:w="1"/><text x="13.0560%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="12.8060%" y="949" width="0.1883%" height="15" fill="rgb(207,7,3)" fg:x="68" fg:w="1"/><text x="13.0560%" y="959.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (1 samples, 0.19%)</title><rect x="12.9944%" y="933" width="0.1883%" height="15" fill="rgb(206,98,19)" fg:x="69" fg:w="1"/><text x="13.2444%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.19%)</title><rect x="12.9944%" y="917" width="0.1883%" height="15" fill="rgb(217,5,26)" fg:x="69" fg:w="1"/><text x="13.2444%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.19%)</title><rect x="12.9944%" y="901" width="0.1883%" height="15" fill="rgb(235,190,38)" fg:x="69" fg:w="1"/><text x="13.2444%" y="911.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.38%)</title><rect x="12.9944%" y="949" width="0.3766%" height="15" fill="rgb(247,86,24)" fg:x="69" fg:w="2"/><text x="13.2444%" y="959.50"></text></g><g><title>crossbeam_epoch::atomic::Shared&lt;T&gt;::tag (1 samples, 0.19%)</title><rect x="13.1827%" y="933" width="0.1883%" height="15" fill="rgb(205,101,16)" fg:x="70" fg:w="1"/><text x="13.4327%" y="943.50"></text></g><g><title>crossbeam_epoch::atomic::decompose_tag (1 samples, 0.19%)</title><rect x="13.1827%" y="917" width="0.1883%" height="15" fill="rgb(246,168,33)" fg:x="70" fg:w="1"/><text x="13.4327%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (9 samples, 1.69%)</title><rect x="11.8644%" y="1285" width="1.6949%" height="15" fill="rgb(231,114,1)" fg:x="63" fg:w="9"/><text x="12.1144%" y="1295.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (9 samples, 1.69%)</title><rect x="11.8644%" y="1269" width="1.6949%" height="15" fill="rgb(207,184,53)" fg:x="63" fg:w="9"/><text x="12.1144%" y="1279.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (8 samples, 1.51%)</title><rect x="12.0527%" y="1253" width="1.5066%" height="15" fill="rgb(224,95,51)" fg:x="64" fg:w="8"/><text x="12.3027%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (8 samples, 1.51%)</title><rect x="12.0527%" y="1237" width="1.5066%" height="15" fill="rgb(212,188,45)" fg:x="64" fg:w="8"/><text x="12.3027%" y="1247.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 1.51%)</title><rect x="12.0527%" y="1221" width="1.5066%" height="15" fill="rgb(223,154,38)" fg:x="64" fg:w="8"/><text x="12.3027%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 1.51%)</title><rect x="12.0527%" y="1205" width="1.5066%" height="15" fill="rgb(251,22,52)" fg:x="64" fg:w="8"/><text x="12.3027%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 1.51%)</title><rect x="12.0527%" y="1189" width="1.5066%" height="15" fill="rgb(229,209,22)" fg:x="64" fg:w="8"/><text x="12.3027%" y="1199.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 0.94%)</title><rect x="12.6177%" y="1173" width="0.9416%" height="15" fill="rgb(234,138,34)" fg:x="67" fg:w="5"/><text x="12.8677%" y="1183.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (5 samples, 0.94%)</title><rect x="12.6177%" y="1157" width="0.9416%" height="15" fill="rgb(212,95,11)" fg:x="67" fg:w="5"/><text x="12.8677%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (5 samples, 0.94%)</title><rect x="12.6177%" y="1141" width="0.9416%" height="15" fill="rgb(240,179,47)" fg:x="67" fg:w="5"/><text x="12.8677%" y="1151.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (5 samples, 0.94%)</title><rect x="12.6177%" y="1125" width="0.9416%" height="15" fill="rgb(240,163,11)" fg:x="67" fg:w="5"/><text x="12.8677%" y="1135.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (5 samples, 0.94%)</title><rect x="12.6177%" y="1109" width="0.9416%" height="15" fill="rgb(236,37,12)" fg:x="67" fg:w="5"/><text x="12.8677%" y="1119.50"></text></g><g><title>crossbeam_epoch::default::pin (4 samples, 0.75%)</title><rect x="12.8060%" y="1093" width="0.7533%" height="15" fill="rgb(232,164,16)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1103.50"></text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 0.75%)</title><rect x="12.8060%" y="1077" width="0.7533%" height="15" fill="rgb(244,205,15)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.75%)</title><rect x="12.8060%" y="1061" width="0.7533%" height="15" fill="rgb(223,117,47)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1071.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (4 samples, 0.75%)</title><rect x="12.8060%" y="1045" width="0.7533%" height="15" fill="rgb(244,107,35)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1055.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (4 samples, 0.75%)</title><rect x="12.8060%" y="1029" width="0.7533%" height="15" fill="rgb(205,140,8)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1039.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (4 samples, 0.75%)</title><rect x="12.8060%" y="1013" width="0.7533%" height="15" fill="rgb(228,84,46)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1023.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (4 samples, 0.75%)</title><rect x="12.8060%" y="997" width="0.7533%" height="15" fill="rgb(254,188,9)" fg:x="68" fg:w="4"/><text x="13.0560%" y="1007.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (3 samples, 0.56%)</title><rect x="12.9944%" y="981" width="0.5650%" height="15" fill="rgb(206,112,54)" fg:x="69" fg:w="3"/><text x="13.2444%" y="991.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (3 samples, 0.56%)</title><rect x="12.9944%" y="965" width="0.5650%" height="15" fill="rgb(216,84,49)" fg:x="69" fg:w="3"/><text x="13.2444%" y="975.50"></text></g><g><title>core::sync::atomic::fence (1 samples, 0.19%)</title><rect x="13.3710%" y="949" width="0.1883%" height="15" fill="rgb(214,194,35)" fg:x="71" fg:w="1"/><text x="13.6210%" y="959.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (6 samples, 1.13%)</title><rect x="13.5593%" y="1285" width="1.1299%" height="15" fill="rgb(249,28,3)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1295.50"></text></g><g><title>rayon_core::job::JobRef::execute (6 samples, 1.13%)</title><rect x="13.5593%" y="1269" width="1.1299%" height="15" fill="rgb(222,56,52)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1279.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (6 samples, 1.13%)</title><rect x="13.5593%" y="1253" width="1.1299%" height="15" fill="rgb(245,217,50)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1263.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (6 samples, 1.13%)</title><rect x="13.5593%" y="1237" width="1.1299%" height="15" fill="rgb(213,201,24)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1247.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (6 samples, 1.13%)</title><rect x="13.5593%" y="1221" width="1.1299%" height="15" fill="rgb(248,116,28)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1231.50"></text></g><g><title>std::panic::catch_unwind (6 samples, 1.13%)</title><rect x="13.5593%" y="1205" width="1.1299%" height="15" fill="rgb(219,72,43)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1215.50"></text></g><g><title>std::panicking::try (6 samples, 1.13%)</title><rect x="13.5593%" y="1189" width="1.1299%" height="15" fill="rgb(209,138,14)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1199.50"></text></g><g><title>std::panicking::try::do_call (6 samples, 1.13%)</title><rect x="13.5593%" y="1173" width="1.1299%" height="15" fill="rgb(222,18,33)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1183.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6 samples, 1.13%)</title><rect x="13.5593%" y="1157" width="1.1299%" height="15" fill="rgb(213,199,7)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1167.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="1141" width="1.1299%" height="15" fill="rgb(250,110,10)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1151.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="1125" width="1.1299%" height="15" fill="rgb(248,123,6)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1135.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="1109" width="1.1299%" height="15" fill="rgb(206,91,31)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1119.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (6 samples, 1.13%)</title><rect x="13.5593%" y="1093" width="1.1299%" height="15" fill="rgb(211,154,13)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1103.50"></text></g><g><title>std::panic::catch_unwind (6 samples, 1.13%)</title><rect x="13.5593%" y="1077" width="1.1299%" height="15" fill="rgb(225,148,7)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1087.50"></text></g><g><title>std::panicking::try (6 samples, 1.13%)</title><rect x="13.5593%" y="1061" width="1.1299%" height="15" fill="rgb(220,160,43)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1071.50"></text></g><g><title>std::panicking::try::do_call (6 samples, 1.13%)</title><rect x="13.5593%" y="1045" width="1.1299%" height="15" fill="rgb(213,52,39)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1055.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6 samples, 1.13%)</title><rect x="13.5593%" y="1029" width="1.1299%" height="15" fill="rgb(243,137,7)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1039.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="1013" width="1.1299%" height="15" fill="rgb(230,79,13)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1023.50"></text></g><g><title>rayon_core::join::join::call::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="997" width="1.1299%" height="15" fill="rgb(247,105,23)" fg:x="72" fg:w="6"/><text x="13.8093%" y="1007.50"></text></g><g><title>dashboard::app::update_markdown_file::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="981" width="1.1299%" height="15" fill="rgb(223,179,41)" fg:x="72" fg:w="6"/><text x="13.8093%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 1.13%)</title><rect x="13.5593%" y="965" width="1.1299%" height="15" fill="rgb(218,9,34)" fg:x="72" fg:w="6"/><text x="13.8093%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 1.13%)</title><rect x="13.5593%" y="949" width="1.1299%" height="15" fill="rgb(222,106,8)" fg:x="72" fg:w="6"/><text x="13.8093%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 1.13%)</title><rect x="13.5593%" y="933" width="1.1299%" height="15" fill="rgb(211,220,0)" fg:x="72" fg:w="6"/><text x="13.8093%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 1.13%)</title><rect x="13.5593%" y="917" width="1.1299%" height="15" fill="rgb(229,52,16)" fg:x="72" fg:w="6"/><text x="13.8093%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 1.13%)</title><rect x="13.5593%" y="901" width="1.1299%" height="15" fill="rgb(212,155,18)" fg:x="72" fg:w="6"/><text x="13.8093%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6 samples, 1.13%)</title><rect x="13.5593%" y="885" width="1.1299%" height="15" fill="rgb(242,21,14)" fg:x="72" fg:w="6"/><text x="13.8093%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 1.13%)</title><rect x="13.5593%" y="869" width="1.1299%" height="15" fill="rgb(222,19,48)" fg:x="72" fg:w="6"/><text x="13.8093%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 1.13%)</title><rect x="13.5593%" y="853" width="1.1299%" height="15" fill="rgb(232,45,27)" fg:x="72" fg:w="6"/><text x="13.8093%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 1.13%)</title><rect x="13.5593%" y="837" width="1.1299%" height="15" fill="rgb(249,103,42)" fg:x="72" fg:w="6"/><text x="13.8093%" y="847.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 1.13%)</title><rect x="13.5593%" y="821" width="1.1299%" height="15" fill="rgb(246,81,33)" fg:x="72" fg:w="6"/><text x="13.8093%" y="831.50"></text></g><g><title>core::ops::function::FnMut::call_mut (6 samples, 1.13%)</title><rect x="13.5593%" y="805" width="1.1299%" height="15" fill="rgb(252,33,42)" fg:x="72" fg:w="6"/><text x="13.8093%" y="815.50"></text></g><g><title>dashboard::app::fmt_markdown_list_item (6 samples, 1.13%)</title><rect x="13.5593%" y="789" width="1.1299%" height="15" fill="rgb(209,212,41)" fg:x="72" fg:w="6"/><text x="13.8093%" y="799.50"></text></g><g><title>dashboard::app::fmt_markdown_list_item (6 samples, 1.13%)</title><rect x="13.5593%" y="773" width="1.1299%" height="15" fill="rgb(207,154,6)" fg:x="72" fg:w="6"/><text x="13.8093%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (6 samples, 1.13%)</title><rect x="13.5593%" y="757" width="1.1299%" height="15" fill="rgb(223,64,47)" fg:x="72" fg:w="6"/><text x="13.8093%" y="767.50"></text></g><g><title>alloc::string::String::with_capacity (6 samples, 1.13%)</title><rect x="13.5593%" y="741" width="1.1299%" height="15" fill="rgb(211,161,38)" fg:x="72" fg:w="6"/><text x="13.8093%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 1.13%)</title><rect x="13.5593%" y="725" width="1.1299%" height="15" fill="rgb(219,138,40)" fg:x="72" fg:w="6"/><text x="13.8093%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 1.13%)</title><rect x="13.5593%" y="709" width="1.1299%" height="15" fill="rgb(241,228,46)" fg:x="72" fg:w="6"/><text x="13.8093%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 1.13%)</title><rect x="13.5593%" y="693" width="1.1299%" height="15" fill="rgb(223,209,38)" fg:x="72" fg:w="6"/><text x="13.8093%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 1.13%)</title><rect x="13.5593%" y="677" width="1.1299%" height="15" fill="rgb(236,164,45)" fg:x="72" fg:w="6"/><text x="13.8093%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 1.13%)</title><rect x="13.5593%" y="661" width="1.1299%" height="15" fill="rgb(231,15,5)" fg:x="72" fg:w="6"/><text x="13.8093%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 1.13%)</title><rect x="13.5593%" y="645" width="1.1299%" height="15" fill="rgb(252,35,15)" fg:x="72" fg:w="6"/><text x="13.8093%" y="655.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 1.13%)</title><rect x="13.5593%" y="629" width="1.1299%" height="15" fill="rgb(248,181,18)" fg:x="72" fg:w="6"/><text x="13.8093%" y="639.50"></text></g><g><title>__GI___libc_malloc (6 samples, 1.13%)</title><rect x="13.5593%" y="613" width="1.1299%" height="15" fill="rgb(233,39,42)" fg:x="72" fg:w="6"/><text x="13.8093%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.94%)</title><rect x="13.7476%" y="597" width="0.9416%" height="15" fill="rgb(238,110,33)" fg:x="73" fg:w="5"/><text x="13.9976%" y="607.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.19%)</title><rect x="14.8776%" y="1173" width="0.1883%" height="15" fill="rgb(233,195,10)" fg:x="79" fg:w="1"/><text x="15.1276%" y="1183.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (1 samples, 0.19%)</title><rect x="14.8776%" y="1157" width="0.1883%" height="15" fill="rgb(254,105,3)" fg:x="79" fg:w="1"/><text x="15.1276%" y="1167.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.19%)</title><rect x="14.8776%" y="1141" width="0.1883%" height="15" fill="rgb(221,225,9)" fg:x="79" fg:w="1"/><text x="15.1276%" y="1151.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="14.8776%" y="1125" width="0.1883%" height="15" fill="rgb(224,227,45)" fg:x="79" fg:w="1"/><text x="15.1276%" y="1135.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (3 samples, 0.56%)</title><rect x="14.6893%" y="1253" width="0.5650%" height="15" fill="rgb(229,198,43)" fg:x="78" fg:w="3"/><text x="14.9393%" y="1263.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.56%)</title><rect x="14.6893%" y="1237" width="0.5650%" height="15" fill="rgb(206,209,35)" fg:x="78" fg:w="3"/><text x="14.9393%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.56%)</title><rect x="14.6893%" y="1221" width="0.5650%" height="15" fill="rgb(245,195,53)" fg:x="78" fg:w="3"/><text x="14.9393%" y="1231.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (2 samples, 0.38%)</title><rect x="14.8776%" y="1205" width="0.3766%" height="15" fill="rgb(240,92,26)" fg:x="79" fg:w="2"/><text x="15.1276%" y="1215.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.38%)</title><rect x="14.8776%" y="1189" width="0.3766%" height="15" fill="rgb(207,40,23)" fg:x="79" fg:w="2"/><text x="15.1276%" y="1199.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.19%)</title><rect x="15.0659%" y="1173" width="0.1883%" height="15" fill="rgb(223,111,35)" fg:x="80" fg:w="1"/><text x="15.3159%" y="1183.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit::{{closure}} (1 samples, 0.19%)</title><rect x="15.0659%" y="1157" width="0.1883%" height="15" fill="rgb(229,147,28)" fg:x="80" fg:w="1"/><text x="15.3159%" y="1167.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__init (1 samples, 0.19%)</title><rect x="15.0659%" y="1141" width="0.1883%" height="15" fill="rgb(211,29,28)" fg:x="80" fg:w="1"/><text x="15.3159%" y="1151.50"></text></g><g><title>crossbeam_epoch::internal::Local::register (1 samples, 0.19%)</title><rect x="15.0659%" y="1125" width="0.1883%" height="15" fill="rgb(228,72,33)" fg:x="80" fg:w="1"/><text x="15.3159%" y="1135.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (8 samples, 1.51%)</title><rect x="14.6893%" y="1285" width="1.5066%" height="15" fill="rgb(205,214,31)" fg:x="78" fg:w="8"/><text x="14.9393%" y="1295.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (8 samples, 1.51%)</title><rect x="14.6893%" y="1269" width="1.5066%" height="15" fill="rgb(224,111,15)" fg:x="78" fg:w="8"/><text x="14.9393%" y="1279.50"></text></g><g><title>crossbeam_epoch::default::pin (5 samples, 0.94%)</title><rect x="15.2542%" y="1253" width="0.9416%" height="15" fill="rgb(253,21,26)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1263.50"></text></g><g><title>crossbeam_epoch::default::with_handle (5 samples, 0.94%)</title><rect x="15.2542%" y="1237" width="0.9416%" height="15" fill="rgb(245,139,43)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.94%)</title><rect x="15.2542%" y="1221" width="0.9416%" height="15" fill="rgb(252,170,7)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1231.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (5 samples, 0.94%)</title><rect x="15.2542%" y="1205" width="0.9416%" height="15" fill="rgb(231,118,14)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1215.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (5 samples, 0.94%)</title><rect x="15.2542%" y="1189" width="0.9416%" height="15" fill="rgb(238,83,0)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1199.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (5 samples, 0.94%)</title><rect x="15.2542%" y="1173" width="0.9416%" height="15" fill="rgb(221,39,39)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1183.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (5 samples, 0.94%)</title><rect x="15.2542%" y="1157" width="0.9416%" height="15" fill="rgb(222,119,46)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1167.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (5 samples, 0.94%)</title><rect x="15.2542%" y="1141" width="0.9416%" height="15" fill="rgb(222,165,49)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1151.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (5 samples, 0.94%)</title><rect x="15.2542%" y="1125" width="0.9416%" height="15" fill="rgb(219,113,52)" fg:x="81" fg:w="5"/><text x="15.5042%" y="1135.50"></text></g><g><title>rayon_core::sleep::IdleState::wake_fully (1 samples, 0.19%)</title><rect x="16.1959%" y="1253" width="0.1883%" height="15" fill="rgb(214,7,15)" fg:x="86" fg:w="1"/><text x="16.4459%" y="1263.50"></text></g><g><title>std::sys::unix::futex::futex_wait (33 samples, 6.21%)</title><rect x="16.3842%" y="1205" width="6.2147%" height="15" fill="rgb(235,32,4)" fg:x="87" fg:w="33"/><text x="16.6342%" y="1215.50">std::sys..</text></g><g><title>syscall (33 samples, 6.21%)</title><rect x="16.3842%" y="1189" width="6.2147%" height="15" fill="rgb(238,90,54)" fg:x="87" fg:w="33"/><text x="16.6342%" y="1199.50">syscall</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (94 samples, 17.70%)</title><rect x="5.0847%" y="1525" width="17.7024%" height="15" fill="rgb(213,208,19)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1535.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (94 samples, 17.70%)</title><rect x="5.0847%" y="1509" width="17.7024%" height="15" fill="rgb(233,156,4)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1519.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (94 samples, 17.70%)</title><rect x="5.0847%" y="1493" width="17.7024%" height="15" fill="rgb(207,194,5)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1503.50">core::ops::function::FnOnce:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (94 samples, 17.70%)</title><rect x="5.0847%" y="1477" width="17.7024%" height="15" fill="rgb(206,111,30)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1487.50">std::thread::Builder::spawn_..</text></g><g><title>std::panic::catch_unwind (94 samples, 17.70%)</title><rect x="5.0847%" y="1461" width="17.7024%" height="15" fill="rgb(243,70,54)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1471.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (94 samples, 17.70%)</title><rect x="5.0847%" y="1445" width="17.7024%" height="15" fill="rgb(242,28,8)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1455.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (94 samples, 17.70%)</title><rect x="5.0847%" y="1429" width="17.7024%" height="15" fill="rgb(219,106,18)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1439.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (94 samples, 17.70%)</title><rect x="5.0847%" y="1413" width="17.7024%" height="15" fill="rgb(244,222,10)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1423.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (94 samples, 17.70%)</title><rect x="5.0847%" y="1397" width="17.7024%" height="15" fill="rgb(236,179,52)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1407.50">std::thread::Builder::spawn_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (94 samples, 17.70%)</title><rect x="5.0847%" y="1381" width="17.7024%" height="15" fill="rgb(213,23,39)" fg:x="27" fg:w="94"/><text x="5.3347%" y="1391.50">std::sys_common::backtrace::..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (58 samples, 10.92%)</title><rect x="11.8644%" y="1365" width="10.9228%" height="15" fill="rgb(238,48,10)" fg:x="63" fg:w="58"/><text x="12.1144%" y="1375.50">&lt;rayon_core::reg..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (58 samples, 10.92%)</title><rect x="11.8644%" y="1349" width="10.9228%" height="15" fill="rgb(251,196,23)" fg:x="63" fg:w="58"/><text x="12.1144%" y="1359.50">rayon_core::regi..</text></g><g><title>rayon_core::registry::main_loop (58 samples, 10.92%)</title><rect x="11.8644%" y="1333" width="10.9228%" height="15" fill="rgb(250,152,24)" fg:x="63" fg:w="58"/><text x="12.1144%" y="1343.50">rayon_core::regi..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (58 samples, 10.92%)</title><rect x="11.8644%" y="1317" width="10.9228%" height="15" fill="rgb(209,150,17)" fg:x="63" fg:w="58"/><text x="12.1144%" y="1327.50">rayon_core::regi..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (58 samples, 10.92%)</title><rect x="11.8644%" y="1301" width="10.9228%" height="15" fill="rgb(234,202,34)" fg:x="63" fg:w="58"/><text x="12.1144%" y="1311.50">rayon_core::regi..</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (35 samples, 6.59%)</title><rect x="16.1959%" y="1285" width="6.5913%" height="15" fill="rgb(253,148,53)" fg:x="86" fg:w="35"/><text x="16.4459%" y="1295.50">rayon_cor..</text></g><g><title>rayon_core::sleep::Sleep::sleep (35 samples, 6.59%)</title><rect x="16.1959%" y="1269" width="6.5913%" height="15" fill="rgb(218,129,16)" fg:x="86" fg:w="35"/><text x="16.4459%" y="1279.50">rayon_cor..</text></g><g><title>std::sync::condvar::Condvar::wait (34 samples, 6.40%)</title><rect x="16.3842%" y="1253" width="6.4030%" height="15" fill="rgb(216,85,19)" fg:x="87" fg:w="34"/><text x="16.6342%" y="1263.50">std::syn..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (34 samples, 6.40%)</title><rect x="16.3842%" y="1237" width="6.4030%" height="15" fill="rgb(235,228,7)" fg:x="87" fg:w="34"/><text x="16.6342%" y="1247.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (34 samples, 6.40%)</title><rect x="16.3842%" y="1221" width="6.4030%" height="15" fill="rgb(245,175,0)" fg:x="87" fg:w="34"/><text x="16.6342%" y="1231.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="22.5989%" y="1205" width="0.1883%" height="15" fill="rgb(208,168,36)" fg:x="120" fg:w="1"/><text x="22.8489%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.19%)</title><rect x="22.5989%" y="1189" width="0.1883%" height="15" fill="rgb(246,171,24)" fg:x="120" fg:w="1"/><text x="22.8489%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="22.5989%" y="1173" width="0.1883%" height="15" fill="rgb(215,142,24)" fg:x="120" fg:w="1"/><text x="22.8489%" y="1183.50"></text></g><g><title>__clone3 (105 samples, 19.77%)</title><rect x="3.9548%" y="1573" width="19.7740%" height="15" fill="rgb(250,187,7)" fg:x="21" fg:w="105"/><text x="4.2048%" y="1583.50">__clone3</text></g><g><title>start_thread (99 samples, 18.64%)</title><rect x="5.0847%" y="1557" width="18.6441%" height="15" fill="rgb(228,66,33)" fg:x="27" fg:w="99"/><text x="5.3347%" y="1567.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (99 samples, 18.64%)</title><rect x="5.0847%" y="1541" width="18.6441%" height="15" fill="rgb(234,215,21)" fg:x="27" fg:w="99"/><text x="5.3347%" y="1551.50">std::sys::unix::thread::Threa..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.94%)</title><rect x="22.7872%" y="1525" width="0.9416%" height="15" fill="rgb(222,191,20)" fg:x="121" fg:w="5"/><text x="23.0372%" y="1535.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.94%)</title><rect x="22.7872%" y="1509" width="0.9416%" height="15" fill="rgb(245,79,54)" fg:x="121" fg:w="5"/><text x="23.0372%" y="1519.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 0.94%)</title><rect x="22.7872%" y="1493" width="0.9416%" height="15" fill="rgb(240,10,37)" fg:x="121" fg:w="5"/><text x="23.0372%" y="1503.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 0.94%)</title><rect x="22.7872%" y="1477" width="0.9416%" height="15" fill="rgb(214,192,32)" fg:x="121" fg:w="5"/><text x="23.0372%" y="1487.50"></text></g><g><title>__GI___mmap64 (5 samples, 0.94%)</title><rect x="22.7872%" y="1461" width="0.9416%" height="15" fill="rgb(209,36,54)" fg:x="121" fg:w="5"/><text x="23.0372%" y="1471.50"></text></g><g><title>_fini (1 samples, 0.19%)</title><rect x="23.7288%" y="1573" width="0.1883%" height="15" fill="rgb(220,10,11)" fg:x="126" fg:w="1"/><text x="23.9788%" y="1583.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="23.7288%" y="1557" width="0.1883%" height="15" fill="rgb(221,106,17)" fg:x="126" fg:w="1"/><text x="23.9788%" y="1567.50"></text></g><g><title>_int_free (1 samples, 0.19%)</title><rect x="23.9171%" y="1573" width="0.1883%" height="15" fill="rgb(251,142,44)" fg:x="127" fg:w="1"/><text x="24.1671%" y="1583.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.19%)</title><rect x="25.0471%" y="1445" width="0.1883%" height="15" fill="rgb(238,13,15)" fg:x="133" fg:w="1"/><text x="25.2971%" y="1455.50"></text></g><g><title>std::rt::cleanup (1 samples, 0.19%)</title><rect x="25.0471%" y="1429" width="0.1883%" height="15" fill="rgb(208,107,27)" fg:x="133" fg:w="1"/><text x="25.2971%" y="1439.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.19%)</title><rect x="25.0471%" y="1413" width="0.1883%" height="15" fill="rgb(205,136,37)" fg:x="133" fg:w="1"/><text x="25.2971%" y="1423.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.19%)</title><rect x="25.0471%" y="1397" width="0.1883%" height="15" fill="rgb(250,205,27)" fg:x="133" fg:w="1"/><text x="25.2971%" y="1407.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.94%)</title><rect x="25.2354%" y="1269" width="0.9416%" height="15" fill="rgb(210,80,43)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.94%)</title><rect x="25.2354%" y="1253" width="0.9416%" height="15" fill="rgb(247,160,36)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.94%)</title><rect x="25.2354%" y="1237" width="0.9416%" height="15" fill="rgb(234,13,49)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.94%)</title><rect x="25.2354%" y="1221" width="0.9416%" height="15" fill="rgb(234,122,0)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.94%)</title><rect x="25.2354%" y="1205" width="0.9416%" height="15" fill="rgb(207,146,38)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.94%)</title><rect x="25.2354%" y="1189" width="0.9416%" height="15" fill="rgb(207,177,25)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.94%)</title><rect x="25.2354%" y="1173" width="0.9416%" height="15" fill="rgb(211,178,42)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.94%)</title><rect x="25.2354%" y="1157" width="0.9416%" height="15" fill="rgb(230,69,54)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.94%)</title><rect x="25.2354%" y="1141" width="0.9416%" height="15" fill="rgb(214,135,41)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.94%)</title><rect x="25.2354%" y="1125" width="0.9416%" height="15" fill="rgb(237,67,25)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.94%)</title><rect x="25.2354%" y="1109" width="0.9416%" height="15" fill="rgb(222,189,50)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1119.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.94%)</title><rect x="25.2354%" y="1093" width="0.9416%" height="15" fill="rgb(245,148,34)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1103.50"></text></g><g><title>__GI___lll_lock_wait_private (5 samples, 0.94%)</title><rect x="25.2354%" y="1077" width="0.9416%" height="15" fill="rgb(222,29,6)" fg:x="134" fg:w="5"/><text x="25.4854%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.75%)</title><rect x="26.1770%" y="1077" width="0.7533%" height="15" fill="rgb(221,189,43)" fg:x="139" fg:w="4"/><text x="26.4270%" y="1087.50"></text></g><g><title>syscall (4 samples, 0.75%)</title><rect x="26.1770%" y="1061" width="0.7533%" height="15" fill="rgb(207,36,27)" fg:x="139" fg:w="4"/><text x="26.4270%" y="1071.50"></text></g><g><title>__libc_start_main_alias_2 (11 samples, 2.07%)</title><rect x="25.0471%" y="1557" width="2.0716%" height="15" fill="rgb(217,90,24)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1567.50">_..</text></g><g><title>__libc_start_call_main (11 samples, 2.07%)</title><rect x="25.0471%" y="1541" width="2.0716%" height="15" fill="rgb(224,66,35)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1551.50">_..</text></g><g><title>main (11 samples, 2.07%)</title><rect x="25.0471%" y="1525" width="2.0716%" height="15" fill="rgb(221,13,50)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1535.50">m..</text></g><g><title>std::rt::lang_start_internal (11 samples, 2.07%)</title><rect x="25.0471%" y="1509" width="2.0716%" height="15" fill="rgb(236,68,49)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1519.50">s..</text></g><g><title>std::panic::catch_unwind (11 samples, 2.07%)</title><rect x="25.0471%" y="1493" width="2.0716%" height="15" fill="rgb(229,146,28)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1503.50">s..</text></g><g><title>std::panicking::try (11 samples, 2.07%)</title><rect x="25.0471%" y="1477" width="2.0716%" height="15" fill="rgb(225,31,38)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1487.50">s..</text></g><g><title>std::panicking::try::do_call (11 samples, 2.07%)</title><rect x="25.0471%" y="1461" width="2.0716%" height="15" fill="rgb(250,208,3)" fg:x="133" fg:w="11"/><text x="25.2971%" y="1471.50">s..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (10 samples, 1.88%)</title><rect x="25.2354%" y="1445" width="1.8832%" height="15" fill="rgb(246,54,23)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1455.50">s..</text></g><g><title>std::panic::catch_unwind (10 samples, 1.88%)</title><rect x="25.2354%" y="1429" width="1.8832%" height="15" fill="rgb(243,76,11)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1439.50">s..</text></g><g><title>std::panicking::try (10 samples, 1.88%)</title><rect x="25.2354%" y="1413" width="1.8832%" height="15" fill="rgb(245,21,50)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1423.50">s..</text></g><g><title>std::panicking::try::do_call (10 samples, 1.88%)</title><rect x="25.2354%" y="1397" width="1.8832%" height="15" fill="rgb(228,9,43)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1407.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10 samples, 1.88%)</title><rect x="25.2354%" y="1381" width="1.8832%" height="15" fill="rgb(208,100,47)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1391.50">c..</text></g><g><title>std::rt::lang_start::{{closure}} (10 samples, 1.88%)</title><rect x="25.2354%" y="1365" width="1.8832%" height="15" fill="rgb(232,26,8)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1375.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 1.88%)</title><rect x="25.2354%" y="1349" width="1.8832%" height="15" fill="rgb(216,166,38)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1359.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 1.88%)</title><rect x="25.2354%" y="1333" width="1.8832%" height="15" fill="rgb(251,202,51)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1343.50">c..</text></g><g><title>dashboard::main (10 samples, 1.88%)</title><rect x="25.2354%" y="1317" width="1.8832%" height="15" fill="rgb(254,216,34)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1327.50">d..</text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (10 samples, 1.88%)</title><rect x="25.2354%" y="1301" width="1.8832%" height="15" fill="rgb(251,32,27)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1311.50">c..</text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (10 samples, 1.88%)</title><rect x="25.2354%" y="1285" width="1.8832%" height="15" fill="rgb(208,127,28)" fg:x="134" fg:w="10"/><text x="25.4854%" y="1295.50">t..</text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (5 samples, 0.94%)</title><rect x="26.1770%" y="1269" width="0.9416%" height="15" fill="rgb(224,137,22)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1279.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (5 samples, 0.94%)</title><rect x="26.1770%" y="1253" width="0.9416%" height="15" fill="rgb(254,70,32)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1263.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (5 samples, 0.94%)</title><rect x="26.1770%" y="1237" width="0.9416%" height="15" fill="rgb(229,75,37)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1247.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (5 samples, 0.94%)</title><rect x="26.1770%" y="1221" width="0.9416%" height="15" fill="rgb(252,64,23)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1231.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (5 samples, 0.94%)</title><rect x="26.1770%" y="1205" width="0.9416%" height="15" fill="rgb(232,162,48)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.94%)</title><rect x="26.1770%" y="1189" width="0.9416%" height="15" fill="rgb(246,160,12)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1199.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (5 samples, 0.94%)</title><rect x="26.1770%" y="1173" width="0.9416%" height="15" fill="rgb(247,166,0)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1183.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (5 samples, 0.94%)</title><rect x="26.1770%" y="1157" width="0.9416%" height="15" fill="rgb(249,219,21)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1167.50"></text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 0.94%)</title><rect x="26.1770%" y="1141" width="0.9416%" height="15" fill="rgb(205,209,3)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1151.50"></text></g><g><title>std::sync::condvar::Condvar::wait (5 samples, 0.94%)</title><rect x="26.1770%" y="1125" width="0.9416%" height="15" fill="rgb(243,44,1)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (5 samples, 0.94%)</title><rect x="26.1770%" y="1109" width="0.9416%" height="15" fill="rgb(206,159,16)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1119.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 0.94%)</title><rect x="26.1770%" y="1093" width="0.9416%" height="15" fill="rgb(244,77,30)" fg:x="139" fg:w="5"/><text x="26.4270%" y="1103.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="26.9303%" y="1077" width="0.1883%" height="15" fill="rgb(218,69,12)" fg:x="143" fg:w="1"/><text x="27.1803%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.19%)</title><rect x="26.9303%" y="1061" width="0.1883%" height="15" fill="rgb(212,87,7)" fg:x="143" fg:w="1"/><text x="27.1803%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="26.9303%" y="1045" width="0.1883%" height="15" fill="rgb(245,114,25)" fg:x="143" fg:w="1"/><text x="27.1803%" y="1055.50"></text></g><g><title>dl_main (1 samples, 0.19%)</title><rect x="27.1186%" y="1509" width="0.1883%" height="15" fill="rgb(210,61,42)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1519.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.19%)</title><rect x="27.1186%" y="1493" width="0.1883%" height="15" fill="rgb(211,52,33)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1503.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.19%)</title><rect x="27.1186%" y="1477" width="0.1883%" height="15" fill="rgb(234,58,33)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1487.50"></text></g><g><title>elf_machine_rela (1 samples, 0.19%)</title><rect x="27.1186%" y="1461" width="0.1883%" height="15" fill="rgb(220,115,36)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1471.50"></text></g><g><title>resolve_map (1 samples, 0.19%)</title><rect x="27.1186%" y="1445" width="0.1883%" height="15" fill="rgb(243,153,54)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1455.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.19%)</title><rect x="27.1186%" y="1429" width="0.1883%" height="15" fill="rgb(251,47,18)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1439.50"></text></g><g><title>do_lookup_x (1 samples, 0.19%)</title><rect x="27.1186%" y="1413" width="0.1883%" height="15" fill="rgb(242,102,42)" fg:x="144" fg:w="1"/><text x="27.3686%" y="1423.50"></text></g><g><title>_start (18 samples, 3.39%)</title><rect x="24.1055%" y="1573" width="3.3898%" height="15" fill="rgb(234,31,38)" fg:x="128" fg:w="18"/><text x="24.3555%" y="1583.50">_st..</text></g><g><title>_dl_start (2 samples, 0.38%)</title><rect x="27.1186%" y="1557" width="0.3766%" height="15" fill="rgb(221,117,51)" fg:x="144" fg:w="2"/><text x="27.3686%" y="1567.50"></text></g><g><title>_dl_start_final (2 samples, 0.38%)</title><rect x="27.1186%" y="1541" width="0.3766%" height="15" fill="rgb(212,20,18)" fg:x="144" fg:w="2"/><text x="27.3686%" y="1551.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.38%)</title><rect x="27.1186%" y="1525" width="0.3766%" height="15" fill="rgb(245,133,36)" fg:x="144" fg:w="2"/><text x="27.3686%" y="1535.50"></text></g><g><title>dl_platform_init (1 samples, 0.19%)</title><rect x="27.3070%" y="1509" width="0.1883%" height="15" fill="rgb(212,6,19)" fg:x="145" fg:w="1"/><text x="27.5570%" y="1519.50"></text></g><g><title>init_cpu_features (1 samples, 0.19%)</title><rect x="27.3070%" y="1493" width="0.1883%" height="15" fill="rgb(218,1,36)" fg:x="145" fg:w="1"/><text x="27.5570%" y="1503.50"></text></g><g><title>update_active (1 samples, 0.19%)</title><rect x="27.3070%" y="1477" width="0.1883%" height="15" fill="rgb(246,84,54)" fg:x="145" fg:w="1"/><text x="27.5570%" y="1487.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.19%)</title><rect x="27.4953%" y="1573" width="0.1883%" height="15" fill="rgb(242,110,6)" fg:x="146" fg:w="1"/><text x="27.7453%" y="1583.50"></text></g><g><title>&lt;dashboard::db::DB as dashboard::gh::GitCliOps&gt;::fetch_repos_write_data (1 samples, 0.19%)</title><rect x="27.8719%" y="1541" width="0.1883%" height="15" fill="rgb(214,47,5)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1551.50"></text></g><g><title>xshell::Cmd::read (1 samples, 0.19%)</title><rect x="27.8719%" y="1525" width="0.1883%" height="15" fill="rgb(218,159,25)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1535.50"></text></g><g><title>xshell::Cmd::read_stream (1 samples, 0.19%)</title><rect x="27.8719%" y="1509" width="0.1883%" height="15" fill="rgb(215,211,28)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1519.50"></text></g><g><title>xshell::Cmd::output_impl (1 samples, 0.19%)</title><rect x="27.8719%" y="1493" width="0.1883%" height="15" fill="rgb(238,59,32)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1503.50"></text></g><g><title>std::process::Child::wait_with_output (1 samples, 0.19%)</title><rect x="27.8719%" y="1477" width="0.1883%" height="15" fill="rgb(226,82,3)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1487.50"></text></g><g><title>&lt;std::process::ChildStdout as std::io::Read&gt;::read_to_end (1 samples, 0.19%)</title><rect x="27.8719%" y="1461" width="0.1883%" height="15" fill="rgb(240,164,32)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1471.50"></text></g><g><title>std::sys::unix::pipe::AnonPipe::read_to_end (1 samples, 0.19%)</title><rect x="27.8719%" y="1445" width="0.1883%" height="15" fill="rgb(232,46,7)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1455.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_to_end (1 samples, 0.19%)</title><rect x="27.8719%" y="1429" width="0.1883%" height="15" fill="rgb(229,129,53)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1439.50"></text></g><g><title>std::io::Read::read_to_end (1 samples, 0.19%)</title><rect x="27.8719%" y="1413" width="0.1883%" height="15" fill="rgb(234,188,29)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1423.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.19%)</title><rect x="27.8719%" y="1397" width="0.1883%" height="15" fill="rgb(246,141,4)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="27.8719%" y="1381" width="0.1883%" height="15" fill="rgb(229,23,39)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="27.8719%" y="1365" width="0.1883%" height="15" fill="rgb(206,12,3)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.19%)</title><rect x="27.8719%" y="1349" width="0.1883%" height="15" fill="rgb(252,226,20)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="27.8719%" y="1333" width="0.1883%" height="15" fill="rgb(216,123,35)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1343.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="27.8719%" y="1317" width="0.1883%" height="15" fill="rgb(212,68,40)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.19%)</title><rect x="27.8719%" y="1301" width="0.1883%" height="15" fill="rgb(254,125,32)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1311.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.19%)</title><rect x="27.8719%" y="1285" width="0.1883%" height="15" fill="rgb(253,97,22)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1295.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.19%)</title><rect x="27.8719%" y="1269" width="0.1883%" height="15" fill="rgb(241,101,14)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1279.50"></text></g><g><title>__realloc (1 samples, 0.19%)</title><rect x="27.8719%" y="1253" width="0.1883%" height="15" fill="rgb(238,103,29)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1263.50"></text></g><g><title>_int_realloc (1 samples, 0.19%)</title><rect x="27.8719%" y="1237" width="0.1883%" height="15" fill="rgb(233,195,47)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1247.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="27.8719%" y="1221" width="0.1883%" height="15" fill="rgb(246,218,30)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1231.50"></text></g><g><title>malloc_consolidate (1 samples, 0.19%)</title><rect x="27.8719%" y="1205" width="0.1883%" height="15" fill="rgb(219,145,47)" fg:x="148" fg:w="1"/><text x="28.1219%" y="1215.50"></text></g><g><title>EVP_KEYMGMT_do_all_provided (2 samples, 0.38%)</title><rect x="28.0603%" y="1221" width="0.3766%" height="15" fill="rgb(243,12,26)" fg:x="149" fg:w="2"/><text x="28.3103%" y="1231.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="28.0603%" y="1205" width="0.3766%" height="15" fill="rgb(214,87,16)" fg:x="149" fg:w="2"/><text x="28.3103%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="28.0603%" y="1189" width="0.3766%" height="15" fill="rgb(208,99,42)" fg:x="149" fg:w="2"/><text x="28.3103%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="28.2486%" y="1173" width="0.1883%" height="15" fill="rgb(253,99,2)" fg:x="150" fg:w="1"/><text x="28.4986%" y="1183.50"></text></g><g><title>OPENSSL_sk_num (1 samples, 0.19%)</title><rect x="28.2486%" y="1157" width="0.1883%" height="15" fill="rgb(220,168,23)" fg:x="150" fg:w="1"/><text x="28.4986%" y="1167.50"></text></g><g><title>EVP_KEYMGMT_is_a (1 samples, 0.19%)</title><rect x="28.4369%" y="1221" width="0.1883%" height="15" fill="rgb(242,38,24)" fg:x="151" fg:w="1"/><text x="28.6869%" y="1231.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="28.4369%" y="1205" width="0.1883%" height="15" fill="rgb(225,182,9)" fg:x="151" fg:w="1"/><text x="28.6869%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="28.4369%" y="1189" width="0.1883%" height="15" fill="rgb(243,178,37)" fg:x="151" fg:w="1"/><text x="28.6869%" y="1199.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.19%)</title><rect x="28.4369%" y="1173" width="0.1883%" height="15" fill="rgb(232,139,19)" fg:x="151" fg:w="1"/><text x="28.6869%" y="1183.50"></text></g><g><title>___pthread_rwlock_unlock (1 samples, 0.19%)</title><rect x="28.4369%" y="1157" width="0.1883%" height="15" fill="rgb(225,201,24)" fg:x="151" fg:w="1"/><text x="28.6869%" y="1167.50"></text></g><g><title>OSSL_DECODER_do_all_provided (1 samples, 0.19%)</title><rect x="28.6252%" y="1205" width="0.1883%" height="15" fill="rgb(221,47,46)" fg:x="152" fg:w="1"/><text x="28.8752%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="28.6252%" y="1189" width="0.1883%" height="15" fill="rgb(249,23,13)" fg:x="152" fg:w="1"/><text x="28.8752%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="28.6252%" y="1173" width="0.1883%" height="15" fill="rgb(219,9,5)" fg:x="152" fg:w="1"/><text x="28.8752%" y="1183.50"></text></g><g><title>OPENSSL_sk_value (1 samples, 0.19%)</title><rect x="28.6252%" y="1157" width="0.1883%" height="15" fill="rgb(254,171,16)" fg:x="152" fg:w="1"/><text x="28.8752%" y="1167.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (5 samples, 0.94%)</title><rect x="28.6252%" y="1221" width="0.9416%" height="15" fill="rgb(230,171,20)" fg:x="152" fg:w="5"/><text x="28.8752%" y="1231.50"></text></g><g><title>OSSL_DECODER_is_a (4 samples, 0.75%)</title><rect x="28.8136%" y="1205" width="0.7533%" height="15" fill="rgb(210,71,41)" fg:x="153" fg:w="4"/><text x="29.0636%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (4 samples, 0.75%)</title><rect x="28.8136%" y="1189" width="0.7533%" height="15" fill="rgb(206,173,20)" fg:x="153" fg:w="4"/><text x="29.0636%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.8] (3 samples, 0.56%)</title><rect x="29.0019%" y="1173" width="0.5650%" height="15" fill="rgb(233,88,34)" fg:x="154" fg:w="3"/><text x="29.2519%" y="1183.50"></text></g><g><title>CRYPTO_THREAD_unlock (3 samples, 0.56%)</title><rect x="29.0019%" y="1157" width="0.5650%" height="15" fill="rgb(223,209,46)" fg:x="154" fg:w="3"/><text x="29.2519%" y="1167.50"></text></g><g><title>___pthread_rwlock_unlock (3 samples, 0.56%)</title><rect x="29.0019%" y="1141" width="0.5650%" height="15" fill="rgb(250,43,18)" fg:x="154" fg:w="3"/><text x="29.2519%" y="1151.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (10 samples, 1.88%)</title><rect x="28.0603%" y="1237" width="1.8832%" height="15" fill="rgb(208,13,10)" fg:x="149" fg:w="10"/><text x="28.3103%" y="1247.50">O..</text></g><g><title>OSSL_DECODER_do_all_provided (2 samples, 0.38%)</title><rect x="29.5669%" y="1221" width="0.3766%" height="15" fill="rgb(212,200,36)" fg:x="157" fg:w="2"/><text x="29.8169%" y="1231.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="29.5669%" y="1205" width="0.3766%" height="15" fill="rgb(225,90,30)" fg:x="157" fg:w="2"/><text x="29.8169%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="29.5669%" y="1189" width="0.3766%" height="15" fill="rgb(236,182,39)" fg:x="157" fg:w="2"/><text x="29.8169%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="29.5669%" y="1173" width="0.3766%" height="15" fill="rgb(212,144,35)" fg:x="157" fg:w="2"/><text x="29.8169%" y="1183.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="29.5669%" y="1157" width="0.3766%" height="15" fill="rgb(228,63,44)" fg:x="157" fg:w="2"/><text x="29.8169%" y="1167.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.7552%" y="1141" width="0.1883%" height="15" fill="rgb(228,109,6)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1151.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.7552%" y="1125" width="0.1883%" height="15" fill="rgb(238,117,24)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.7552%" y="1109" width="0.1883%" height="15" fill="rgb(242,26,26)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1119.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.7552%" y="1093" width="0.1883%" height="15" fill="rgb(221,92,48)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1103.50"></text></g><g><title>OPENSSL_LH_retrieve (1 samples, 0.19%)</title><rect x="29.7552%" y="1077" width="0.1883%" height="15" fill="rgb(209,209,32)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1087.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.7552%" y="1061" width="0.1883%" height="15" fill="rgb(221,70,22)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1071.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.7552%" y="1045" width="0.1883%" height="15" fill="rgb(248,145,5)" fg:x="158" fg:w="1"/><text x="30.0052%" y="1055.50"></text></g><g><title>OSSL_DECODER_from_data (1 samples, 0.19%)</title><rect x="29.9435%" y="1237" width="0.1883%" height="15" fill="rgb(226,116,26)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1247.50"></text></g><g><title>OSSL_DECODER_from_bio (1 samples, 0.19%)</title><rect x="29.9435%" y="1221" width="0.1883%" height="15" fill="rgb(244,5,17)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1231.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1205" width="0.1883%" height="15" fill="rgb(252,159,33)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1189" width="0.1883%" height="15" fill="rgb(206,71,0)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1199.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1173" width="0.1883%" height="15" fill="rgb(233,118,54)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1183.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1157" width="0.1883%" height="15" fill="rgb(234,83,48)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1167.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1141" width="0.1883%" height="15" fill="rgb(228,3,54)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1151.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1125" width="0.1883%" height="15" fill="rgb(226,155,13)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1135.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1109" width="0.1883%" height="15" fill="rgb(241,28,37)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1119.50"></text></g><g><title>EVP_PKEY_set_type_by_keymgmt (1 samples, 0.19%)</title><rect x="29.9435%" y="1093" width="0.1883%" height="15" fill="rgb(233,93,10)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1103.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1077" width="0.1883%" height="15" fill="rgb(225,113,19)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1087.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="29.9435%" y="1061" width="0.1883%" height="15" fill="rgb(241,2,18)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1071.50"></text></g><g><title>EVP_PKEY_asn1_find_str (1 samples, 0.19%)</title><rect x="29.9435%" y="1045" width="0.1883%" height="15" fill="rgb(228,207,21)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1055.50"></text></g><g><title>__strlen_avx2 (1 samples, 0.19%)</title><rect x="29.9435%" y="1029" width="0.1883%" height="15" fill="rgb(213,211,35)" fg:x="159" fg:w="1"/><text x="30.1935%" y="1039.50"></text></g><g><title>ASN1_item_d2i_ex (13 samples, 2.45%)</title><rect x="28.0603%" y="1349" width="2.4482%" height="15" fill="rgb(209,83,10)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1359.50">AS..</text></g><g><title>[libcrypto.so.3.0.8] (13 samples, 2.45%)</title><rect x="28.0603%" y="1333" width="2.4482%" height="15" fill="rgb(209,164,1)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1343.50">[l..</text></g><g><title>[libcrypto.so.3.0.8] (13 samples, 2.45%)</title><rect x="28.0603%" y="1317" width="2.4482%" height="15" fill="rgb(213,184,43)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1327.50">[l..</text></g><g><title>[libcrypto.so.3.0.8] (13 samples, 2.45%)</title><rect x="28.0603%" y="1301" width="2.4482%" height="15" fill="rgb(231,61,34)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1311.50">[l..</text></g><g><title>[libcrypto.so.3.0.8] (13 samples, 2.45%)</title><rect x="28.0603%" y="1285" width="2.4482%" height="15" fill="rgb(235,75,3)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1295.50">[l..</text></g><g><title>[libcrypto.so.3.0.8] (13 samples, 2.45%)</title><rect x="28.0603%" y="1269" width="2.4482%" height="15" fill="rgb(220,106,47)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1279.50">[l..</text></g><g><title>[libcrypto.so.3.0.8] (13 samples, 2.45%)</title><rect x="28.0603%" y="1253" width="2.4482%" height="15" fill="rgb(210,196,33)" fg:x="149" fg:w="13"/><text x="28.3103%" y="1263.50">[l..</text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="30.1318%" y="1237" width="0.3766%" height="15" fill="rgb(229,154,42)" fg:x="160" fg:w="2"/><text x="30.3818%" y="1247.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.3202%" y="1221" width="0.1883%" height="15" fill="rgb(228,114,26)" fg:x="161" fg:w="1"/><text x="30.5702%" y="1231.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.3202%" y="1205" width="0.1883%" height="15" fill="rgb(208,144,1)" fg:x="161" fg:w="1"/><text x="30.5702%" y="1215.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.3202%" y="1189" width="0.1883%" height="15" fill="rgb(239,112,37)" fg:x="161" fg:w="1"/><text x="30.5702%" y="1199.50"></text></g><g><title>OBJ_obj2nid (1 samples, 0.19%)</title><rect x="30.3202%" y="1173" width="0.1883%" height="15" fill="rgb(210,96,50)" fg:x="161" fg:w="1"/><text x="30.5702%" y="1183.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.3202%" y="1157" width="0.1883%" height="15" fill="rgb(222,178,2)" fg:x="161" fg:w="1"/><text x="30.5702%" y="1167.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.19%)</title><rect x="30.3202%" y="1141" width="0.1883%" height="15" fill="rgb(226,74,18)" fg:x="161" fg:w="1"/><text x="30.5702%" y="1151.50"></text></g><g><title>openssl::ssl::SslContextBuilder::set_default_verify_paths (14 samples, 2.64%)</title><rect x="28.0603%" y="1429" width="2.6365%" height="15" fill="rgb(225,67,54)" fg:x="149" fg:w="14"/><text x="28.3103%" y="1439.50">op..</text></g><g><title>X509_STORE_set_default_paths_ex (14 samples, 2.64%)</title><rect x="28.0603%" y="1413" width="2.6365%" height="15" fill="rgb(251,92,32)" fg:x="149" fg:w="14"/><text x="28.3103%" y="1423.50">X5..</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 2.64%)</title><rect x="28.0603%" y="1397" width="2.6365%" height="15" fill="rgb(228,149,22)" fg:x="149" fg:w="14"/><text x="28.3103%" y="1407.50">[l..</text></g><g><title>X509_load_cert_crl_file_ex (14 samples, 2.64%)</title><rect x="28.0603%" y="1381" width="2.6365%" height="15" fill="rgb(243,54,13)" fg:x="149" fg:w="14"/><text x="28.3103%" y="1391.50">X5..</text></g><g><title>PEM_X509_INFO_read_bio_ex (14 samples, 2.64%)</title><rect x="28.0603%" y="1365" width="2.6365%" height="15" fill="rgb(243,180,28)" fg:x="149" fg:w="14"/><text x="28.3103%" y="1375.50">PE..</text></g><g><title>PEM_read_bio_ex (1 samples, 0.19%)</title><rect x="30.5085%" y="1349" width="0.1883%" height="15" fill="rgb(208,167,24)" fg:x="162" fg:w="1"/><text x="30.7585%" y="1359.50"></text></g><g><title>EVP_DecodeUpdate (1 samples, 0.19%)</title><rect x="30.5085%" y="1333" width="0.1883%" height="15" fill="rgb(245,73,45)" fg:x="162" fg:w="1"/><text x="30.7585%" y="1343.50"></text></g><g><title>octocrab::OctocrabBuilder::build (15 samples, 2.82%)</title><rect x="28.0603%" y="1525" width="2.8249%" height="15" fill="rgb(237,203,48)" fg:x="149" fg:w="15"/><text x="28.3103%" y="1535.50">oc..</text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (15 samples, 2.82%)</title><rect x="28.0603%" y="1509" width="2.8249%" height="15" fill="rgb(211,197,16)" fg:x="149" fg:w="15"/><text x="28.3103%" y="1519.50">re..</text></g><g><title>reqwest::connect::Connector::new_default_tls (15 samples, 2.82%)</title><rect x="28.0603%" y="1493" width="2.8249%" height="15" fill="rgb(243,99,51)" fg:x="149" fg:w="15"/><text x="28.3103%" y="1503.50">re..</text></g><g><title>native_tls::TlsConnectorBuilder::build (15 samples, 2.82%)</title><rect x="28.0603%" y="1477" width="2.8249%" height="15" fill="rgb(215,123,29)" fg:x="149" fg:w="15"/><text x="28.3103%" y="1487.50">na..</text></g><g><title>native_tls::imp::TlsConnector::new (15 samples, 2.82%)</title><rect x="28.0603%" y="1461" width="2.8249%" height="15" fill="rgb(239,186,37)" fg:x="149" fg:w="15"/><text x="28.3103%" y="1471.50">na..</text></g><g><title>openssl::ssl::connector::SslConnector::builder (15 samples, 2.82%)</title><rect x="28.0603%" y="1445" width="2.8249%" height="15" fill="rgb(252,136,39)" fg:x="149" fg:w="15"/><text x="28.3103%" y="1455.50">op..</text></g><g><title>openssl::ssl::connector::ctx (1 samples, 0.19%)</title><rect x="30.6968%" y="1429" width="0.1883%" height="15" fill="rgb(223,213,32)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1439.50"></text></g><g><title>openssl::ssl::SslContextBuilder::new (1 samples, 0.19%)</title><rect x="30.6968%" y="1413" width="0.1883%" height="15" fill="rgb(233,115,5)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1423.50"></text></g><g><title>SSL_CTX_new_ex (1 samples, 0.19%)</title><rect x="30.6968%" y="1397" width="0.1883%" height="15" fill="rgb(207,226,44)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1407.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.6968%" y="1381" width="0.1883%" height="15" fill="rgb(208,126,0)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1391.50"></text></g><g><title>EVP_CIPHER_fetch (1 samples, 0.19%)</title><rect x="30.6968%" y="1365" width="0.1883%" height="15" fill="rgb(244,66,21)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1375.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.6968%" y="1349" width="0.1883%" height="15" fill="rgb(222,97,12)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1359.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.6968%" y="1333" width="0.1883%" height="15" fill="rgb(219,213,19)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1343.50"></text></g><g><title>OBJ_NAME_do_all (1 samples, 0.19%)</title><rect x="30.6968%" y="1317" width="0.1883%" height="15" fill="rgb(252,169,30)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1327.50"></text></g><g><title>OPENSSL_LH_doall_arg (1 samples, 0.19%)</title><rect x="30.6968%" y="1301" width="0.1883%" height="15" fill="rgb(206,32,51)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1311.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="30.6968%" y="1285" width="0.1883%" height="15" fill="rgb(250,172,42)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1295.50"></text></g><g><title>OBJ_obj2txt (1 samples, 0.19%)</title><rect x="30.6968%" y="1269" width="0.1883%" height="15" fill="rgb(209,34,43)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1279.50"></text></g><g><title>BIO_snprintf (1 samples, 0.19%)</title><rect x="30.6968%" y="1253" width="0.1883%" height="15" fill="rgb(223,11,35)" fg:x="163" fg:w="1"/><text x="30.9468%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as bytes::buf::buf_mut::BufMut&gt;::put (1 samples, 0.19%)</title><rect x="31.0734%" y="1397" width="0.1883%" height="15" fill="rgb(251,219,26)" fg:x="165" fg:w="1"/><text x="31.3234%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="31.0734%" y="1381" width="0.1883%" height="15" fill="rgb(231,119,3)" fg:x="165" fg:w="1"/><text x="31.3234%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="31.0734%" y="1365" width="0.1883%" height="15" fill="rgb(216,97,11)" fg:x="165" fg:w="1"/><text x="31.3234%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.19%)</title><rect x="31.0734%" y="1349" width="0.1883%" height="15" fill="rgb(223,59,9)" fg:x="165" fg:w="1"/><text x="31.3234%" y="1359.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="31.0734%" y="1333" width="0.1883%" height="15" fill="rgb(233,93,31)" fg:x="165" fg:w="1"/><text x="31.3234%" y="1343.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="31.0734%" y="1317" width="0.1883%" height="15" fill="rgb(239,81,33)" fg:x="165" fg:w="1"/><text x="31.3234%" y="1327.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::option::Option&lt;core::result::Result&lt;T,E&gt;&gt;&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.19%)</title><rect x="31.2618%" y="1205" width="0.1883%" height="15" fill="rgb(213,120,34)" fg:x="166" fg:w="1"/><text x="31.5118%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.19%)</title><rect x="31.4501%" y="1109" width="0.1883%" height="15" fill="rgb(243,49,53)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (1 samples, 0.19%)</title><rect x="31.4501%" y="1093" width="0.1883%" height="15" fill="rgb(247,216,33)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1103.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.19%)</title><rect x="31.4501%" y="1077" width="0.1883%" height="15" fill="rgb(226,26,14)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1087.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 0.19%)</title><rect x="31.4501%" y="1061" width="0.1883%" height="15" fill="rgb(215,49,53)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1071.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (1 samples, 0.19%)</title><rect x="31.4501%" y="1045" width="0.1883%" height="15" fill="rgb(245,162,40)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1055.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.19%)</title><rect x="31.4501%" y="1029" width="0.1883%" height="15" fill="rgb(229,68,17)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1039.50"></text></g><g><title>tokio::runtime::io::Handle::unpark (1 samples, 0.19%)</title><rect x="31.4501%" y="1013" width="0.1883%" height="15" fill="rgb(213,182,10)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1023.50"></text></g><g><title>mio::waker::Waker::wake (1 samples, 0.19%)</title><rect x="31.4501%" y="997" width="0.1883%" height="15" fill="rgb(245,125,30)" fg:x="167" fg:w="1"/><text x="31.7001%" y="1007.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::unpark_one (2 samples, 0.38%)</title><rect x="31.4501%" y="1173" width="0.3766%" height="15" fill="rgb(232,202,2)" fg:x="167" fg:w="2"/><text x="31.7001%" y="1183.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.38%)</title><rect x="31.4501%" y="1157" width="0.3766%" height="15" fill="rgb(237,140,51)" fg:x="167" fg:w="2"/><text x="31.7001%" y="1167.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (2 samples, 0.38%)</title><rect x="31.4501%" y="1141" width="0.3766%" height="15" fill="rgb(236,157,25)" fg:x="167" fg:w="2"/><text x="31.7001%" y="1151.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (2 samples, 0.38%)</title><rect x="31.4501%" y="1125" width="0.3766%" height="15" fill="rgb(219,209,0)" fg:x="167" fg:w="2"/><text x="31.7001%" y="1135.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.19%)</title><rect x="31.6384%" y="1109" width="0.1883%" height="15" fill="rgb(240,116,54)" fg:x="168" fg:w="1"/><text x="31.8884%" y="1119.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (1 samples, 0.19%)</title><rect x="31.6384%" y="1093" width="0.1883%" height="15" fill="rgb(216,10,36)" fg:x="168" fg:w="1"/><text x="31.8884%" y="1103.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_inner (1 samples, 0.19%)</title><rect x="31.6384%" y="1077" width="0.1883%" height="15" fill="rgb(222,72,44)" fg:x="168" fg:w="1"/><text x="31.8884%" y="1087.50"></text></g><g><title>core::mem::drop (1 samples, 0.19%)</title><rect x="31.8267%" y="1141" width="0.1883%" height="15" fill="rgb(232,159,9)" fg:x="169" fg:w="1"/><text x="32.0767%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;bytes::bytes::Bytes,hyper::error::Error&gt;&gt;&gt;&gt; (1 samples, 0.19%)</title><rect x="31.8267%" y="1125" width="0.1883%" height="15" fill="rgb(210,39,32)" fg:x="169" fg:w="1"/><text x="32.0767%" y="1135.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.19%)</title><rect x="31.8267%" y="1109" width="0.1883%" height="15" fill="rgb(216,194,45)" fg:x="169" fg:w="1"/><text x="32.0767%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.19%)</title><rect x="31.8267%" y="1093" width="0.1883%" height="15" fill="rgb(218,18,35)" fg:x="169" fg:w="1"/><text x="32.0767%" y="1103.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.19%)</title><rect x="31.8267%" y="1077" width="0.1883%" height="15" fill="rgb(207,83,51)" fg:x="169" fg:w="1"/><text x="32.0767%" y="1087.50"></text></g><g><title>__free (1 samples, 0.19%)</title><rect x="31.8267%" y="1061" width="0.1883%" height="15" fill="rgb(225,63,43)" fg:x="169" fg:w="1"/><text x="32.0767%" y="1071.50"></text></g><g><title>reqwest::async_impl::response::Response::bytes::{{closure}} (6 samples, 1.13%)</title><rect x="31.0734%" y="1429" width="1.1299%" height="15" fill="rgb(207,57,36)" fg:x="165" fg:w="6"/><text x="31.3234%" y="1439.50"></text></g><g><title>hyper::body::to_bytes::to_bytes::{{closure}} (6 samples, 1.13%)</title><rect x="31.0734%" y="1413" width="1.1299%" height="15" fill="rgb(216,99,33)" fg:x="165" fg:w="6"/><text x="31.3234%" y="1423.50"></text></g><g><title>&lt;http_body::next::Data&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.94%)</title><rect x="31.2618%" y="1397" width="0.9416%" height="15" fill="rgb(225,42,16)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1407.50"></text></g><g><title>&lt;&amp;mut T as http_body::Body&gt;::poll_data (5 samples, 0.94%)</title><rect x="31.2618%" y="1381" width="0.9416%" height="15" fill="rgb(220,201,45)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1391.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::poll_data (5 samples, 0.94%)</title><rect x="31.2618%" y="1365" width="0.9416%" height="15" fill="rgb(225,33,4)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1375.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (5 samples, 0.94%)</title><rect x="31.2618%" y="1349" width="0.9416%" height="15" fill="rgb(224,33,50)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1359.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.94%)</title><rect x="31.2618%" y="1333" width="0.9416%" height="15" fill="rgb(246,198,51)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1343.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.94%)</title><rect x="31.2618%" y="1317" width="0.9416%" height="15" fill="rgb(205,22,4)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1327.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (5 samples, 0.94%)</title><rect x="31.2618%" y="1301" width="0.9416%" height="15" fill="rgb(206,3,8)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1311.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::poll_data (5 samples, 0.94%)</title><rect x="31.2618%" y="1285" width="0.9416%" height="15" fill="rgb(251,23,15)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1295.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (5 samples, 0.94%)</title><rect x="31.2618%" y="1269" width="0.9416%" height="15" fill="rgb(252,88,28)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1279.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (5 samples, 0.94%)</title><rect x="31.2618%" y="1253" width="0.9416%" height="15" fill="rgb(212,127,14)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1263.50"></text></g><g><title>hyper::body::body::Body::poll_eof (5 samples, 0.94%)</title><rect x="31.2618%" y="1237" width="0.9416%" height="15" fill="rgb(247,145,37)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1247.50"></text></g><g><title>hyper::body::body::Body::poll_inner (5 samples, 0.94%)</title><rect x="31.2618%" y="1221" width="0.9416%" height="15" fill="rgb(209,117,53)" fg:x="166" fg:w="5"/><text x="31.5118%" y="1231.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.75%)</title><rect x="31.4501%" y="1205" width="0.7533%" height="15" fill="rgb(212,90,42)" fg:x="167" fg:w="4"/><text x="31.7001%" y="1215.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (4 samples, 0.75%)</title><rect x="31.4501%" y="1189" width="0.7533%" height="15" fill="rgb(218,164,37)" fg:x="167" fg:w="4"/><text x="31.7001%" y="1199.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (2 samples, 0.38%)</title><rect x="31.8267%" y="1173" width="0.3766%" height="15" fill="rgb(246,65,34)" fg:x="169" fg:w="2"/><text x="32.0767%" y="1183.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (2 samples, 0.38%)</title><rect x="31.8267%" y="1157" width="0.3766%" height="15" fill="rgb(231,100,33)" fg:x="169" fg:w="2"/><text x="32.0767%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.19%)</title><rect x="32.0151%" y="1141" width="0.1883%" height="15" fill="rgb(228,126,14)" fg:x="170" fg:w="1"/><text x="32.2651%" y="1151.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.38%)</title><rect x="32.5800%" y="1157" width="0.3766%" height="15" fill="rgb(215,173,21)" fg:x="173" fg:w="2"/><text x="32.8300%" y="1167.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (2 samples, 0.38%)</title><rect x="32.5800%" y="1141" width="0.3766%" height="15" fill="rgb(210,6,40)" fg:x="173" fg:w="2"/><text x="32.8300%" y="1151.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.19%)</title><rect x="32.7684%" y="1125" width="0.1883%" height="15" fill="rgb(212,48,18)" fg:x="174" fg:w="1"/><text x="33.0184%" y="1135.50"></text></g><g><title>serde_json::read::as_str (1 samples, 0.19%)</title><rect x="32.7684%" y="1109" width="0.1883%" height="15" fill="rgb(230,214,11)" fg:x="174" fg:w="1"/><text x="33.0184%" y="1119.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.19%)</title><rect x="32.7684%" y="1093" width="0.1883%" height="15" fill="rgb(254,105,39)" fg:x="174" fg:w="1"/><text x="33.0184%" y="1103.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.19%)</title><rect x="32.7684%" y="1077" width="0.1883%" height="15" fill="rgb(245,158,5)" fg:x="174" fg:w="1"/><text x="33.0184%" y="1087.50"></text></g><g><title>serde::de::MapAccess::next_entry (2 samples, 0.38%)</title><rect x="32.9567%" y="1141" width="0.3766%" height="15" fill="rgb(249,208,11)" fg:x="175" fg:w="2"/><text x="33.2067%" y="1151.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (2 samples, 0.38%)</title><rect x="32.9567%" y="1125" width="0.3766%" height="15" fill="rgb(210,39,28)" fg:x="175" fg:w="2"/><text x="33.2067%" y="1135.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.19%)</title><rect x="33.1450%" y="1109" width="0.1883%" height="15" fill="rgb(211,56,53)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1119.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.19%)</title><rect x="33.1450%" y="1093" width="0.1883%" height="15" fill="rgb(226,201,30)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1103.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.19%)</title><rect x="33.1450%" y="1077" width="0.1883%" height="15" fill="rgb(239,101,34)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1087.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.19%)</title><rect x="33.1450%" y="1061" width="0.1883%" height="15" fill="rgb(226,209,5)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1071.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.19%)</title><rect x="33.1450%" y="1045" width="0.1883%" height="15" fill="rgb(250,105,47)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1055.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.19%)</title><rect x="33.1450%" y="1029" width="0.1883%" height="15" fill="rgb(230,72,3)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1039.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.19%)</title><rect x="33.1450%" y="1013" width="0.1883%" height="15" fill="rgb(232,218,39)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.19%)</title><rect x="33.1450%" y="997" width="0.1883%" height="15" fill="rgb(248,166,6)" fg:x="176" fg:w="1"/><text x="33.3950%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.19%)</title><rect x="33.1450%" y="981" width="0.1883%" height="15" fill="rgb(247,89,20)" fg:x="176" fg:w="1"/><text x="33.3950%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="33.1450%" y="965" width="0.1883%" height="15" fill="rgb(248,130,54)" fg:x="176" fg:w="1"/><text x="33.3950%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="33.1450%" y="949" width="0.1883%" height="15" fill="rgb(234,196,4)" fg:x="176" fg:w="1"/><text x="33.3950%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="33.1450%" y="933" width="0.1883%" height="15" fill="rgb(250,143,31)" fg:x="176" fg:w="1"/><text x="33.3950%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="33.1450%" y="917" width="0.1883%" height="15" fill="rgb(211,110,34)" fg:x="176" fg:w="1"/><text x="33.3950%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="33.1450%" y="901" width="0.1883%" height="15" fill="rgb(215,124,48)" fg:x="176" fg:w="1"/><text x="33.3950%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.19%)</title><rect x="33.1450%" y="885" width="0.1883%" height="15" fill="rgb(216,46,13)" fg:x="176" fg:w="1"/><text x="33.3950%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="33.1450%" y="869" width="0.1883%" height="15" fill="rgb(205,184,25)" fg:x="176" fg:w="1"/><text x="33.3950%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="33.1450%" y="853" width="0.1883%" height="15" fill="rgb(228,1,10)" fg:x="176" fg:w="1"/><text x="33.3950%" y="863.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="33.1450%" y="837" width="0.1883%" height="15" fill="rgb(213,116,27)" fg:x="176" fg:w="1"/><text x="33.3950%" y="847.50"></text></g><g><title>__rust_alloc (1 samples, 0.19%)</title><rect x="33.1450%" y="821" width="0.1883%" height="15" fill="rgb(241,95,50)" fg:x="176" fg:w="1"/><text x="33.3950%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.19%)</title><rect x="33.3333%" y="1109" width="0.1883%" height="15" fill="rgb(238,48,32)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1119.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.19%)</title><rect x="33.3333%" y="1093" width="0.1883%" height="15" fill="rgb(235,113,49)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1103.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.19%)</title><rect x="33.3333%" y="1077" width="0.1883%" height="15" fill="rgb(205,127,43)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1087.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.19%)</title><rect x="33.3333%" y="1061" width="0.1883%" height="15" fill="rgb(250,162,2)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1071.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.19%)</title><rect x="33.3333%" y="1045" width="0.1883%" height="15" fill="rgb(220,13,41)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.19%)</title><rect x="33.3333%" y="1029" width="0.1883%" height="15" fill="rgb(249,221,25)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1039.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.19%)</title><rect x="33.3333%" y="1013" width="0.1883%" height="15" fill="rgb(215,208,19)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1023.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.19%)</title><rect x="33.3333%" y="997" width="0.1883%" height="15" fill="rgb(236,175,2)" fg:x="177" fg:w="1"/><text x="33.5833%" y="1007.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.19%)</title><rect x="33.3333%" y="981" width="0.1883%" height="15" fill="rgb(241,52,2)" fg:x="177" fg:w="1"/><text x="33.5833%" y="991.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.75%)</title><rect x="32.9567%" y="1157" width="0.7533%" height="15" fill="rgb(248,140,14)" fg:x="175" fg:w="4"/><text x="33.2067%" y="1167.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (2 samples, 0.38%)</title><rect x="33.3333%" y="1141" width="0.3766%" height="15" fill="rgb(253,22,42)" fg:x="177" fg:w="2"/><text x="33.5833%" y="1151.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.38%)</title><rect x="33.3333%" y="1125" width="0.3766%" height="15" fill="rgb(234,61,47)" fg:x="177" fg:w="2"/><text x="33.5833%" y="1135.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.19%)</title><rect x="33.5217%" y="1109" width="0.1883%" height="15" fill="rgb(208,226,15)" fg:x="178" fg:w="1"/><text x="33.7717%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.19%)</title><rect x="33.5217%" y="1093" width="0.1883%" height="15" fill="rgb(217,221,4)" fg:x="178" fg:w="1"/><text x="33.7717%" y="1103.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.19%)</title><rect x="33.5217%" y="1077" width="0.1883%" height="15" fill="rgb(212,174,34)" fg:x="178" fg:w="1"/><text x="33.7717%" y="1087.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.19%)</title><rect x="33.5217%" y="1061" width="0.1883%" height="15" fill="rgb(253,83,4)" fg:x="178" fg:w="1"/><text x="33.7717%" y="1071.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.19%)</title><rect x="33.5217%" y="1045" width="0.1883%" height="15" fill="rgb(250,195,49)" fg:x="178" fg:w="1"/><text x="33.7717%" y="1055.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.19%)</title><rect x="33.5217%" y="1029" width="0.1883%" height="15" fill="rgb(241,192,25)" fg:x="178" fg:w="1"/><text x="33.7717%" y="1039.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.19%)</title><rect x="33.7100%" y="1157" width="0.1883%" height="15" fill="rgb(208,124,10)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.19%)</title><rect x="33.7100%" y="1141" width="0.1883%" height="15" fill="rgb(222,33,0)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.19%)</title><rect x="33.7100%" y="1125" width="0.1883%" height="15" fill="rgb(234,209,28)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="33.7100%" y="1109" width="0.1883%" height="15" fill="rgb(224,11,23)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1119.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="33.7100%" y="1093" width="0.1883%" height="15" fill="rgb(232,99,1)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.19%)</title><rect x="33.7100%" y="1077" width="0.1883%" height="15" fill="rgb(237,95,45)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1087.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.19%)</title><rect x="33.7100%" y="1061" width="0.1883%" height="15" fill="rgb(208,109,11)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1071.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.19%)</title><rect x="33.7100%" y="1045" width="0.1883%" height="15" fill="rgb(216,190,48)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1055.50"></text></g><g><title>__realloc (1 samples, 0.19%)</title><rect x="33.7100%" y="1029" width="0.1883%" height="15" fill="rgb(251,171,36)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1039.50"></text></g><g><title>_int_realloc (1 samples, 0.19%)</title><rect x="33.7100%" y="1013" width="0.1883%" height="15" fill="rgb(230,62,22)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1023.50"></text></g><g><title>_int_free (1 samples, 0.19%)</title><rect x="33.7100%" y="997" width="0.1883%" height="15" fill="rgb(225,114,35)" fg:x="179" fg:w="1"/><text x="33.9600%" y="1007.50"></text></g><g><title>serde::de::MapAccess::next_entry (11 samples, 2.07%)</title><rect x="32.2034%" y="1253" width="2.0716%" height="15" fill="rgb(215,118,42)" fg:x="171" fg:w="11"/><text x="32.4534%" y="1263.50">s..</text></g><g><title>serde::de::MapAccess::next_entry_seed (11 samples, 2.07%)</title><rect x="32.2034%" y="1237" width="2.0716%" height="15" fill="rgb(243,119,21)" fg:x="171" fg:w="11"/><text x="32.4534%" y="1247.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (10 samples, 1.88%)</title><rect x="32.3917%" y="1221" width="1.8832%" height="15" fill="rgb(252,177,53)" fg:x="172" fg:w="10"/><text x="32.6417%" y="1231.50">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 1.88%)</title><rect x="32.3917%" y="1205" width="1.8832%" height="15" fill="rgb(237,209,29)" fg:x="172" fg:w="10"/><text x="32.6417%" y="1215.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 1.88%)</title><rect x="32.3917%" y="1189" width="1.8832%" height="15" fill="rgb(212,65,23)" fg:x="172" fg:w="10"/><text x="32.6417%" y="1199.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 1.88%)</title><rect x="32.3917%" y="1173" width="1.8832%" height="15" fill="rgb(230,222,46)" fg:x="172" fg:w="10"/><text x="32.6417%" y="1183.50">&lt;..</text></g><g><title>serde::de::Visitor::visit_borrowed_str (2 samples, 0.38%)</title><rect x="33.8983%" y="1157" width="0.3766%" height="15" fill="rgb(215,135,32)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1167.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.38%)</title><rect x="33.8983%" y="1141" width="0.3766%" height="15" fill="rgb(246,101,22)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1151.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.38%)</title><rect x="33.8983%" y="1125" width="0.3766%" height="15" fill="rgb(206,107,13)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1135.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.38%)</title><rect x="33.8983%" y="1109" width="0.3766%" height="15" fill="rgb(250,100,44)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.38%)</title><rect x="33.8983%" y="1093" width="0.3766%" height="15" fill="rgb(231,147,38)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.38%)</title><rect x="33.8983%" y="1077" width="0.3766%" height="15" fill="rgb(229,8,40)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.38%)</title><rect x="33.8983%" y="1061" width="0.3766%" height="15" fill="rgb(221,135,30)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.38%)</title><rect x="33.8983%" y="1045" width="0.3766%" height="15" fill="rgb(249,193,18)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.38%)</title><rect x="33.8983%" y="1029" width="0.3766%" height="15" fill="rgb(209,133,39)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.38%)</title><rect x="33.8983%" y="1013" width="0.3766%" height="15" fill="rgb(232,100,14)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.38%)</title><rect x="33.8983%" y="997" width="0.3766%" height="15" fill="rgb(224,185,1)" fg:x="180" fg:w="2"/><text x="34.1483%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.38%)</title><rect x="33.8983%" y="981" width="0.3766%" height="15" fill="rgb(223,139,8)" fg:x="180" fg:w="2"/><text x="34.1483%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.38%)</title><rect x="33.8983%" y="965" width="0.3766%" height="15" fill="rgb(232,213,38)" fg:x="180" fg:w="2"/><text x="34.1483%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.38%)</title><rect x="33.8983%" y="949" width="0.3766%" height="15" fill="rgb(207,94,22)" fg:x="180" fg:w="2"/><text x="34.1483%" y="959.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.38%)</title><rect x="33.8983%" y="933" width="0.3766%" height="15" fill="rgb(219,183,54)" fg:x="180" fg:w="2"/><text x="34.1483%" y="943.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.38%)</title><rect x="33.8983%" y="917" width="0.3766%" height="15" fill="rgb(216,185,54)" fg:x="180" fg:w="2"/><text x="34.1483%" y="927.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="34.0866%" y="901" width="0.1883%" height="15" fill="rgb(254,217,39)" fg:x="181" fg:w="1"/><text x="34.3366%" y="911.50"></text></g><g><title>alloc_perturb (1 samples, 0.19%)</title><rect x="34.0866%" y="885" width="0.1883%" height="15" fill="rgb(240,178,23)" fg:x="181" fg:w="1"/><text x="34.3366%" y="895.50"></text></g><g><title>dashboard::main::{{closure}} (36 samples, 6.78%)</title><rect x="27.6836%" y="1573" width="6.7797%" height="15" fill="rgb(218,11,47)" fg:x="147" fg:w="36"/><text x="27.9336%" y="1583.50">dashboard..</text></g><g><title>dashboard::app::try_main_refactor_v3::{{closure}} (35 samples, 6.59%)</title><rect x="27.8719%" y="1557" width="6.5913%" height="15" fill="rgb(218,51,51)" fg:x="148" fg:w="35"/><text x="28.1219%" y="1567.50">dashboard..</text></g><g><title>api::repos::list_user_repos::{{closure}} (34 samples, 6.40%)</title><rect x="28.0603%" y="1541" width="6.4030%" height="15" fill="rgb(238,126,27)" fg:x="149" fg:w="34"/><text x="28.3103%" y="1551.50">api::rep..</text></g><g><title>octocrab::api::current::ListReposForAuthenticatedUserBuilder::send::{{closure}} (19 samples, 3.58%)</title><rect x="30.8851%" y="1525" width="3.5782%" height="15" fill="rgb(249,202,22)" fg:x="164" fg:w="19"/><text x="31.1351%" y="1535.50">octo..</text></g><g><title>octocrab::Octocrab::get::{{closure}} (19 samples, 3.58%)</title><rect x="30.8851%" y="1509" width="3.5782%" height="15" fill="rgb(254,195,49)" fg:x="164" fg:w="19"/><text x="31.1351%" y="1519.50">octo..</text></g><g><title>octocrab::Octocrab::get_with_headers::{{closure}} (19 samples, 3.58%)</title><rect x="30.8851%" y="1493" width="3.5782%" height="15" fill="rgb(208,123,14)" fg:x="164" fg:w="19"/><text x="31.1351%" y="1503.50">octo..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (19 samples, 3.58%)</title><rect x="30.8851%" y="1477" width="3.5782%" height="15" fill="rgb(224,200,8)" fg:x="164" fg:w="19"/><text x="31.1351%" y="1487.50">&lt;cor..</text></g><g><title>&lt;octocrab::page::Page&lt;T&gt; as octocrab::from_response::FromResponse&gt;::from_response::{{closure}} (19 samples, 3.58%)</title><rect x="30.8851%" y="1461" width="3.5782%" height="15" fill="rgb(217,61,36)" fg:x="164" fg:w="19"/><text x="31.1351%" y="1471.50">&lt;oct..</text></g><g><title>reqwest::async_impl::response::Response::json::{{closure}} (18 samples, 3.39%)</title><rect x="31.0734%" y="1445" width="3.3898%" height="15" fill="rgb(206,35,45)" fg:x="165" fg:w="18"/><text x="31.3234%" y="1455.50">req..</text></g><g><title>serde_json::de::from_slice (12 samples, 2.26%)</title><rect x="32.2034%" y="1429" width="2.2599%" height="15" fill="rgb(217,65,33)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1439.50">s..</text></g><g><title>serde_json::de::from_trait (12 samples, 2.26%)</title><rect x="32.2034%" y="1413" width="2.2599%" height="15" fill="rgb(222,158,48)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1423.50">s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (12 samples, 2.26%)</title><rect x="32.2034%" y="1397" width="2.2599%" height="15" fill="rgb(254,2,54)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1407.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 2.26%)</title><rect x="32.2034%" y="1381" width="2.2599%" height="15" fill="rgb(250,143,38)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1391.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (12 samples, 2.26%)</title><rect x="32.2034%" y="1365" width="2.2599%" height="15" fill="rgb(248,25,0)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1375.50">&lt;..</text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 2.26%)</title><rect x="32.2034%" y="1349" width="2.2599%" height="15" fill="rgb(206,152,27)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1359.50">s..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 2.26%)</title><rect x="32.2034%" y="1333" width="2.2599%" height="15" fill="rgb(240,77,30)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1343.50">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 2.26%)</title><rect x="32.2034%" y="1317" width="2.2599%" height="15" fill="rgb(231,5,3)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1327.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (12 samples, 2.26%)</title><rect x="32.2034%" y="1301" width="2.2599%" height="15" fill="rgb(207,226,32)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1311.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 2.26%)</title><rect x="32.2034%" y="1285" width="2.2599%" height="15" fill="rgb(222,207,47)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1295.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 2.26%)</title><rect x="32.2034%" y="1269" width="2.2599%" height="15" fill="rgb(229,115,45)" fg:x="171" fg:w="12"/><text x="32.4534%" y="1279.50">&lt;..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1 samples, 0.19%)</title><rect x="34.2750%" y="1253" width="0.1883%" height="15" fill="rgb(224,191,6)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1263.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.19%)</title><rect x="34.2750%" y="1237" width="0.1883%" height="15" fill="rgb(230,227,24)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1247.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.19%)</title><rect x="34.2750%" y="1221" width="0.1883%" height="15" fill="rgb(228,80,19)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1231.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.19%)</title><rect x="34.2750%" y="1205" width="0.1883%" height="15" fill="rgb(247,229,0)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1215.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.19%)</title><rect x="34.2750%" y="1189" width="0.1883%" height="15" fill="rgb(237,194,15)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1199.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (1 samples, 0.19%)</title><rect x="34.2750%" y="1173" width="0.1883%" height="15" fill="rgb(219,203,20)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1183.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.19%)</title><rect x="34.2750%" y="1157" width="0.1883%" height="15" fill="rgb(234,128,8)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1167.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.19%)</title><rect x="34.2750%" y="1141" width="0.1883%" height="15" fill="rgb(248,202,8)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1151.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.19%)</title><rect x="34.2750%" y="1125" width="0.1883%" height="15" fill="rgb(206,104,37)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="34.2750%" y="1109" width="0.1883%" height="15" fill="rgb(223,8,27)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1119.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="34.2750%" y="1093" width="0.1883%" height="15" fill="rgb(216,217,28)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1103.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="34.2750%" y="1077" width="0.1883%" height="15" fill="rgb(249,199,1)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1087.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="34.2750%" y="1061" width="0.1883%" height="15" fill="rgb(240,85,17)" fg:x="182" fg:w="1"/><text x="34.5250%" y="1071.50"></text></g><g><title>std::sys::unix::futex::futex_wait (16 samples, 3.01%)</title><rect x="34.4633%" y="1429" width="3.0132%" height="15" fill="rgb(206,108,45)" fg:x="183" fg:w="16"/><text x="34.7133%" y="1439.50">std..</text></g><g><title>syscall (16 samples, 3.01%)</title><rect x="34.4633%" y="1413" width="3.0132%" height="15" fill="rgb(245,210,41)" fg:x="183" fg:w="16"/><text x="34.7133%" y="1423.50">sys..</text></g><g><title>dashboard::main (17 samples, 3.20%)</title><rect x="34.4633%" y="1573" width="3.2015%" height="15" fill="rgb(206,13,37)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1583.50">das..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (17 samples, 3.20%)</title><rect x="34.4633%" y="1557" width="3.2015%" height="15" fill="rgb(250,61,18)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1567.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (17 samples, 3.20%)</title><rect x="34.4633%" y="1541" width="3.2015%" height="15" fill="rgb(235,172,48)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1551.50">tok..</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (17 samples, 3.20%)</title><rect x="34.4633%" y="1525" width="3.2015%" height="15" fill="rgb(249,201,17)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1535.50">tok..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (17 samples, 3.20%)</title><rect x="34.4633%" y="1509" width="3.2015%" height="15" fill="rgb(219,208,6)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1519.50">tok..</text></g><g><title>tokio::runtime::park::Inner::park (17 samples, 3.20%)</title><rect x="34.4633%" y="1493" width="3.2015%" height="15" fill="rgb(248,31,23)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1503.50">tok..</text></g><g><title>std::sync::condvar::Condvar::wait (17 samples, 3.20%)</title><rect x="34.4633%" y="1477" width="3.2015%" height="15" fill="rgb(245,15,42)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1487.50">std..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (17 samples, 3.20%)</title><rect x="34.4633%" y="1461" width="3.2015%" height="15" fill="rgb(222,217,39)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1471.50">std..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (17 samples, 3.20%)</title><rect x="34.4633%" y="1445" width="3.2015%" height="15" fill="rgb(210,219,27)" fg:x="183" fg:w="17"/><text x="34.7133%" y="1455.50">std..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="37.4765%" y="1429" width="0.1883%" height="15" fill="rgb(252,166,36)" fg:x="199" fg:w="1"/><text x="37.7265%" y="1439.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.19%)</title><rect x="37.4765%" y="1413" width="0.1883%" height="15" fill="rgb(245,132,34)" fg:x="199" fg:w="1"/><text x="37.7265%" y="1423.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="37.4765%" y="1397" width="0.1883%" height="15" fill="rgb(236,54,3)" fg:x="199" fg:w="1"/><text x="37.7265%" y="1407.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (1 samples, 0.19%)</title><rect x="37.6648%" y="1573" width="0.1883%" height="15" fill="rgb(241,173,43)" fg:x="200" fg:w="1"/><text x="37.9148%" y="1583.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.19%)</title><rect x="37.8531%" y="1573" width="0.1883%" height="15" fill="rgb(215,190,9)" fg:x="201" fg:w="1"/><text x="38.1031%" y="1583.50"></text></g><g><title>regex_syntax::hir::literal::Literals::cross_product (1 samples, 0.19%)</title><rect x="38.0414%" y="1573" width="0.1883%" height="15" fill="rgb(242,101,16)" fg:x="202" fg:w="1"/><text x="38.2914%" y="1583.50"></text></g><g><title>regex_syntax::hir::literal::Literals::is_empty (1 samples, 0.19%)</title><rect x="38.0414%" y="1557" width="0.1883%" height="15" fill="rgb(223,190,21)" fg:x="202" fg:w="1"/><text x="38.2914%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1 samples, 0.19%)</title><rect x="38.0414%" y="1541" width="0.1883%" height="15" fill="rgb(215,228,25)" fg:x="202" fg:w="1"/><text x="38.2914%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.19%)</title><rect x="38.0414%" y="1525" width="0.1883%" height="15" fill="rgb(225,36,22)" fg:x="202" fg:w="1"/><text x="38.2914%" y="1535.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.19%)</title><rect x="38.2298%" y="1573" width="0.1883%" height="15" fill="rgb(251,106,46)" fg:x="203" fg:w="1"/><text x="38.4798%" y="1583.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.19%)</title><rect x="38.4181%" y="1573" width="0.1883%" height="15" fill="rgb(208,90,1)" fg:x="204" fg:w="1"/><text x="38.6681%" y="1583.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.19%)</title><rect x="38.4181%" y="1557" width="0.1883%" height="15" fill="rgb(243,10,4)" fg:x="204" fg:w="1"/><text x="38.6681%" y="1567.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="38.4181%" y="1541" width="0.1883%" height="15" fill="rgb(212,137,27)" fg:x="204" fg:w="1"/><text x="38.6681%" y="1551.50"></text></g><g><title>syscall (1 samples, 0.19%)</title><rect x="38.6064%" y="1573" width="0.1883%" height="15" fill="rgb(231,220,49)" fg:x="205" fg:w="1"/><text x="38.8564%" y="1583.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.19%)</title><rect x="38.7947%" y="1573" width="0.1883%" height="15" fill="rgb(237,96,20)" fg:x="206" fg:w="1"/><text x="39.0447%" y="1583.50"></text></g><g><title>dashboard (208 samples, 39.17%)</title><rect x="0.0000%" y="1589" width="39.1714%" height="15" fill="rgb(239,229,30)" fg:x="0" fg:w="208"/><text x="0.2500%" y="1599.50">dashboard</text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.19%)</title><rect x="38.9831%" y="1573" width="0.1883%" height="15" fill="rgb(219,65,33)" fg:x="207" fg:w="1"/><text x="39.2331%" y="1583.50"></text></g><g><title>[gh] (153 samples, 28.81%)</title><rect x="39.1714%" y="1557" width="28.8136%" height="15" fill="rgb(243,134,7)" fg:x="208" fg:w="153"/><text x="39.4214%" y="1567.50">[gh]</text></g><g><title>[gh] (153 samples, 28.81%)</title><rect x="39.1714%" y="1541" width="28.8136%" height="15" fill="rgb(216,177,54)" fg:x="208" fg:w="153"/><text x="39.4214%" y="1551.50">[gh]</text></g><g><title>[gh] (151 samples, 28.44%)</title><rect x="39.5480%" y="1525" width="28.4369%" height="15" fill="rgb(211,160,20)" fg:x="210" fg:w="151"/><text x="39.7980%" y="1535.50">[gh]</text></g><g><title>[gh] (133 samples, 25.05%)</title><rect x="42.9379%" y="1509" width="25.0471%" height="15" fill="rgb(239,85,39)" fg:x="228" fg:w="133"/><text x="43.1879%" y="1519.50">[gh]</text></g><g><title>[gh] (114 samples, 21.47%)</title><rect x="46.5160%" y="1493" width="21.4689%" height="15" fill="rgb(232,125,22)" fg:x="247" fg:w="114"/><text x="46.7660%" y="1503.50">[gh]</text></g><g><title>[gh] (106 samples, 19.96%)</title><rect x="48.0226%" y="1477" width="19.9623%" height="15" fill="rgb(244,57,34)" fg:x="255" fg:w="106"/><text x="48.2726%" y="1487.50">[gh]</text></g><g><title>[gh] (86 samples, 16.20%)</title><rect x="51.7891%" y="1461" width="16.1959%" height="15" fill="rgb(214,203,32)" fg:x="275" fg:w="86"/><text x="52.0391%" y="1471.50">[gh]</text></g><g><title>[gh] (81 samples, 15.25%)</title><rect x="52.7307%" y="1445" width="15.2542%" height="15" fill="rgb(207,58,43)" fg:x="280" fg:w="81"/><text x="52.9807%" y="1455.50">[gh]</text></g><g><title>[gh] (75 samples, 14.12%)</title><rect x="53.8606%" y="1429" width="14.1243%" height="15" fill="rgb(215,193,15)" fg:x="286" fg:w="75"/><text x="54.1106%" y="1439.50">[gh]</text></g><g><title>[gh] (54 samples, 10.17%)</title><rect x="57.8154%" y="1413" width="10.1695%" height="15" fill="rgb(232,15,44)" fg:x="307" fg:w="54"/><text x="58.0654%" y="1423.50">[gh]</text></g><g><title>[gh] (52 samples, 9.79%)</title><rect x="58.1921%" y="1397" width="9.7928%" height="15" fill="rgb(212,3,48)" fg:x="309" fg:w="52"/><text x="58.4421%" y="1407.50">[gh]</text></g><g><title>[gh] (50 samples, 9.42%)</title><rect x="58.5687%" y="1381" width="9.4162%" height="15" fill="rgb(218,128,7)" fg:x="311" fg:w="50"/><text x="58.8187%" y="1391.50">[gh]</text></g><g><title>[gh] (47 samples, 8.85%)</title><rect x="59.1337%" y="1365" width="8.8512%" height="15" fill="rgb(226,216,39)" fg:x="314" fg:w="47"/><text x="59.3837%" y="1375.50">[gh]</text></g><g><title>[gh] (43 samples, 8.10%)</title><rect x="59.8870%" y="1349" width="8.0979%" height="15" fill="rgb(243,47,51)" fg:x="318" fg:w="43"/><text x="60.1370%" y="1359.50">[gh]</text></g><g><title>[gh] (41 samples, 7.72%)</title><rect x="60.2637%" y="1333" width="7.7213%" height="15" fill="rgb(241,183,40)" fg:x="320" fg:w="41"/><text x="60.5137%" y="1343.50">[gh]</text></g><g><title>[gh] (37 samples, 6.97%)</title><rect x="61.0169%" y="1317" width="6.9680%" height="15" fill="rgb(231,217,32)" fg:x="324" fg:w="37"/><text x="61.2669%" y="1327.50">[gh]</text></g><g><title>[gh] (25 samples, 4.71%)</title><rect x="63.2768%" y="1301" width="4.7081%" height="15" fill="rgb(229,61,38)" fg:x="336" fg:w="25"/><text x="63.5268%" y="1311.50">[gh]</text></g><g><title>[gh] (20 samples, 3.77%)</title><rect x="64.2185%" y="1285" width="3.7665%" height="15" fill="rgb(225,210,5)" fg:x="341" fg:w="20"/><text x="64.4685%" y="1295.50">[gh]</text></g><g><title>[gh] (17 samples, 3.20%)</title><rect x="64.7834%" y="1269" width="3.2015%" height="15" fill="rgb(231,79,45)" fg:x="344" fg:w="17"/><text x="65.0334%" y="1279.50">[gh]</text></g><g><title>[gh] (15 samples, 2.82%)</title><rect x="65.1601%" y="1253" width="2.8249%" height="15" fill="rgb(224,100,7)" fg:x="346" fg:w="15"/><text x="65.4101%" y="1263.50">[g..</text></g><g><title>[gh] (12 samples, 2.26%)</title><rect x="65.7250%" y="1237" width="2.2599%" height="15" fill="rgb(241,198,18)" fg:x="349" fg:w="12"/><text x="65.9750%" y="1247.50">[..</text></g><g><title>[gh] (12 samples, 2.26%)</title><rect x="65.7250%" y="1221" width="2.2599%" height="15" fill="rgb(252,97,53)" fg:x="349" fg:w="12"/><text x="65.9750%" y="1231.50">[..</text></g><g><title>[gh] (12 samples, 2.26%)</title><rect x="65.7250%" y="1205" width="2.2599%" height="15" fill="rgb(220,88,7)" fg:x="349" fg:w="12"/><text x="65.9750%" y="1215.50">[..</text></g><g><title>[gh] (8 samples, 1.51%)</title><rect x="66.4783%" y="1189" width="1.5066%" height="15" fill="rgb(213,176,14)" fg:x="353" fg:w="8"/><text x="66.7283%" y="1199.50"></text></g><g><title>[gh] (8 samples, 1.51%)</title><rect x="66.4783%" y="1173" width="1.5066%" height="15" fill="rgb(246,73,7)" fg:x="353" fg:w="8"/><text x="66.7283%" y="1183.50"></text></g><g><title>[gh] (6 samples, 1.13%)</title><rect x="66.8550%" y="1157" width="1.1299%" height="15" fill="rgb(245,64,36)" fg:x="355" fg:w="6"/><text x="67.1050%" y="1167.50"></text></g><g><title>[gh] (5 samples, 0.94%)</title><rect x="67.0433%" y="1141" width="0.9416%" height="15" fill="rgb(245,80,10)" fg:x="356" fg:w="5"/><text x="67.2933%" y="1151.50"></text></g><g><title>[gh] (4 samples, 0.75%)</title><rect x="67.2316%" y="1125" width="0.7533%" height="15" fill="rgb(232,107,50)" fg:x="357" fg:w="4"/><text x="67.4816%" y="1135.50"></text></g><g><title>[gh] (2 samples, 0.38%)</title><rect x="67.6083%" y="1109" width="0.3766%" height="15" fill="rgb(253,3,0)" fg:x="359" fg:w="2"/><text x="67.8583%" y="1119.50"></text></g><g><title>[gh] (2 samples, 0.38%)</title><rect x="67.6083%" y="1093" width="0.3766%" height="15" fill="rgb(212,99,53)" fg:x="359" fg:w="2"/><text x="67.8583%" y="1103.50"></text></g><g><title>[gh] (2 samples, 0.38%)</title><rect x="67.6083%" y="1077" width="0.3766%" height="15" fill="rgb(249,111,54)" fg:x="359" fg:w="2"/><text x="67.8583%" y="1087.50"></text></g><g><title>[gh] (2 samples, 0.38%)</title><rect x="67.6083%" y="1061" width="0.3766%" height="15" fill="rgb(249,55,30)" fg:x="359" fg:w="2"/><text x="67.8583%" y="1071.50"></text></g><g><title>[gh] (1 samples, 0.19%)</title><rect x="67.7966%" y="1045" width="0.1883%" height="15" fill="rgb(237,47,42)" fg:x="360" fg:w="1"/><text x="68.0466%" y="1055.50"></text></g><g><title>[gh] (1 samples, 0.19%)</title><rect x="67.7966%" y="1029" width="0.1883%" height="15" fill="rgb(211,20,18)" fg:x="360" fg:w="1"/><text x="68.0466%" y="1039.50"></text></g><g><title>[gh] (1 samples, 0.19%)</title><rect x="67.7966%" y="1013" width="0.1883%" height="15" fill="rgb(231,203,46)" fg:x="360" fg:w="1"/><text x="68.0466%" y="1023.50"></text></g><g><title>[gh] (154 samples, 29.00%)</title><rect x="39.1714%" y="1573" width="29.0019%" height="15" fill="rgb(237,142,3)" fg:x="208" fg:w="154"/><text x="39.4214%" y="1583.50">[gh]</text></g><g><title>_cgo_2ac87069779a_C2func_getaddrinfo (1 samples, 0.19%)</title><rect x="67.9849%" y="1557" width="0.1883%" height="15" fill="rgb(241,107,1)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1567.50"></text></g><g><title>__GI_getaddrinfo (1 samples, 0.19%)</title><rect x="67.9849%" y="1541" width="0.1883%" height="15" fill="rgb(229,83,13)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1551.50"></text></g><g><title>__nss_module_get_function (1 samples, 0.19%)</title><rect x="67.9849%" y="1525" width="0.1883%" height="15" fill="rgb(241,91,40)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1535.50"></text></g><g><title>module_load (1 samples, 0.19%)</title><rect x="67.9849%" y="1509" width="0.1883%" height="15" fill="rgb(225,3,45)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1519.50"></text></g><g><title>__libc_dlopen_mode (1 samples, 0.19%)</title><rect x="67.9849%" y="1493" width="0.1883%" height="15" fill="rgb(244,223,14)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1503.50"></text></g><g><title>dlerror_run (1 samples, 0.19%)</title><rect x="67.9849%" y="1477" width="0.1883%" height="15" fill="rgb(224,124,37)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1487.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.19%)</title><rect x="67.9849%" y="1461" width="0.1883%" height="15" fill="rgb(251,171,30)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1471.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="67.9849%" y="1445" width="0.1883%" height="15" fill="rgb(236,46,54)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1455.50"></text></g><g><title>do_dlopen (1 samples, 0.19%)</title><rect x="67.9849%" y="1429" width="0.1883%" height="15" fill="rgb(245,213,5)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1439.50"></text></g><g><title>_dl_open (1 samples, 0.19%)</title><rect x="67.9849%" y="1413" width="0.1883%" height="15" fill="rgb(230,144,27)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1423.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="67.9849%" y="1397" width="0.1883%" height="15" fill="rgb(220,86,6)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1407.50"></text></g><g><title>dl_open_worker (1 samples, 0.19%)</title><rect x="67.9849%" y="1381" width="0.1883%" height="15" fill="rgb(240,20,13)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1391.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="67.9849%" y="1365" width="0.1883%" height="15" fill="rgb(217,89,34)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1375.50"></text></g><g><title>dl_open_worker_begin (1 samples, 0.19%)</title><rect x="67.9849%" y="1349" width="0.1883%" height="15" fill="rgb(229,13,5)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1359.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.19%)</title><rect x="67.9849%" y="1333" width="0.1883%" height="15" fill="rgb(244,67,35)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1343.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="67.9849%" y="1317" width="0.1883%" height="15" fill="rgb(221,40,2)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1327.50"></text></g><g><title>openaux (1 samples, 0.19%)</title><rect x="67.9849%" y="1301" width="0.1883%" height="15" fill="rgb(237,157,21)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1311.50"></text></g><g><title>_dl_map_object (1 samples, 0.19%)</title><rect x="67.9849%" y="1285" width="0.1883%" height="15" fill="rgb(222,94,11)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1295.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.19%)</title><rect x="67.9849%" y="1269" width="0.1883%" height="15" fill="rgb(249,113,6)" fg:x="361" fg:w="1"/><text x="68.2349%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.38%)</title><rect x="68.1733%" y="1573" width="0.3766%" height="15" fill="rgb(238,137,36)" fg:x="362" fg:w="2"/><text x="68.4233%" y="1583.50"></text></g><g><title>[gh] (2 samples, 0.38%)</title><rect x="68.1733%" y="1557" width="0.3766%" height="15" fill="rgb(210,102,26)" fg:x="362" fg:w="2"/><text x="68.4233%" y="1567.50"></text></g><g><title>__spawni_child (2 samples, 0.38%)</title><rect x="69.1149%" y="1557" width="0.3766%" height="15" fill="rgb(218,30,30)" fg:x="367" fg:w="2"/><text x="69.3649%" y="1567.50"></text></g><g><title>__GI___libc_sigaction (1 samples, 0.19%)</title><rect x="69.3032%" y="1541" width="0.1883%" height="15" fill="rgb(214,67,26)" fg:x="368" fg:w="1"/><text x="69.5532%" y="1551.50"></text></g><g><title>__clone3 (6 samples, 1.13%)</title><rect x="68.5499%" y="1573" width="1.1299%" height="15" fill="rgb(251,9,53)" fg:x="364" fg:w="6"/><text x="68.7999%" y="1583.50"></text></g><g><title>start_thread (1 samples, 0.19%)</title><rect x="69.4915%" y="1557" width="0.1883%" height="15" fill="rgb(228,204,25)" fg:x="369" fg:w="1"/><text x="69.7415%" y="1567.50"></text></g><g><title>dl_main (5 samples, 0.94%)</title><rect x="69.6798%" y="1509" width="0.9416%" height="15" fill="rgb(207,153,8)" fg:x="370" fg:w="5"/><text x="69.9298%" y="1519.50"></text></g><g><title>_dl_relocate_object (5 samples, 0.94%)</title><rect x="69.6798%" y="1493" width="0.9416%" height="15" fill="rgb(242,9,16)" fg:x="370" fg:w="5"/><text x="69.9298%" y="1503.50"></text></g><g><title>elf_dynamic_do_Rela (5 samples, 0.94%)</title><rect x="69.6798%" y="1477" width="0.9416%" height="15" fill="rgb(217,211,10)" fg:x="370" fg:w="5"/><text x="69.9298%" y="1487.50"></text></g><g><title>elf_machine_rela_relative (4 samples, 0.75%)</title><rect x="69.8682%" y="1461" width="0.7533%" height="15" fill="rgb(219,228,52)" fg:x="371" fg:w="4"/><text x="70.1182%" y="1471.50"></text></g><g><title>gh (168 samples, 31.64%)</title><rect x="39.1714%" y="1589" width="31.6384%" height="15" fill="rgb(231,92,29)" fg:x="208" fg:w="168"/><text x="39.4214%" y="1599.50">gh</text></g><g><title>_start (6 samples, 1.13%)</title><rect x="69.6798%" y="1573" width="1.1299%" height="15" fill="rgb(232,8,23)" fg:x="370" fg:w="6"/><text x="69.9298%" y="1583.50"></text></g><g><title>_dl_start (6 samples, 1.13%)</title><rect x="69.6798%" y="1557" width="1.1299%" height="15" fill="rgb(216,211,34)" fg:x="370" fg:w="6"/><text x="69.9298%" y="1567.50"></text></g><g><title>_dl_start_final (6 samples, 1.13%)</title><rect x="69.6798%" y="1541" width="1.1299%" height="15" fill="rgb(236,151,0)" fg:x="370" fg:w="6"/><text x="69.9298%" y="1551.50"></text></g><g><title>_dl_sysdep_start (6 samples, 1.13%)</title><rect x="69.6798%" y="1525" width="1.1299%" height="15" fill="rgb(209,168,3)" fg:x="370" fg:w="6"/><text x="69.9298%" y="1535.50"></text></g><g><title>dl_platform_init (1 samples, 0.19%)</title><rect x="70.6215%" y="1509" width="0.1883%" height="15" fill="rgb(208,129,28)" fg:x="375" fg:w="1"/><text x="70.8715%" y="1519.50"></text></g><g><title>init_cpu_features (1 samples, 0.19%)</title><rect x="70.6215%" y="1493" width="0.1883%" height="15" fill="rgb(229,78,22)" fg:x="375" fg:w="1"/><text x="70.8715%" y="1503.50"></text></g><g><title>dl_init_cacheinfo (1 samples, 0.19%)</title><rect x="70.6215%" y="1477" width="0.1883%" height="15" fill="rgb(228,187,13)" fg:x="375" fg:w="1"/><text x="70.8715%" y="1487.50"></text></g><g><title>handle_intel (1 samples, 0.19%)</title><rect x="70.6215%" y="1461" width="0.1883%" height="15" fill="rgb(240,119,24)" fg:x="375" fg:w="1"/><text x="70.8715%" y="1471.50"></text></g><g><title>intel_check_word (1 samples, 0.19%)</title><rect x="70.6215%" y="1445" width="0.1883%" height="15" fill="rgb(209,194,42)" fg:x="375" fg:w="1"/><text x="70.8715%" y="1455.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.19%)</title><rect x="70.8098%" y="1573" width="0.1883%" height="15" fill="rgb(247,200,46)" fg:x="376" fg:w="1"/><text x="71.0598%" y="1583.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.19%)</title><rect x="70.8098%" y="1557" width="0.1883%" height="15" fill="rgb(218,76,16)" fg:x="376" fg:w="1"/><text x="71.0598%" y="1567.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.19%)</title><rect x="70.9981%" y="1573" width="0.1883%" height="15" fill="rgb(225,21,48)" fg:x="377" fg:w="1"/><text x="71.2481%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="71.1864%" y="1573" width="0.1883%" height="15" fill="rgb(239,223,50)" fg:x="378" fg:w="1"/><text x="71.4364%" y="1583.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.19%)</title><rect x="71.1864%" y="1557" width="0.1883%" height="15" fill="rgb(244,45,21)" fg:x="378" fg:w="1"/><text x="71.4364%" y="1567.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (1 samples, 0.19%)</title><rect x="71.1864%" y="1541" width="0.1883%" height="15" fill="rgb(232,33,43)" fg:x="378" fg:w="1"/><text x="71.4364%" y="1551.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (1 samples, 0.19%)</title><rect x="71.1864%" y="1525" width="0.1883%" height="15" fill="rgb(209,8,3)" fg:x="378" fg:w="1"/><text x="71.4364%" y="1535.50"></text></g><g><title>tokio::time::clock::Clock::now (1 samples, 0.19%)</title><rect x="71.1864%" y="1509" width="0.1883%" height="15" fill="rgb(214,25,53)" fg:x="378" fg:w="1"/><text x="71.4364%" y="1519.50"></text></g><g><title>tokio::time::clock::now (1 samples, 0.19%)</title><rect x="71.1864%" y="1493" width="0.1883%" height="15" fill="rgb(254,186,54)" fg:x="378" fg:w="1"/><text x="71.4364%" y="1503.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="71.3748%" y="1573" width="0.1883%" height="15" fill="rgb(208,174,49)" fg:x="379" fg:w="1"/><text x="71.6248%" y="1583.50"></text></g><g><title>__GI_madvise (5 samples, 0.94%)</title><rect x="73.4463%" y="1541" width="0.9416%" height="15" fill="rgb(233,191,51)" fg:x="390" fg:w="5"/><text x="73.6963%" y="1551.50"></text></g><g><title>__malloc_arena_thread_freeres (2 samples, 0.38%)</title><rect x="74.3879%" y="1541" width="0.3766%" height="15" fill="rgb(222,134,10)" fg:x="395" fg:w="2"/><text x="74.6379%" y="1551.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (3 samples, 0.56%)</title><rect x="74.9529%" y="1253" width="0.5650%" height="15" fill="rgb(230,226,20)" fg:x="398" fg:w="3"/><text x="75.2029%" y="1263.50"></text></g><g><title>std::sys::unix::futex::futex_wait (39 samples, 7.34%)</title><rect x="74.9529%" y="1269" width="7.3446%" height="15" fill="rgb(251,111,25)" fg:x="398" fg:w="39"/><text x="75.2029%" y="1279.50">std::sys::..</text></g><g><title>syscall (36 samples, 6.78%)</title><rect x="75.5179%" y="1253" width="6.7797%" height="15" fill="rgb(224,40,46)" fg:x="401" fg:w="36"/><text x="75.7679%" y="1263.50">syscall</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (40 samples, 7.53%)</title><rect x="74.9529%" y="1333" width="7.5330%" height="15" fill="rgb(236,108,47)" fg:x="398" fg:w="40"/><text x="75.2029%" y="1343.50">tokio::loo..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (40 samples, 7.53%)</title><rect x="74.9529%" y="1317" width="7.5330%" height="15" fill="rgb(234,93,0)" fg:x="398" fg:w="40"/><text x="75.2029%" y="1327.50">std::sync:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (40 samples, 7.53%)</title><rect x="74.9529%" y="1301" width="7.5330%" height="15" fill="rgb(224,213,32)" fg:x="398" fg:w="40"/><text x="75.2029%" y="1311.50">std::sys::..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (40 samples, 7.53%)</title><rect x="74.9529%" y="1285" width="7.5330%" height="15" fill="rgb(251,11,48)" fg:x="398" fg:w="40"/><text x="75.2029%" y="1295.50">std::sys::..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.19%)</title><rect x="82.2976%" y="1269" width="0.1883%" height="15" fill="rgb(236,173,5)" fg:x="437" fg:w="1"/><text x="82.5476%" y="1279.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.19%)</title><rect x="82.2976%" y="1253" width="0.1883%" height="15" fill="rgb(230,95,12)" fg:x="437" fg:w="1"/><text x="82.5476%" y="1263.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.19%)</title><rect x="82.2976%" y="1237" width="0.1883%" height="15" fill="rgb(232,209,1)" fg:x="437" fg:w="1"/><text x="82.5476%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::context::EnterRuntimeGuard&gt; (1 samples, 0.19%)</title><rect x="82.4859%" y="1061" width="0.1883%" height="15" fill="rgb(232,6,1)" fg:x="438" fg:w="1"/><text x="82.7359%" y="1071.50"></text></g><g><title>&lt;tokio::runtime::context::EnterRuntimeGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="82.4859%" y="1045" width="0.1883%" height="15" fill="rgb(210,224,50)" fg:x="438" fg:w="1"/><text x="82.7359%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.19%)</title><rect x="82.4859%" y="1029" width="0.1883%" height="15" fill="rgb(228,127,35)" fg:x="438" fg:w="1"/><text x="82.7359%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.19%)</title><rect x="82.4859%" y="1013" width="0.1883%" height="15" fill="rgb(245,102,45)" fg:x="438" fg:w="1"/><text x="82.7359%" y="1023.50"></text></g><g><title>&lt;tokio::runtime::context::EnterRuntimeGuard as core::ops::drop::Drop&gt;::drop::{{closure}} (1 samples, 0.19%)</title><rect x="82.4859%" y="997" width="0.1883%" height="15" fill="rgb(214,1,49)" fg:x="438" fg:w="1"/><text x="82.7359%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::defer::Defer&gt;&gt; (1 samples, 0.19%)</title><rect x="82.4859%" y="981" width="0.1883%" height="15" fill="rgb(226,163,40)" fg:x="438" fg:w="1"/><text x="82.7359%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::defer::Defer&gt; (1 samples, 0.19%)</title><rect x="82.4859%" y="965" width="0.1883%" height="15" fill="rgb(239,212,28)" fg:x="438" fg:w="1"/><text x="82.7359%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::task::wake::Waker&gt;&gt; (1 samples, 0.19%)</title><rect x="82.4859%" y="949" width="0.1883%" height="15" fill="rgb(220,20,13)" fg:x="438" fg:w="1"/><text x="82.7359%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="82.4859%" y="933" width="0.1883%" height="15" fill="rgb(210,164,35)" fg:x="438" fg:w="1"/><text x="82.7359%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::task::wake::Waker]&gt; (1 samples, 0.19%)</title><rect x="82.4859%" y="917" width="0.1883%" height="15" fill="rgb(248,109,41)" fg:x="438" fg:w="1"/><text x="82.7359%" y="927.50"></text></g><g><title>tokio::loom::std::thread::yield_now (1 samples, 0.19%)</title><rect x="82.6742%" y="949" width="0.1883%" height="15" fill="rgb(238,23,50)" fg:x="439" fg:w="1"/><text x="82.9242%" y="959.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.19%)</title><rect x="82.6742%" y="933" width="0.1883%" height="15" fill="rgb(211,48,49)" fg:x="439" fg:w="1"/><text x="82.9242%" y="943.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.19%)</title><rect x="82.6742%" y="917" width="0.1883%" height="15" fill="rgb(223,36,21)" fg:x="439" fg:w="1"/><text x="82.9242%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (1 samples, 0.19%)</title><rect x="82.8625%" y="901" width="0.1883%" height="15" fill="rgb(207,123,46)" fg:x="440" fg:w="1"/><text x="83.1125%" y="911.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.19%)</title><rect x="83.0508%" y="869" width="0.1883%" height="15" fill="rgb(240,218,32)" fg:x="441" fg:w="1"/><text x="83.3008%" y="879.50"></text></g><g><title>std::sys::unix::futex::futex_wait (24 samples, 4.52%)</title><rect x="83.0508%" y="885" width="4.5198%" height="15" fill="rgb(252,5,43)" fg:x="441" fg:w="24"/><text x="83.3008%" y="895.50">std::..</text></g><g><title>syscall (23 samples, 4.33%)</title><rect x="83.2392%" y="869" width="4.3315%" height="15" fill="rgb(252,84,19)" fg:x="442" fg:w="23"/><text x="83.4892%" y="879.50">sysca..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (26 samples, 4.90%)</title><rect x="82.8625%" y="949" width="4.8964%" height="15" fill="rgb(243,152,39)" fg:x="440" fg:w="26"/><text x="83.1125%" y="959.50">tokio:..</text></g><g><title>std::sync::condvar::Condvar::wait (26 samples, 4.90%)</title><rect x="82.8625%" y="933" width="4.8964%" height="15" fill="rgb(234,160,15)" fg:x="440" fg:w="26"/><text x="83.1125%" y="943.50">std::s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (26 samples, 4.90%)</title><rect x="82.8625%" y="917" width="4.8964%" height="15" fill="rgb(237,34,20)" fg:x="440" fg:w="26"/><text x="83.1125%" y="927.50">std::s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (25 samples, 4.71%)</title><rect x="83.0508%" y="901" width="4.7081%" height="15" fill="rgb(229,97,13)" fg:x="441" fg:w="25"/><text x="83.3008%" y="911.50">std::..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="87.5706%" y="885" width="0.1883%" height="15" fill="rgb(234,71,50)" fg:x="465" fg:w="1"/><text x="87.8206%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.19%)</title><rect x="87.5706%" y="869" width="0.1883%" height="15" fill="rgb(253,155,4)" fg:x="465" fg:w="1"/><text x="87.8206%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="87.5706%" y="853" width="0.1883%" height="15" fill="rgb(222,185,37)" fg:x="465" fg:w="1"/><text x="87.8206%" y="863.50"></text></g><g><title>mio::poll::Poll::poll (8 samples, 1.51%)</title><rect x="88.1356%" y="821" width="1.5066%" height="15" fill="rgb(251,177,13)" fg:x="468" fg:w="8"/><text x="88.3856%" y="831.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (8 samples, 1.51%)</title><rect x="88.1356%" y="805" width="1.5066%" height="15" fill="rgb(250,179,40)" fg:x="468" fg:w="8"/><text x="88.3856%" y="815.50"></text></g><g><title>epoll_wait (8 samples, 1.51%)</title><rect x="88.1356%" y="789" width="1.5066%" height="15" fill="rgb(242,44,2)" fg:x="468" fg:w="8"/><text x="88.3856%" y="799.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.19%)</title><rect x="89.4539%" y="773" width="0.1883%" height="15" fill="rgb(216,177,13)" fg:x="475" fg:w="1"/><text x="89.7039%" y="783.50"></text></g><g><title>tokio::runtime::driver::IoStack::park (10 samples, 1.88%)</title><rect x="87.9473%" y="869" width="1.8832%" height="15" fill="rgb(216,106,43)" fg:x="467" fg:w="10"/><text x="88.1973%" y="879.50">t..</text></g><g><title>tokio::runtime::io::Driver::park (10 samples, 1.88%)</title><rect x="87.9473%" y="853" width="1.8832%" height="15" fill="rgb(216,183,2)" fg:x="467" fg:w="10"/><text x="88.1973%" y="863.50">t..</text></g><g><title>tokio::runtime::io::Driver::turn (10 samples, 1.88%)</title><rect x="87.9473%" y="837" width="1.8832%" height="15" fill="rgb(249,75,3)" fg:x="467" fg:w="10"/><text x="88.1973%" y="847.50">t..</text></g><g><title>tokio::runtime::io::Driver::dispatch (1 samples, 0.19%)</title><rect x="89.6422%" y="821" width="0.1883%" height="15" fill="rgb(219,67,39)" fg:x="476" fg:w="1"/><text x="89.8922%" y="831.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (1 samples, 0.19%)</title><rect x="89.6422%" y="805" width="0.1883%" height="15" fill="rgb(253,228,2)" fg:x="476" fg:w="1"/><text x="89.8922%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.19%)</title><rect x="89.6422%" y="789" width="0.1883%" height="15" fill="rgb(235,138,27)" fg:x="476" fg:w="1"/><text x="89.8922%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.19%)</title><rect x="89.6422%" y="773" width="0.1883%" height="15" fill="rgb(236,97,51)" fg:x="476" fg:w="1"/><text x="89.8922%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (1 samples, 0.19%)</title><rect x="89.8305%" y="837" width="0.1883%" height="15" fill="rgb(240,80,30)" fg:x="477" fg:w="1"/><text x="90.0805%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (1 samples, 0.19%)</title><rect x="89.8305%" y="821" width="0.1883%" height="15" fill="rgb(230,178,19)" fg:x="477" fg:w="1"/><text x="90.0805%" y="831.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.38%)</title><rect x="89.8305%" y="853" width="0.3766%" height="15" fill="rgb(210,190,27)" fg:x="477" fg:w="2"/><text x="90.0805%" y="863.50"></text></g><g><title>tokio::runtime::time::Inner::lock (1 samples, 0.19%)</title><rect x="90.0188%" y="837" width="0.1883%" height="15" fill="rgb(222,107,31)" fg:x="478" fg:w="1"/><text x="90.2688%" y="847.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.19%)</title><rect x="90.0188%" y="821" width="0.1883%" height="15" fill="rgb(216,127,34)" fg:x="478" fg:w="1"/><text x="90.2688%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.19%)</title><rect x="90.0188%" y="805" width="0.1883%" height="15" fill="rgb(234,116,52)" fg:x="478" fg:w="1"/><text x="90.2688%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="90.0188%" y="789" width="0.1883%" height="15" fill="rgb(222,124,15)" fg:x="478" fg:w="1"/><text x="90.2688%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.19%)</title><rect x="90.0188%" y="773" width="0.1883%" height="15" fill="rgb(231,179,28)" fg:x="478" fg:w="1"/><text x="90.2688%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.19%)</title><rect x="90.0188%" y="757" width="0.1883%" height="15" fill="rgb(226,93,45)" fg:x="478" fg:w="1"/><text x="90.2688%" y="767.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.19%)</title><rect x="90.2072%" y="805" width="0.1883%" height="15" fill="rgb(215,8,51)" fg:x="479" fg:w="1"/><text x="90.4572%" y="815.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.19%)</title><rect x="90.2072%" y="789" width="0.1883%" height="15" fill="rgb(223,106,5)" fg:x="479" fg:w="1"/><text x="90.4572%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (42 samples, 7.91%)</title><rect x="82.6742%" y="965" width="7.9096%" height="15" fill="rgb(250,191,5)" fg:x="439" fg:w="42"/><text x="82.9242%" y="975.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (15 samples, 2.82%)</title><rect x="87.7589%" y="949" width="2.8249%" height="15" fill="rgb(242,132,44)" fg:x="466" fg:w="15"/><text x="88.0089%" y="959.50">to..</text></g><g><title>tokio::runtime::driver::Driver::park (15 samples, 2.82%)</title><rect x="87.7589%" y="933" width="2.8249%" height="15" fill="rgb(251,152,29)" fg:x="466" fg:w="15"/><text x="88.0089%" y="943.50">to..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (15 samples, 2.82%)</title><rect x="87.7589%" y="917" width="2.8249%" height="15" fill="rgb(218,179,5)" fg:x="466" fg:w="15"/><text x="88.0089%" y="927.50">to..</text></g><g><title>tokio::runtime::time::Driver::park (15 samples, 2.82%)</title><rect x="87.7589%" y="901" width="2.8249%" height="15" fill="rgb(227,67,19)" fg:x="466" fg:w="15"/><text x="88.0089%" y="911.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (14 samples, 2.64%)</title><rect x="87.9473%" y="885" width="2.6365%" height="15" fill="rgb(233,119,31)" fg:x="467" fg:w="14"/><text x="88.1973%" y="895.50">to..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (4 samples, 0.75%)</title><rect x="89.8305%" y="869" width="0.7533%" height="15" fill="rgb(241,120,22)" fg:x="477" fg:w="4"/><text x="90.0805%" y="879.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (2 samples, 0.38%)</title><rect x="90.2072%" y="853" width="0.3766%" height="15" fill="rgb(224,102,30)" fg:x="479" fg:w="2"/><text x="90.4572%" y="863.50"></text></g><g><title>tokio::time::clock::Clock::now (2 samples, 0.38%)</title><rect x="90.2072%" y="837" width="0.3766%" height="15" fill="rgb(210,164,37)" fg:x="479" fg:w="2"/><text x="90.4572%" y="847.50"></text></g><g><title>tokio::time::clock::now (2 samples, 0.38%)</title><rect x="90.2072%" y="821" width="0.3766%" height="15" fill="rgb(226,191,16)" fg:x="479" fg:w="2"/><text x="90.4572%" y="831.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.19%)</title><rect x="90.3955%" y="805" width="0.1883%" height="15" fill="rgb(214,40,45)" fg:x="480" fg:w="1"/><text x="90.6455%" y="815.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.19%)</title><rect x="90.3955%" y="789" width="0.1883%" height="15" fill="rgb(244,29,26)" fg:x="480" fg:w="1"/><text x="90.6455%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (43 samples, 8.10%)</title><rect x="82.6742%" y="997" width="8.0979%" height="15" fill="rgb(216,16,5)" fg:x="439" fg:w="43"/><text x="82.9242%" y="1007.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (43 samples, 8.10%)</title><rect x="82.6742%" y="981" width="8.0979%" height="15" fill="rgb(249,76,35)" fg:x="439" fg:w="43"/><text x="82.9242%" y="991.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.19%)</title><rect x="90.5838%" y="965" width="0.1883%" height="15" fill="rgb(207,11,44)" fg:x="481" fg:w="1"/><text x="90.8338%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (44 samples, 8.29%)</title><rect x="82.6742%" y="1013" width="8.2863%" height="15" fill="rgb(228,190,49)" fg:x="439" fg:w="44"/><text x="82.9242%" y="1023.50">tokio::runti..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (1 samples, 0.19%)</title><rect x="90.7721%" y="997" width="0.1883%" height="15" fill="rgb(214,173,12)" fg:x="482" fg:w="1"/><text x="91.0221%" y="1007.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.19%)</title><rect x="90.9605%" y="533" width="0.1883%" height="15" fill="rgb(218,26,35)" fg:x="483" fg:w="1"/><text x="91.2105%" y="543.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1 samples, 0.19%)</title><rect x="90.9605%" y="517" width="0.1883%" height="15" fill="rgb(220,200,19)" fg:x="483" fg:w="1"/><text x="91.2105%" y="527.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1 samples, 0.19%)</title><rect x="90.9605%" y="501" width="0.1883%" height="15" fill="rgb(239,95,49)" fg:x="483" fg:w="1"/><text x="91.2105%" y="511.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.19%)</title><rect x="90.9605%" y="485" width="0.1883%" height="15" fill="rgb(235,85,53)" fg:x="483" fg:w="1"/><text x="91.2105%" y="495.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (1 samples, 0.19%)</title><rect x="90.9605%" y="469" width="0.1883%" height="15" fill="rgb(233,133,31)" fg:x="483" fg:w="1"/><text x="91.2105%" y="479.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush::{{closure}} (1 samples, 0.19%)</title><rect x="90.9605%" y="453" width="0.1883%" height="15" fill="rgb(218,25,20)" fg:x="483" fg:w="1"/><text x="91.2105%" y="463.50"></text></g><g><title>&lt;native_tls::TlsStream&lt;S&gt; as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="90.9605%" y="437" width="0.1883%" height="15" fill="rgb(252,210,38)" fg:x="483" fg:w="1"/><text x="91.2105%" y="447.50"></text></g><g><title>&lt;native_tls::imp::TlsStream&lt;S&gt; as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="90.9605%" y="421" width="0.1883%" height="15" fill="rgb(242,134,21)" fg:x="483" fg:w="1"/><text x="91.2105%" y="431.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="90.9605%" y="405" width="0.1883%" height="15" fill="rgb(213,28,48)" fg:x="483" fg:w="1"/><text x="91.2105%" y="415.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::get_mut (1 samples, 0.19%)</title><rect x="90.9605%" y="389" width="0.1883%" height="15" fill="rgb(250,196,2)" fg:x="483" fg:w="1"/><text x="91.2105%" y="399.50"></text></g><g><title>SSL_get_rbio (1 samples, 0.19%)</title><rect x="90.9605%" y="373" width="0.1883%" height="15" fill="rgb(227,5,17)" fg:x="483" fg:w="1"/><text x="91.2105%" y="383.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 0.19%)</title><rect x="91.1488%" y="517" width="0.1883%" height="15" fill="rgb(221,226,24)" fg:x="484" fg:w="1"/><text x="91.3988%" y="527.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (1 samples, 0.19%)</title><rect x="91.1488%" y="501" width="0.1883%" height="15" fill="rgb(211,5,48)" fg:x="484" fg:w="1"/><text x="91.3988%" y="511.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (1 samples, 0.19%)</title><rect x="91.1488%" y="485" width="0.1883%" height="15" fill="rgb(219,150,6)" fg:x="484" fg:w="1"/><text x="91.3988%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.19%)</title><rect x="91.1488%" y="469" width="0.1883%" height="15" fill="rgb(251,46,16)" fg:x="484" fg:w="1"/><text x="91.3988%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.19%)</title><rect x="91.1488%" y="453" width="0.1883%" height="15" fill="rgb(220,204,40)" fg:x="484" fg:w="1"/><text x="91.3988%" y="463.50"></text></g><g><title>EVP_CIPHER_CTX_ctrl (2 samples, 0.38%)</title><rect x="92.0904%" y="245" width="0.3766%" height="15" fill="rgb(211,85,2)" fg:x="489" fg:w="2"/><text x="92.3404%" y="255.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="92.2787%" y="229" width="0.1883%" height="15" fill="rgb(229,17,7)" fg:x="490" fg:w="1"/><text x="92.5287%" y="239.50"></text></g><g><title>OSSL_PARAM_locate (1 samples, 0.19%)</title><rect x="92.2787%" y="213" width="0.1883%" height="15" fill="rgb(239,72,28)" fg:x="490" fg:w="1"/><text x="92.5287%" y="223.50"></text></g><g><title>__strcmp_avx2 (1 samples, 0.19%)</title><rect x="92.2787%" y="197" width="0.1883%" height="15" fill="rgb(230,47,54)" fg:x="490" fg:w="1"/><text x="92.5287%" y="207.50"></text></g><g><title>EVP_CipherInit_ex (1 samples, 0.19%)</title><rect x="92.4670%" y="245" width="0.1883%" height="15" fill="rgb(214,50,8)" fg:x="491" fg:w="1"/><text x="92.7170%" y="255.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="92.4670%" y="229" width="0.1883%" height="15" fill="rgb(216,198,43)" fg:x="491" fg:w="1"/><text x="92.7170%" y="239.50"></text></g><g><title>EVP_CIPHER_free (1 samples, 0.19%)</title><rect x="92.4670%" y="213" width="0.1883%" height="15" fill="rgb(234,20,35)" fg:x="491" fg:w="1"/><text x="92.7170%" y="223.50"></text></g><g><title>CRYPTO_gcm128_aad (1 samples, 0.19%)</title><rect x="92.6554%" y="181" width="0.1883%" height="15" fill="rgb(254,45,19)" fg:x="492" fg:w="1"/><text x="92.9054%" y="191.50"></text></g><g><title>CRYPTO_gcm128_decrypt (2 samples, 0.38%)</title><rect x="92.8437%" y="181" width="0.3766%" height="15" fill="rgb(219,14,44)" fg:x="493" fg:w="2"/><text x="93.0937%" y="191.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="92.8437%" y="165" width="0.3766%" height="15" fill="rgb(217,220,26)" fg:x="493" fg:w="2"/><text x="93.0937%" y="175.50"></text></g><g><title>EVP_DecryptUpdate (4 samples, 0.75%)</title><rect x="92.6554%" y="245" width="0.7533%" height="15" fill="rgb(213,158,28)" fg:x="492" fg:w="4"/><text x="92.9054%" y="255.50"></text></g><g><title>[libcrypto.so.3.0.8] (4 samples, 0.75%)</title><rect x="92.6554%" y="229" width="0.7533%" height="15" fill="rgb(252,51,52)" fg:x="492" fg:w="4"/><text x="92.9054%" y="239.50"></text></g><g><title>[libcrypto.so.3.0.8] (4 samples, 0.75%)</title><rect x="92.6554%" y="213" width="0.7533%" height="15" fill="rgb(246,89,16)" fg:x="492" fg:w="4"/><text x="92.9054%" y="223.50"></text></g><g><title>[libcrypto.so.3.0.8] (4 samples, 0.75%)</title><rect x="92.6554%" y="197" width="0.7533%" height="15" fill="rgb(216,158,49)" fg:x="492" fg:w="4"/><text x="92.9054%" y="207.50"></text></g><g><title>CRYPTO_gcm128_setiv (1 samples, 0.19%)</title><rect x="93.2203%" y="181" width="0.1883%" height="15" fill="rgb(236,107,19)" fg:x="495" fg:w="1"/><text x="93.4703%" y="191.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="93.2203%" y="165" width="0.1883%" height="15" fill="rgb(228,185,30)" fg:x="495" fg:w="1"/><text x="93.4703%" y="175.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="93.4087%" y="245" width="0.1883%" height="15" fill="rgb(246,134,8)" fg:x="496" fg:w="1"/><text x="93.6587%" y="255.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="93.5970%" y="245" width="0.1883%" height="15" fill="rgb(214,143,50)" fg:x="497" fg:w="1"/><text x="93.8470%" y="255.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="93.5970%" y="229" width="0.1883%" height="15" fill="rgb(228,75,8)" fg:x="497" fg:w="1"/><text x="93.8470%" y="239.50"></text></g><g><title>CRYPTO_free (1 samples, 0.19%)</title><rect x="93.5970%" y="213" width="0.1883%" height="15" fill="rgb(207,175,4)" fg:x="497" fg:w="1"/><text x="93.8470%" y="223.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_read (13 samples, 2.45%)</title><rect x="91.5254%" y="325" width="2.4482%" height="15" fill="rgb(205,108,24)" fg:x="486" fg:w="13"/><text x="91.7754%" y="335.50">op..</text></g><g><title>SSL_read (13 samples, 2.45%)</title><rect x="91.5254%" y="309" width="2.4482%" height="15" fill="rgb(244,120,49)" fg:x="486" fg:w="13"/><text x="91.7754%" y="319.50">SS..</text></g><g><title>[libssl.so.3.0.8] (13 samples, 2.45%)</title><rect x="91.5254%" y="293" width="2.4482%" height="15" fill="rgb(223,47,38)" fg:x="486" fg:w="13"/><text x="91.7754%" y="303.50">[l..</text></g><g><title>[libssl.so.3.0.8] (13 samples, 2.45%)</title><rect x="91.5254%" y="277" width="2.4482%" height="15" fill="rgb(229,179,11)" fg:x="486" fg:w="13"/><text x="91.7754%" y="287.50">[l..</text></g><g><title>[libssl.so.3.0.8] (10 samples, 1.88%)</title><rect x="92.0904%" y="261" width="1.8832%" height="15" fill="rgb(231,122,1)" fg:x="489" fg:w="10"/><text x="92.3404%" y="271.50">[..</text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="93.7853%" y="245" width="0.1883%" height="15" fill="rgb(245,119,9)" fg:x="498" fg:w="1"/><text x="94.0353%" y="255.50"></text></g><g><title>&lt;native_tls::TlsStream&lt;S&gt; as std::io::Read&gt;::read (14 samples, 2.64%)</title><rect x="91.5254%" y="373" width="2.6365%" height="15" fill="rgb(241,163,25)" fg:x="486" fg:w="14"/><text x="91.7754%" y="383.50">&lt;n..</text></g><g><title>&lt;native_tls::imp::TlsStream&lt;S&gt; as std::io::Read&gt;::read (14 samples, 2.64%)</title><rect x="91.5254%" y="357" width="2.6365%" height="15" fill="rgb(217,214,3)" fg:x="486" fg:w="14"/><text x="91.7754%" y="367.50">&lt;n..</text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read (14 samples, 2.64%)</title><rect x="91.5254%" y="341" width="2.6365%" height="15" fill="rgb(240,86,28)" fg:x="486" fg:w="14"/><text x="91.7754%" y="351.50">&lt;o..</text></g><g><title>openssl::ssl::error::Error::io_error (1 samples, 0.19%)</title><rect x="93.9736%" y="325" width="0.1883%" height="15" fill="rgb(215,47,9)" fg:x="499" fg:w="1"/><text x="94.2236%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.19%)</title><rect x="94.1620%" y="341" width="0.1883%" height="15" fill="rgb(252,25,45)" fg:x="500" fg:w="1"/><text x="94.4120%" y="351.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.19%)</title><rect x="94.1620%" y="325" width="0.1883%" height="15" fill="rgb(251,164,9)" fg:x="500" fg:w="1"/><text x="94.4120%" y="335.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.19%)</title><rect x="94.1620%" y="309" width="0.1883%" height="15" fill="rgb(233,194,0)" fg:x="500" fg:w="1"/><text x="94.4120%" y="319.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read (16 samples, 3.01%)</title><rect x="91.5254%" y="453" width="3.0132%" height="15" fill="rgb(249,111,24)" fg:x="486" fg:w="16"/><text x="91.7754%" y="463.50">&lt;re..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (16 samples, 3.01%)</title><rect x="91.5254%" y="437" width="3.0132%" height="15" fill="rgb(250,223,3)" fg:x="486" fg:w="16"/><text x="91.7754%" y="447.50">&lt;al..</text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (16 samples, 3.01%)</title><rect x="91.5254%" y="421" width="3.0132%" height="15" fill="rgb(236,178,37)" fg:x="486" fg:w="16"/><text x="91.7754%" y="431.50">&lt;to..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (16 samples, 3.01%)</title><rect x="91.5254%" y="405" width="3.0132%" height="15" fill="rgb(241,158,50)" fg:x="486" fg:w="16"/><text x="91.7754%" y="415.50">tok..</text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}} (16 samples, 3.01%)</title><rect x="91.5254%" y="389" width="3.0132%" height="15" fill="rgb(213,121,41)" fg:x="486" fg:w="16"/><text x="91.7754%" y="399.50">&lt;to..</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (2 samples, 0.38%)</title><rect x="94.1620%" y="373" width="0.3766%" height="15" fill="rgb(240,92,3)" fg:x="500" fg:w="2"/><text x="94.4120%" y="383.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (2 samples, 0.38%)</title><rect x="94.1620%" y="357" width="0.3766%" height="15" fill="rgb(205,123,3)" fg:x="500" fg:w="2"/><text x="94.4120%" y="367.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (1 samples, 0.19%)</title><rect x="94.3503%" y="341" width="0.1883%" height="15" fill="rgb(205,97,47)" fg:x="501" fg:w="1"/><text x="94.6003%" y="351.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (18 samples, 3.39%)</title><rect x="91.3371%" y="517" width="3.3898%" height="15" fill="rgb(247,152,14)" fg:x="485" fg:w="18"/><text x="91.5871%" y="527.50">hyp..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (17 samples, 3.20%)</title><rect x="91.5254%" y="501" width="3.2015%" height="15" fill="rgb(248,195,53)" fg:x="486" fg:w="17"/><text x="91.7754%" y="511.50">hyp..</text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (17 samples, 3.20%)</title><rect x="91.5254%" y="485" width="3.2015%" height="15" fill="rgb(226,201,16)" fg:x="486" fg:w="17"/><text x="91.7754%" y="495.50">&lt;hy..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (17 samples, 3.20%)</title><rect x="91.5254%" y="469" width="3.2015%" height="15" fill="rgb(205,98,0)" fg:x="486" fg:w="17"/><text x="91.7754%" y="479.50">hyp..</text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.19%)</title><rect x="94.5386%" y="453" width="0.1883%" height="15" fill="rgb(214,191,48)" fg:x="502" fg:w="1"/><text x="94.7886%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.19%)</title><rect x="94.5386%" y="437" width="0.1883%" height="15" fill="rgb(237,112,39)" fg:x="502" fg:w="1"/><text x="94.7886%" y="447.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.19%)</title><rect x="94.5386%" y="421" width="0.1883%" height="15" fill="rgb(247,203,27)" fg:x="502" fg:w="1"/><text x="94.7886%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="94.5386%" y="405" width="0.1883%" height="15" fill="rgb(235,124,28)" fg:x="502" fg:w="1"/><text x="94.7886%" y="415.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (21 samples, 3.95%)</title><rect x="90.9605%" y="661" width="3.9548%" height="15" fill="rgb(208,207,46)" fg:x="483" fg:w="21"/><text x="91.2105%" y="671.50">&lt;fut..</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (21 samples, 3.95%)</title><rect x="90.9605%" y="645" width="3.9548%" height="15" fill="rgb(234,176,4)" fg:x="483" fg:w="21"/><text x="91.2105%" y="655.50">&lt;F a..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (21 samples, 3.95%)</title><rect x="90.9605%" y="629" width="3.9548%" height="15" fill="rgb(230,133,28)" fg:x="483" fg:w="21"/><text x="91.2105%" y="639.50">&lt;hyp..</text></g><g><title>&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (21 samples, 3.95%)</title><rect x="90.9605%" y="613" width="3.9548%" height="15" fill="rgb(211,137,40)" fg:x="483" fg:w="21"/><text x="91.2105%" y="623.50">&lt;hyp..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (21 samples, 3.95%)</title><rect x="90.9605%" y="597" width="3.9548%" height="15" fill="rgb(254,35,13)" fg:x="483" fg:w="21"/><text x="91.2105%" y="607.50">&lt;hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (21 samples, 3.95%)</title><rect x="90.9605%" y="581" width="3.9548%" height="15" fill="rgb(225,49,51)" fg:x="483" fg:w="21"/><text x="91.2105%" y="591.50">hype..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (21 samples, 3.95%)</title><rect x="90.9605%" y="565" width="3.9548%" height="15" fill="rgb(251,10,15)" fg:x="483" fg:w="21"/><text x="91.2105%" y="575.50">hype..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (21 samples, 3.95%)</title><rect x="90.9605%" y="549" width="3.9548%" height="15" fill="rgb(228,207,15)" fg:x="483" fg:w="21"/><text x="91.2105%" y="559.50">hype..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (20 samples, 3.77%)</title><rect x="91.1488%" y="533" width="3.7665%" height="15" fill="rgb(241,99,19)" fg:x="484" fg:w="20"/><text x="91.3988%" y="543.50">hype..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (1 samples, 0.19%)</title><rect x="94.7269%" y="517" width="0.1883%" height="15" fill="rgb(207,104,49)" fg:x="503" fg:w="1"/><text x="94.9769%" y="527.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::require_empty_read (1 samples, 0.19%)</title><rect x="94.7269%" y="501" width="0.1883%" height="15" fill="rgb(234,99,18)" fg:x="503" fg:w="1"/><text x="94.9769%" y="511.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (1 samples, 0.19%)</title><rect x="94.7269%" y="485" width="0.1883%" height="15" fill="rgb(213,191,49)" fg:x="503" fg:w="1"/><text x="94.9769%" y="495.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.19%)</title><rect x="94.7269%" y="469" width="0.1883%" height="15" fill="rgb(210,226,19)" fg:x="503" fg:w="1"/><text x="94.9769%" y="479.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.19%)</title><rect x="94.7269%" y="453" width="0.1883%" height="15" fill="rgb(229,97,18)" fg:x="503" fg:w="1"/><text x="94.9769%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.19%)</title><rect x="94.7269%" y="437" width="0.1883%" height="15" fill="rgb(211,167,15)" fg:x="503" fg:w="1"/><text x="94.9769%" y="447.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.19%)</title><rect x="94.7269%" y="421" width="0.1883%" height="15" fill="rgb(210,169,34)" fg:x="503" fg:w="1"/><text x="94.9769%" y="431.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (1 samples, 0.19%)</title><rect x="94.7269%" y="405" width="0.1883%" height="15" fill="rgb(241,121,31)" fg:x="503" fg:w="1"/><text x="94.9769%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}} (1 samples, 0.19%)</title><rect x="94.7269%" y="389" width="0.1883%" height="15" fill="rgb(232,40,11)" fg:x="503" fg:w="1"/><text x="94.9769%" y="399.50"></text></g><g><title>&lt;native_tls::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.19%)</title><rect x="94.7269%" y="373" width="0.1883%" height="15" fill="rgb(205,86,26)" fg:x="503" fg:w="1"/><text x="94.9769%" y="383.50"></text></g><g><title>&lt;native_tls::imp::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.19%)</title><rect x="94.7269%" y="357" width="0.1883%" height="15" fill="rgb(231,126,28)" fg:x="503" fg:w="1"/><text x="94.9769%" y="367.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.19%)</title><rect x="94.7269%" y="341" width="0.1883%" height="15" fill="rgb(219,221,18)" fg:x="503" fg:w="1"/><text x="94.9769%" y="351.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_read (1 samples, 0.19%)</title><rect x="94.7269%" y="325" width="0.1883%" height="15" fill="rgb(211,40,0)" fg:x="503" fg:w="1"/><text x="94.9769%" y="335.50"></text></g><g><title>SSL_read (1 samples, 0.19%)</title><rect x="94.7269%" y="309" width="0.1883%" height="15" fill="rgb(239,85,43)" fg:x="503" fg:w="1"/><text x="94.9769%" y="319.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="94.7269%" y="293" width="0.1883%" height="15" fill="rgb(231,55,21)" fg:x="503" fg:w="1"/><text x="94.9769%" y="303.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="94.7269%" y="277" width="0.1883%" height="15" fill="rgb(225,184,43)" fg:x="503" fg:w="1"/><text x="94.9769%" y="287.50"></text></g><g><title>[libssl.so.3.0.8] (1 samples, 0.19%)</title><rect x="94.7269%" y="261" width="0.1883%" height="15" fill="rgb(251,158,41)" fg:x="503" fg:w="1"/><text x="94.9769%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="94.7269%" y="245" width="0.1883%" height="15" fill="rgb(234,159,37)" fg:x="503" fg:w="1"/><text x="94.9769%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="94.7269%" y="229" width="0.1883%" height="15" fill="rgb(216,204,22)" fg:x="503" fg:w="1"/><text x="94.9769%" y="239.50"></text></g><g><title>BIO_free_all (1 samples, 0.19%)</title><rect x="94.9153%" y="293" width="0.1883%" height="15" fill="rgb(214,17,3)" fg:x="504" fg:w="1"/><text x="95.1653%" y="303.50"></text></g><g><title>BIO_free (1 samples, 0.19%)</title><rect x="94.9153%" y="277" width="0.1883%" height="15" fill="rgb(212,111,17)" fg:x="504" fg:w="1"/><text x="95.1653%" y="287.50"></text></g><g><title>openssl::ssl::bio::destroy (1 samples, 0.19%)</title><rect x="94.9153%" y="261" width="0.1883%" height="15" fill="rgb(221,157,24)" fg:x="504" fg:w="1"/><text x="95.1653%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;openssl::ssl::bio::StreamState&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt;&gt; (1 samples, 0.19%)</title><rect x="94.9153%" y="245" width="0.1883%" height="15" fill="rgb(252,16,13)" fg:x="504" fg:w="1"/><text x="95.1653%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;openssl::ssl::bio::StreamState&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (1 samples, 0.19%)</title><rect x="94.9153%" y="229" width="0.1883%" height="15" fill="rgb(221,62,2)" fg:x="504" fg:w="1"/><text x="95.1653%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (1 samples, 0.19%)</title><rect x="94.9153%" y="213" width="0.1883%" height="15" fill="rgb(247,87,22)" fg:x="504" fg:w="1"/><text x="95.1653%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream&gt; (1 samples, 0.19%)</title><rect x="94.9153%" y="197" width="0.1883%" height="15" fill="rgb(215,73,9)" fg:x="504" fg:w="1"/><text x="95.1653%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::io::poll_evented::PollEvented&lt;mio::net::tcp::stream::TcpStream&gt;&gt; (1 samples, 0.19%)</title><rect x="94.9153%" y="181" width="0.1883%" height="15" fill="rgb(207,175,33)" fg:x="504" fg:w="1"/><text x="95.1653%" y="191.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="94.9153%" y="165" width="0.1883%" height="15" fill="rgb(243,129,54)" fg:x="504" fg:w="1"/><text x="95.1653%" y="175.50"></text></g><g><title>OPENSSL_sk_value (1 samples, 0.19%)</title><rect x="95.1036%" y="149" width="0.1883%" height="15" fill="rgb(227,119,45)" fg:x="505" fg:w="1"/><text x="95.3536%" y="159.50"></text></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.19%)</title><rect x="95.2919%" y="133" width="0.1883%" height="15" fill="rgb(205,109,36)" fg:x="506" fg:w="1"/><text x="95.5419%" y="143.50"></text></g><g><title>ASN1_item_free (1 samples, 0.19%)</title><rect x="95.2919%" y="117" width="0.1883%" height="15" fill="rgb(205,6,39)" fg:x="506" fg:w="1"/><text x="95.5419%" y="127.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="95.2919%" y="101" width="0.1883%" height="15" fill="rgb(221,32,16)" fg:x="506" fg:w="1"/><text x="95.5419%" y="111.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="95.2919%" y="85" width="0.1883%" height="15" fill="rgb(228,144,50)" fg:x="506" fg:w="1"/><text x="95.5419%" y="95.50"></text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.19%)</title><rect x="95.2919%" y="69" width="0.1883%" height="15" fill="rgb(229,201,53)" fg:x="506" fg:w="1"/><text x="95.5419%" y="79.50"></text></g><g><title>__free (1 samples, 0.19%)</title><rect x="95.2919%" y="53" width="0.1883%" height="15" fill="rgb(249,153,27)" fg:x="506" fg:w="1"/><text x="95.5419%" y="63.50"></text></g><g><title>_int_free (1 samples, 0.19%)</title><rect x="95.2919%" y="37" width="0.1883%" height="15" fill="rgb(227,106,25)" fg:x="506" fg:w="1"/><text x="95.5419%" y="47.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="917" width="4.7081%" height="15" fill="rgb(230,65,29)" fg:x="483" fg:w="25"/><text x="91.2105%" y="927.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (25 samples, 4.71%)</title><rect x="90.9605%" y="901" width="4.7081%" height="15" fill="rgb(221,57,46)" fg:x="483" fg:w="25"/><text x="91.2105%" y="911.50">tokio..</text></g><g><title>tokio::runtime::task::harness::poll_future (25 samples, 4.71%)</title><rect x="90.9605%" y="885" width="4.7081%" height="15" fill="rgb(229,161,17)" fg:x="483" fg:w="25"/><text x="91.2105%" y="895.50">tokio..</text></g><g><title>std::panic::catch_unwind (25 samples, 4.71%)</title><rect x="90.9605%" y="869" width="4.7081%" height="15" fill="rgb(222,213,11)" fg:x="483" fg:w="25"/><text x="91.2105%" y="879.50">std::..</text></g><g><title>std::panicking::try (25 samples, 4.71%)</title><rect x="90.9605%" y="853" width="4.7081%" height="15" fill="rgb(235,35,13)" fg:x="483" fg:w="25"/><text x="91.2105%" y="863.50">std::..</text></g><g><title>std::panicking::try::do_call (25 samples, 4.71%)</title><rect x="90.9605%" y="837" width="4.7081%" height="15" fill="rgb(233,158,34)" fg:x="483" fg:w="25"/><text x="91.2105%" y="847.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25 samples, 4.71%)</title><rect x="90.9605%" y="821" width="4.7081%" height="15" fill="rgb(215,151,48)" fg:x="483" fg:w="25"/><text x="91.2105%" y="831.50">&lt;core..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (25 samples, 4.71%)</title><rect x="90.9605%" y="805" width="4.7081%" height="15" fill="rgb(229,84,14)" fg:x="483" fg:w="25"/><text x="91.2105%" y="815.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="789" width="4.7081%" height="15" fill="rgb(229,68,14)" fg:x="483" fg:w="25"/><text x="91.2105%" y="799.50">tokio..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (25 samples, 4.71%)</title><rect x="90.9605%" y="773" width="4.7081%" height="15" fill="rgb(243,106,26)" fg:x="483" fg:w="25"/><text x="91.2105%" y="783.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (25 samples, 4.71%)</title><rect x="90.9605%" y="757" width="4.7081%" height="15" fill="rgb(206,45,38)" fg:x="483" fg:w="25"/><text x="91.2105%" y="767.50">tokio..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="741" width="4.7081%" height="15" fill="rgb(226,6,15)" fg:x="483" fg:w="25"/><text x="91.2105%" y="751.50">&lt;futu..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="725" width="4.7081%" height="15" fill="rgb(232,22,54)" fg:x="483" fg:w="25"/><text x="91.2105%" y="735.50">&lt;futu..</text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="709" width="4.7081%" height="15" fill="rgb(229,222,32)" fg:x="483" fg:w="25"/><text x="91.2105%" y="719.50">&lt;futu..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="693" width="4.7081%" height="15" fill="rgb(228,62,29)" fg:x="483" fg:w="25"/><text x="91.2105%" y="703.50">&lt;futu..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (25 samples, 4.71%)</title><rect x="90.9605%" y="677" width="4.7081%" height="15" fill="rgb(251,103,34)" fg:x="483" fg:w="25"/><text x="91.2105%" y="687.50">&lt;futu..</text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (4 samples, 0.75%)</title><rect x="94.9153%" y="661" width="0.7533%" height="15" fill="rgb(233,12,30)" fg:x="504" fg:w="4"/><text x="95.1653%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt;,())&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="645" width="0.7533%" height="15" fill="rgb(238,52,0)" fg:x="504" fg:w="4"/><text x="95.1653%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="629" width="0.7533%" height="15" fill="rgb(223,98,5)" fg:x="504" fg:w="4"/><text x="95.1653%" y="639.50"></text></g><g><title>&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.75%)</title><rect x="94.9153%" y="613" width="0.7533%" height="15" fill="rgb(228,75,37)" fg:x="504" fg:w="4"/><text x="95.1653%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="597" width="0.7533%" height="15" fill="rgb(205,115,49)" fg:x="504" fg:w="4"/><text x="95.1653%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="581" width="0.7533%" height="15" fill="rgb(250,154,43)" fg:x="504" fg:w="4"/><text x="95.1653%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;hyper::client::conn::ProtoClient&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="565" width="0.7533%" height="15" fill="rgb(226,43,29)" fg:x="504" fg:w="4"/><text x="95.1653%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::ProtoClient&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="549" width="0.7533%" height="15" fill="rgb(249,228,39)" fg:x="504" fg:w="4"/><text x="95.1653%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::dispatch::Dispatcher&lt;hyper::proto::h1::dispatch::Client&lt;reqwest::async_impl::body::ImplStream&gt;,reqwest::async_impl::body::ImplStream,reqwest::connect::Conn,hyper::proto::h1::role::Client&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="533" width="0.7533%" height="15" fill="rgb(216,79,43)" fg:x="504" fg:w="4"/><text x="95.1653%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::conn::Conn&lt;reqwest::connect::Conn,bytes::bytes::Bytes,hyper::proto::h1::role::Client&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="517" width="0.7533%" height="15" fill="rgb(228,95,12)" fg:x="504" fg:w="4"/><text x="95.1653%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::io::Buffered&lt;reqwest::connect::Conn,hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="501" width="0.7533%" height="15" fill="rgb(249,221,15)" fg:x="504" fg:w="4"/><text x="95.1653%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::Conn&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="485" width="0.7533%" height="15" fill="rgb(233,34,13)" fg:x="504" fg:w="4"/><text x="95.1653%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn reqwest::connect::AsyncConn&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="469" width="0.7533%" height="15" fill="rgb(214,103,39)" fg:x="504" fg:w="4"/><text x="95.1653%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="453" width="0.7533%" height="15" fill="rgb(251,126,39)" fg:x="504" fg:w="4"/><text x="95.1653%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_native_tls::TlsStream&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="437" width="0.7533%" height="15" fill="rgb(214,216,36)" fg:x="504" fg:w="4"/><text x="95.1653%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;native_tls::TlsStream&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="421" width="0.7533%" height="15" fill="rgb(220,221,8)" fg:x="504" fg:w="4"/><text x="95.1653%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;native_tls::imp::TlsStream&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="405" width="0.7533%" height="15" fill="rgb(240,216,3)" fg:x="504" fg:w="4"/><text x="95.1653%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;openssl::ssl::SslStream&lt;tokio_native_tls::AllowStd&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="389" width="0.7533%" height="15" fill="rgb(232,218,17)" fg:x="504" fg:w="4"/><text x="95.1653%" y="399.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.75%)</title><rect x="94.9153%" y="373" width="0.7533%" height="15" fill="rgb(229,163,45)" fg:x="504" fg:w="4"/><text x="95.1653%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (4 samples, 0.75%)</title><rect x="94.9153%" y="357" width="0.7533%" height="15" fill="rgb(231,110,42)" fg:x="504" fg:w="4"/><text x="95.1653%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;openssl::ssl::Ssl&gt; (4 samples, 0.75%)</title><rect x="94.9153%" y="341" width="0.7533%" height="15" fill="rgb(208,170,48)" fg:x="504" fg:w="4"/><text x="95.1653%" y="351.50"></text></g><g><title>&lt;openssl::ssl::Ssl as core::ops::drop::Drop&gt;::drop (4 samples, 0.75%)</title><rect x="94.9153%" y="325" width="0.7533%" height="15" fill="rgb(239,116,25)" fg:x="504" fg:w="4"/><text x="95.1653%" y="335.50"></text></g><g><title>SSL_free (4 samples, 0.75%)</title><rect x="94.9153%" y="309" width="0.7533%" height="15" fill="rgb(219,200,50)" fg:x="504" fg:w="4"/><text x="95.1653%" y="319.50"></text></g><g><title>SSL_CTX_free (3 samples, 0.56%)</title><rect x="95.1036%" y="293" width="0.5650%" height="15" fill="rgb(245,200,0)" fg:x="505" fg:w="3"/><text x="95.3536%" y="303.50"></text></g><g><title>X509_STORE_free (3 samples, 0.56%)</title><rect x="95.1036%" y="277" width="0.5650%" height="15" fill="rgb(245,119,33)" fg:x="505" fg:w="3"/><text x="95.3536%" y="287.50"></text></g><g><title>OPENSSL_sk_pop_free (3 samples, 0.56%)</title><rect x="95.1036%" y="261" width="0.5650%" height="15" fill="rgb(231,125,12)" fg:x="505" fg:w="3"/><text x="95.3536%" y="271.50"></text></g><g><title>X509_OBJECT_free (3 samples, 0.56%)</title><rect x="95.1036%" y="245" width="0.5650%" height="15" fill="rgb(216,96,41)" fg:x="505" fg:w="3"/><text x="95.3536%" y="255.50"></text></g><g><title>ASN1_item_free (3 samples, 0.56%)</title><rect x="95.1036%" y="229" width="0.5650%" height="15" fill="rgb(248,43,45)" fg:x="505" fg:w="3"/><text x="95.3536%" y="239.50"></text></g><g><title>[libcrypto.so.3.0.8] (3 samples, 0.56%)</title><rect x="95.1036%" y="213" width="0.5650%" height="15" fill="rgb(217,222,7)" fg:x="505" fg:w="3"/><text x="95.3536%" y="223.50"></text></g><g><title>[libcrypto.so.3.0.8] (3 samples, 0.56%)</title><rect x="95.1036%" y="197" width="0.5650%" height="15" fill="rgb(233,28,6)" fg:x="505" fg:w="3"/><text x="95.3536%" y="207.50"></text></g><g><title>[libcrypto.so.3.0.8] (3 samples, 0.56%)</title><rect x="95.1036%" y="181" width="0.5650%" height="15" fill="rgb(231,218,15)" fg:x="505" fg:w="3"/><text x="95.3536%" y="191.50"></text></g><g><title>[libcrypto.so.3.0.8] (3 samples, 0.56%)</title><rect x="95.1036%" y="165" width="0.5650%" height="15" fill="rgb(226,171,48)" fg:x="505" fg:w="3"/><text x="95.3536%" y="175.50"></text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 0.38%)</title><rect x="95.2919%" y="149" width="0.3766%" height="15" fill="rgb(235,201,9)" fg:x="506" fg:w="2"/><text x="95.5419%" y="159.50"></text></g><g><title>__free (1 samples, 0.19%)</title><rect x="95.4802%" y="133" width="0.1883%" height="15" fill="rgb(217,80,15)" fg:x="507" fg:w="1"/><text x="95.7302%" y="143.50"></text></g><g><title>_int_free (1 samples, 0.19%)</title><rect x="95.4802%" y="117" width="0.1883%" height="15" fill="rgb(219,152,8)" fg:x="507" fg:w="1"/><text x="95.7302%" y="127.50"></text></g><g><title>tokio::runtime::coop::budget (27 samples, 5.08%)</title><rect x="90.9605%" y="997" width="5.0847%" height="15" fill="rgb(243,107,38)" fg:x="483" fg:w="27"/><text x="91.2105%" y="1007.50">tokio:..</text></g><g><title>tokio::runtime::coop::with_budget (27 samples, 5.08%)</title><rect x="90.9605%" y="981" width="5.0847%" height="15" fill="rgb(231,17,5)" fg:x="483" fg:w="27"/><text x="91.2105%" y="991.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (27 samples, 5.08%)</title><rect x="90.9605%" y="965" width="5.0847%" height="15" fill="rgb(209,25,54)" fg:x="483" fg:w="27"/><text x="91.2105%" y="975.50">tokio:..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (27 samples, 5.08%)</title><rect x="90.9605%" y="949" width="5.0847%" height="15" fill="rgb(219,0,2)" fg:x="483" fg:w="27"/><text x="91.2105%" y="959.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (27 samples, 5.08%)</title><rect x="90.9605%" y="933" width="5.0847%" height="15" fill="rgb(246,9,5)" fg:x="483" fg:w="27"/><text x="91.2105%" y="943.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.38%)</title><rect x="95.6685%" y="917" width="0.3766%" height="15" fill="rgb(226,159,4)" fg:x="508" fg:w="2"/><text x="95.9185%" y="927.50"></text></g><g><title>syscall (1 samples, 0.19%)</title><rect x="96.0452%" y="949" width="0.1883%" height="15" fill="rgb(219,175,34)" fg:x="510" fg:w="1"/><text x="96.2952%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (29 samples, 5.46%)</title><rect x="90.9605%" y="1013" width="5.4614%" height="15" fill="rgb(236,10,46)" fg:x="483" fg:w="29"/><text x="91.2105%" y="1023.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (2 samples, 0.38%)</title><rect x="96.0452%" y="997" width="0.3766%" height="15" fill="rgb(240,211,16)" fg:x="510" fg:w="2"/><text x="96.2952%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (2 samples, 0.38%)</title><rect x="96.0452%" y="981" width="0.3766%" height="15" fill="rgb(205,3,43)" fg:x="510" fg:w="2"/><text x="96.2952%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (2 samples, 0.38%)</title><rect x="96.0452%" y="965" width="0.3766%" height="15" fill="rgb(245,7,22)" fg:x="510" fg:w="2"/><text x="96.2952%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1 samples, 0.19%)</title><rect x="96.2335%" y="949" width="0.1883%" height="15" fill="rgb(239,132,32)" fg:x="511" fg:w="1"/><text x="96.4835%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (1 samples, 0.19%)</title><rect x="96.2335%" y="933" width="0.1883%" height="15" fill="rgb(228,202,34)" fg:x="511" fg:w="1"/><text x="96.4835%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.19%)</title><rect x="96.2335%" y="917" width="0.1883%" height="15" fill="rgb(254,200,22)" fg:x="511" fg:w="1"/><text x="96.4835%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.19%)</title><rect x="96.2335%" y="901" width="0.1883%" height="15" fill="rgb(219,10,39)" fg:x="511" fg:w="1"/><text x="96.4835%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.19%)</title><rect x="96.6102%" y="965" width="0.1883%" height="15" fill="rgb(226,210,39)" fg:x="513" fg:w="1"/><text x="96.8602%" y="975.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.19%)</title><rect x="96.6102%" y="949" width="0.1883%" height="15" fill="rgb(208,219,16)" fg:x="513" fg:w="1"/><text x="96.8602%" y="959.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.19%)</title><rect x="96.6102%" y="933" width="0.1883%" height="15" fill="rgb(216,158,51)" fg:x="513" fg:w="1"/><text x="96.8602%" y="943.50"></text></g><g><title>std::panic::catch_unwind (117 samples, 22.03%)</title><rect x="74.9529%" y="1461" width="22.0339%" height="15" fill="rgb(233,14,44)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1471.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (117 samples, 22.03%)</title><rect x="74.9529%" y="1445" width="22.0339%" height="15" fill="rgb(237,97,39)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1455.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (117 samples, 22.03%)</title><rect x="74.9529%" y="1429" width="22.0339%" height="15" fill="rgb(218,198,43)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1439.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (117 samples, 22.03%)</title><rect x="74.9529%" y="1413" width="22.0339%" height="15" fill="rgb(231,104,20)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1423.50">&lt;core::panic::unwind_safe::AssertUn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (117 samples, 22.03%)</title><rect x="74.9529%" y="1397" width="22.0339%" height="15" fill="rgb(254,36,13)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1407.50">std::thread::Builder::spawn_uncheck..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (117 samples, 22.03%)</title><rect x="74.9529%" y="1381" width="22.0339%" height="15" fill="rgb(248,14,50)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1391.50">std::sys_common::backtrace::__rust_..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (117 samples, 22.03%)</title><rect x="74.9529%" y="1365" width="22.0339%" height="15" fill="rgb(217,107,29)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1375.50">tokio::runtime::blocking::pool::Spa..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (117 samples, 22.03%)</title><rect x="74.9529%" y="1349" width="22.0339%" height="15" fill="rgb(251,169,33)" fg:x="398" fg:w="117"/><text x="75.2029%" y="1359.50">tokio::runtime::blocking::pool::Inn..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (77 samples, 14.50%)</title><rect x="82.4859%" y="1333" width="14.5009%" height="15" fill="rgb(217,108,32)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1343.50">tokio::runtime::blocki..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (77 samples, 14.50%)</title><rect x="82.4859%" y="1317" width="14.5009%" height="15" fill="rgb(219,66,42)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1327.50">tokio::runtime::task::..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (77 samples, 14.50%)</title><rect x="82.4859%" y="1301" width="14.5009%" height="15" fill="rgb(206,180,7)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1311.50">tokio::runtime::task::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (77 samples, 14.50%)</title><rect x="82.4859%" y="1285" width="14.5009%" height="15" fill="rgb(208,226,31)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1295.50">tokio::runtime::task::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (77 samples, 14.50%)</title><rect x="82.4859%" y="1269" width="14.5009%" height="15" fill="rgb(218,26,49)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1279.50">tokio::runtime::task::..</text></g><g><title>tokio::runtime::task::harness::poll_future (77 samples, 14.50%)</title><rect x="82.4859%" y="1253" width="14.5009%" height="15" fill="rgb(233,197,48)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1263.50">tokio::runtime::task::..</text></g><g><title>std::panic::catch_unwind (77 samples, 14.50%)</title><rect x="82.4859%" y="1237" width="14.5009%" height="15" fill="rgb(252,181,51)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1247.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (77 samples, 14.50%)</title><rect x="82.4859%" y="1221" width="14.5009%" height="15" fill="rgb(253,90,19)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1231.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (77 samples, 14.50%)</title><rect x="82.4859%" y="1205" width="14.5009%" height="15" fill="rgb(215,171,30)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1215.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77 samples, 14.50%)</title><rect x="82.4859%" y="1189" width="14.5009%" height="15" fill="rgb(214,222,9)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1199.50">&lt;core::panic::unwind_s..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (77 samples, 14.50%)</title><rect x="82.4859%" y="1173" width="14.5009%" height="15" fill="rgb(223,3,22)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1183.50">tokio::runtime::task::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (77 samples, 14.50%)</title><rect x="82.4859%" y="1157" width="14.5009%" height="15" fill="rgb(225,196,46)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1167.50">tokio::runtime::task::..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (77 samples, 14.50%)</title><rect x="82.4859%" y="1141" width="14.5009%" height="15" fill="rgb(209,110,37)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1151.50">tokio::loom::std::unsa..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (77 samples, 14.50%)</title><rect x="82.4859%" y="1125" width="14.5009%" height="15" fill="rgb(249,89,12)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1135.50">tokio::runtime::task::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (77 samples, 14.50%)</title><rect x="82.4859%" y="1109" width="14.5009%" height="15" fill="rgb(226,27,33)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1119.50">&lt;tokio::runtime::block..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (77 samples, 14.50%)</title><rect x="82.4859%" y="1093" width="14.5009%" height="15" fill="rgb(213,82,22)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1103.50">tokio::runtime::schedu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (77 samples, 14.50%)</title><rect x="82.4859%" y="1077" width="14.5009%" height="15" fill="rgb(248,140,0)" fg:x="438" fg:w="77"/><text x="82.7359%" y="1087.50">tokio::runtime::schedu..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (76 samples, 14.31%)</title><rect x="82.6742%" y="1061" width="14.3126%" height="15" fill="rgb(228,106,3)" fg:x="439" fg:w="76"/><text x="82.9242%" y="1071.50">tokio::macros::scoped_..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (76 samples, 14.31%)</title><rect x="82.6742%" y="1045" width="14.3126%" height="15" fill="rgb(209,23,37)" fg:x="439" fg:w="76"/><text x="82.9242%" y="1055.50">tokio::runtime::schedu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (76 samples, 14.31%)</title><rect x="82.6742%" y="1029" width="14.3126%" height="15" fill="rgb(241,93,50)" fg:x="439" fg:w="76"/><text x="82.9242%" y="1039.50">tokio::runtime::schedu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (3 samples, 0.56%)</title><rect x="96.4218%" y="1013" width="0.5650%" height="15" fill="rgb(253,46,43)" fg:x="512" fg:w="3"/><text x="96.6718%" y="1023.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.38%)</title><rect x="96.6102%" y="997" width="0.3766%" height="15" fill="rgb(226,206,43)" fg:x="513" fg:w="2"/><text x="96.8602%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (2 samples, 0.38%)</title><rect x="96.6102%" y="981" width="0.3766%" height="15" fill="rgb(217,54,7)" fg:x="513" fg:w="2"/><text x="96.8602%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (1 samples, 0.19%)</title><rect x="96.7985%" y="965" width="0.1883%" height="15" fill="rgb(223,5,52)" fg:x="514" fg:w="1"/><text x="97.0485%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.19%)</title><rect x="96.7985%" y="949" width="0.1883%" height="15" fill="rgb(206,52,46)" fg:x="514" fg:w="1"/><text x="97.0485%" y="959.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="96.9868%" y="1429" width="0.1883%" height="15" fill="rgb(253,136,11)" fg:x="515" fg:w="1"/><text x="97.2368%" y="1439.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.19%)</title><rect x="96.9868%" y="1413" width="0.1883%" height="15" fill="rgb(208,106,33)" fg:x="515" fg:w="1"/><text x="97.2368%" y="1423.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.19%)</title><rect x="96.9868%" y="1397" width="0.1883%" height="15" fill="rgb(206,54,4)" fg:x="515" fg:w="1"/><text x="97.2368%" y="1407.50"></text></g><g><title>alloc_new_heap (1 samples, 0.19%)</title><rect x="96.9868%" y="1381" width="0.1883%" height="15" fill="rgb(213,3,15)" fg:x="515" fg:w="1"/><text x="97.2368%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (119 samples, 22.41%)</title><rect x="74.9529%" y="1525" width="22.4105%" height="15" fill="rgb(252,211,39)" fg:x="398" fg:w="119"/><text x="75.2029%" y="1535.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (119 samples, 22.41%)</title><rect x="74.9529%" y="1509" width="22.4105%" height="15" fill="rgb(223,6,36)" fg:x="398" fg:w="119"/><text x="75.2029%" y="1519.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (119 samples, 22.41%)</title><rect x="74.9529%" y="1493" width="22.4105%" height="15" fill="rgb(252,169,45)" fg:x="398" fg:w="119"/><text x="75.2029%" y="1503.50">core::ops::function::FnOnce::call_o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (119 samples, 22.41%)</title><rect x="74.9529%" y="1477" width="22.4105%" height="15" fill="rgb(212,48,26)" fg:x="398" fg:w="119"/><text x="75.2029%" y="1487.50">std::thread::Builder::spawn_uncheck..</text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 0.38%)</title><rect x="96.9868%" y="1461" width="0.3766%" height="15" fill="rgb(251,102,48)" fg:x="515" fg:w="2"/><text x="97.2368%" y="1471.50"></text></g><g><title>__pthread_getattr_np (2 samples, 0.38%)</title><rect x="96.9868%" y="1445" width="0.3766%" height="15" fill="rgb(243,208,16)" fg:x="515" fg:w="2"/><text x="97.2368%" y="1455.50"></text></g><g><title>__pthread_getaffinity_alias (1 samples, 0.19%)</title><rect x="97.1751%" y="1429" width="0.1883%" height="15" fill="rgb(219,96,24)" fg:x="516" fg:w="1"/><text x="97.4251%" y="1439.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.19%)</title><rect x="97.1751%" y="1413" width="0.1883%" height="15" fill="rgb(219,33,29)" fg:x="516" fg:w="1"/><text x="97.4251%" y="1423.50"></text></g><g><title>__clone3 (146 samples, 27.50%)</title><rect x="71.5631%" y="1573" width="27.4953%" height="15" fill="rgb(223,176,5)" fg:x="380" fg:w="146"/><text x="71.8131%" y="1583.50">__clone3</text></g><g><title>start_thread (136 samples, 25.61%)</title><rect x="73.4463%" y="1557" width="25.6121%" height="15" fill="rgb(228,140,14)" fg:x="390" fg:w="136"/><text x="73.6963%" y="1567.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (129 samples, 24.29%)</title><rect x="74.7646%" y="1541" width="24.2938%" height="15" fill="rgb(217,179,31)" fg:x="397" fg:w="129"/><text x="75.0146%" y="1551.50">std::sys::unix::thread::Thread::new::th..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (9 samples, 1.69%)</title><rect x="97.3635%" y="1525" width="1.6949%" height="15" fill="rgb(230,9,30)" fg:x="517" fg:w="9"/><text x="97.6135%" y="1535.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (9 samples, 1.69%)</title><rect x="97.3635%" y="1509" width="1.6949%" height="15" fill="rgb(230,136,20)" fg:x="517" fg:w="9"/><text x="97.6135%" y="1519.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (9 samples, 1.69%)</title><rect x="97.3635%" y="1493" width="1.6949%" height="15" fill="rgb(215,210,22)" fg:x="517" fg:w="9"/><text x="97.6135%" y="1503.50"></text></g><g><title>__GI___munmap (9 samples, 1.69%)</title><rect x="97.3635%" y="1477" width="1.6949%" height="15" fill="rgb(218,43,5)" fg:x="517" fg:w="9"/><text x="97.6135%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}&gt;&gt;&gt; (1 samples, 0.19%)</title><rect x="99.0584%" y="1573" width="0.1883%" height="15" fill="rgb(216,11,5)" fg:x="526" fg:w="1"/><text x="99.3084%" y="1583.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1 samples, 0.19%)</title><rect x="99.2467%" y="1573" width="0.1883%" height="15" fill="rgb(209,82,29)" fg:x="527" fg:w="1"/><text x="99.4967%" y="1583.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1 samples, 0.19%)</title><rect x="99.4350%" y="1573" width="0.1883%" height="15" fill="rgb(244,115,12)" fg:x="528" fg:w="1"/><text x="99.6850%" y="1583.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.19%)</title><rect x="99.6234%" y="1573" width="0.1883%" height="15" fill="rgb(222,82,18)" fg:x="529" fg:w="1"/><text x="99.8734%" y="1583.50"></text></g><g><title>all (531 samples, 100%)</title><rect x="0.0000%" y="1605" width="100.0000%" height="15" fill="rgb(249,227,8)" fg:x="0" fg:w="531"/><text x="0.2500%" y="1615.50"></text></g><g><title>tokio-runtime-w (155 samples, 29.19%)</title><rect x="70.8098%" y="1589" width="29.1902%" height="15" fill="rgb(253,141,45)" fg:x="376" fg:w="155"/><text x="71.0598%" y="1599.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.19%)</title><rect x="99.8117%" y="1573" width="0.1883%" height="15" fill="rgb(234,184,4)" fg:x="530" fg:w="1"/><text x="100.0617%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.19%)</title><rect x="99.8117%" y="1557" width="0.1883%" height="15" fill="rgb(218,194,23)" fg:x="530" fg:w="1"/><text x="100.0617%" y="1567.50"></text></g><g><title>tokio::runtime::task::waker::waker_ref (1 samples, 0.19%)</title><rect x="99.8117%" y="1541" width="0.1883%" height="15" fill="rgb(235,66,41)" fg:x="530" fg:w="1"/><text x="100.0617%" y="1551.50"></text></g></svg></svg>